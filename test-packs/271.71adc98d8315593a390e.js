"use strict";(self.webpackChunkstudio=self.webpackChunkstudio||[]).push([[271,998,298],{6998:(t,a,e)=>{e.r(a),e.d(a,{BasePage:()=>s});class s{constructor(t,a,e,s){this.walletConnect=t,this.algodClient=e,this.algoIndexer=s,this.holdings=a}}},1271:(t,a,e)=>{e.r(a),e.d(a,{Home:()=>i});var s=e(6998),n=e(5298);class i extends s.BasePage{constructor(){super(...arguments),this.ui=document.createElement("div"),this.ui.innerHTML='\n        \x3c!--<h1>Welcome to the Studio</h1>--\x3e\n        <div class="text-center">\n        <img src="assets/logo-studio.png" width="160" alt="The Studio" class="mb-4">\n        <p id="info-message"></p>\n        </div>\n        <div class="springboard d-flex flex-column flex-md-row w-100">\n\n            <div class="flex-fill springboard-item springboard-main-item mb-3 me-md-2">\n                <a href="?grinder" class="d-block" style="background-image: url(\'assets/springbord-grinder.png\'); background-color: #d39e27;" data-page-link="grinder">\n                    <h3>Grinder</h3>\n                    <p>Use Caffeine Cards to evolve your Bathers</p>\n                </a>\n            </div>\n\n            <div class="flex-fill d-flex flex-column">\n                <div class="flex-fill springboard-item mb-3 ms-md-2">\n                    <a href="?cards" class="d-block"\n                        style="background-image: url(\'assets/springboard-cards.png\'); background-color: #bb5f00;" data-page-link="cards">\n                        <h3>Caffeine<br>Cards</h3>\n                        <p>Browse all cards</p>\n                    </a>\n                </div>\n                <div class="flex-fill springboard-item mb-3 ms-md-2">\n                    <a href="?good-morning" class="d-block"\n                        style="background-image: url(\'assets/springboard-gm.png\'); background-color: #12c1b1;" data-page-link="good-morning">\n                        <h3>Good Morning!</h3>\n                        <p>Generate GM GIFs featuring your Bathers</p>\n                    </a>\n                </div>\n\n            </div>\n        ',this.loadPacks()}async loadPacks(){const t=await(0,n.loadPacks)(this.holdings);t&&t.claimablePacks.length>0&&(this.ui.querySelector("#info-message").innerHTML=`<a href="?packs" data-page-link="packs">You have ${t.claimablePacks.length} Caffeine Cards to claim!</a>`,window.enableNavigationLinks())}}},5298:(t,a,e)=>{e.r(a),e.d(a,{Packs:()=>l,loadPacks:()=>c});var s=e(6998),n=e(7304),i=e(4050),o=e(4393);const r="https://api.atomixwap.xyz";async function c(t){let a=await fetch(`${r}/caffeine-card-pack/get-all`);if(200===a.status){let e=await a.json();const s=t.bathers.nfts.map((t=>t.assetId));let n=[];for(const t of e.packs)s.includes(t[0])&&n.push(t);return{claimablePacks:n,escrowAddress:e.escrowAddress}}throw new Error(`Can't load packs. Error ${a.status}`)}class l extends s.BasePage{constructor(){super(...arguments),this.ui=document.createElement("div"),this.ui.innerHTML='\n    <h1>Caffeine Cards Packs</h1>\n    <p id="packs-status" class="dark-text text-center">Loading packs...</p>\n    ',this.claimablePacks,this.escrowAddress,this.fetchPacks()}async fetchPacks(){const t=this.ui.querySelector("#packs-status");try{const a=await c(this.holdings);if(this.claimablePacks=a.claimablePacks,this.escrowAddress=a.escrowAddress,this.claimablePacks.length>0){let a="";this.claimablePacks.length>1&&(a="s"),t.textContent=`${this.claimablePacks.length} pack${a} to claim!`}else t.innerHTML='<img src="assets/pack0-0.png" style="width: 240px; opacity: 0.2;" class="mb-3"><br>\n        No pack to open.<br>\n        Make sure Bathers are not listed on marketplaces to see your packs.<br><br>\n        A Caffeine Card is given for every Bather bought in the <a href="https://instantshuffle.com/shuffle/yUSbzq61ZvqTIsSvLycS" target="_blank">Instant Shuffle.</a>\n        ';const e=document.createElement("div");e.className="row row-cols-2 row-cols-md-3 row-cols-lg-4 gy-4 mb-5 justify-content-center",this.ui.append(e);for(const t of this.claimablePacks){const a=document.createElement("div");a.className="col text-center ps-3 pe-3",e.append(a);const s=document.createElement("canvas");s.className="w-100 mb-0";const n=new d(s,t[1],this.algoIndexer);await n.load(),a.append(s);const i=document.createElement("div");i.className="dark-text mt-0 pt-0 mb-2 hidden-pack-name",i.style.opacity="0",i.style["max-height"]="0",i.textContent=n.nft.name,a.append(i);const o=document.createElement("button");o.className="open-pack-button",o.textContent="Open",o.dataset.batherId=t[0],o.dataset.caffeineCardId=t[1],o.addEventListener("click",this.openPack.bind(this,n,i),!1),a.append(o)}}catch(a){console.error(a),t.textContent=a.message}}disableAllButtons(t){this.ui.querySelectorAll(".open-pack-button").forEach((a=>{a===t||a.dataset.opened||(a.className="open-pack-button soft-disabled",a.disabled=!0)}))}enableAllButtons(t){this.ui.querySelectorAll(".open-pack-button").forEach((a=>{a===t||a.dataset.opened||(a.className="open-pack-button",a.disabled=!1)}))}async openPack(t,a,e){const s=e.currentTarget;this.disableAllButtons(s);const n=s.dataset.batherId,o=s.dataset.caffeineCardId;try{s.innerHTML='<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>',s.disabled=!0;let e=await this.algodClient.getTransactionParams().do(),c=[i.makeAssetTransferTxnWithSuggestedParamsFromObject({from:this.walletConnect.walletAddress,to:this.walletConnect.walletAddress,amount:0,assetIndex:parseInt(o),suggestedParams:e}),i.makeAssetTransferTxnWithSuggestedParamsFromObject({from:this.escrowAddress,to:this.walletConnect.walletAddress,amount:1,assetIndex:parseInt(o),suggestedParams:e})];i.assignGroupID(c);const l=await this.walletConnect.signTransactions(c),d={batherId:n,txn:btoa(String.fromCharCode.apply(null,l[0])),suggestedParams:e};s.innerHTML='<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>\n      Opening...',s.disabled=!0;const h=await fetch(r+"/caffeine-card-pack/claim",{method:"POST",body:JSON.stringify(d),headers:{Accept:"application/json","Content-Type":"application/json"}});if(200!==h.status){let t;try{t=await h.json()}catch(t){}throw t&&t.error?new Error(t.error):new Error(`Error ${h.status}`)}s.innerHTML='<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" class="bi bi-check-circle-fill" viewBox="0 0 16 16">\n        <path d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zm-3.97-3.03a.75.75 0 0 0-1.08.022L7.477 9.417 5.384 7.323a.75.75 0 0 0-1.06 1.06L6.97 11.03a.75.75 0 0 0 1.079-.02l3.992-4.99a.75.75 0 0 0-.01-1.05z"/>\n      </svg>\n        Opened',s.disabled=!0,s.dataset.opened=!0,t.animate(),a.style.opacity="1",a.style["max-height"]="500px",this.enableAllButtons(s)}catch(t){console.error(t),alert(t.message),s.textContent="Open",s.disabled=!1,this.enableAllButtons(s)}}}class d{constructor(t,a,e){this.caffeineCardId=a,this.algoIndexer=e,this.width=660,this.height=960,this.imageWidth=960,this.numAnimationImage=4,this.canvas=t,this.canvas.width=this.width,this.canvas.height=this.height,this.context=this.canvas.getContext("2d"),this.context.imageSmoothingEnabled=!1,this.context.translate(-(this.imageWidth-this.width)/2,0),this.nft,this.cardImage,this.cardMask,this.animationImages}async load(){await this.loadAllImage()}static loadImage(t){return new Promise(((a,e)=>{const s=new Image;s.crossOrigin="Anonymous",s.onload=()=>{a(s)},s.onerror=e,s.src=t}))}async loadAllImage(){this.animationImages=[];const t=this.caffeineCardId%4,a=await d.loadImage(`assets/pack${t}-0.png`);this.animationImages.push(a),this.drawPack(),this.cardMask=await d.loadImage("assets/card-mask.png");const e=await this.algoIndexer.lookupAssetByID(this.caffeineCardId).do();this.nft=new n.Sm(this.caffeineCardId,e.asset),await this.nft.load(this.algoIndexer);try{this.cardImage=await d.loadImage(this.nft.imageUrl)}catch(t){console.log("Error loading image from primary, trying secondary");try{this.cardImage=await d.loadImage(this.nft.imageUrlAlternate)}catch(t){this.cardImage=await d.loadImage("assets/empty-card.png")}}for(let a=1;a<=this.numAnimationImage;a++){const e=await d.loadImage(`assets/pack${t}-${a}.png`);this.animationImages.push(e)}}async drawPack(){this.context.drawImage(this.animationImages[0],0,0,this.imageWidth,this.height)}static easeInOutQuad(t){return t<.5?2*t*t:1-Math.pow(-2*t+2,2)/2}async animate(){let t=.15,a=1;const e=setInterval((()=>{if(this.context.clearRect(0,0,this.imageWidth,this.height),this.context.drawImage(this.cardMask,0,0,this.imageWidth,this.height),this.context.globalCompositeOperation="source-in",this.context.drawImage(this.cardImage,0,0,this.imageWidth,this.height),this.context.globalCompositeOperation="source-over",this.context.drawImage(this.animationImages[a],0,0,this.imageWidth,this.height),a===this.numAnimationImage){clearInterval(e),o.sparkles(this.canvas),t=.05;const a=.8;let s=0;const n=setInterval((()=>{const e=d.easeInOutQuad(s/a)*this.height;this.context.clearRect(0,0,this.imageWidth,this.height),this.context.drawImage(this.cardMask,0,0,this.imageWidth,this.height),this.context.globalCompositeOperation="source-in",this.context.drawImage(this.cardImage,0,0,this.imageWidth,this.height),this.context.globalCompositeOperation="source-over",this.context.drawImage(this.animationImages[this.numAnimationImage],0,e,this.imageWidth,this.height),s+=t,s>=a&&clearInterval(n)}),1e3*t)}a++}),1e3*t)}}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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LFdBQVl2RyxLQUFLc0csUUFFbkZxQyxJQUFpQjNJLEtBQUt3RyxrQkFBa0IsQ0FFMUN3QyxjQUFjSixHQUVkLFdBQWU1SSxLQUFLb0csUUFHcEJzQyxFQUFnQixJQUNoQixNQUFNTyxFQUFvQixHQUMxQixJQUFJQyxFQUFjLEVBRWxCLE1BQU1DLEVBQWNOLGFBQVksS0FFOUIsTUFBTU8sRUFBVXpHLEVBQXFCMEcsY0FBY0gsRUFBWUQsR0FBbUJqSixLQUFLc0csT0FHdkZ0RyxLQUFLeUcsUUFBUXFDLFVBQVUsRUFBRyxFQUFHOUksS0FBS3VHLFdBQVl2RyxLQUFLc0csUUFHbkR0RyxLQUFLeUcsUUFBUTZCLFVBQVV0SSxLQUFLOEcsU0FBVSxFQUFHLEVBQUc5RyxLQUFLdUcsV0FBWXZHLEtBQUtzRyxRQUVsRXRHLEtBQUt5RyxRQUFRc0MseUJBQTJCLFlBR3hDL0ksS0FBS3lHLFFBQVE2QixVQUFVdEksS0FBSzZHLFVBQVcsRUFBRyxFQUFHN0csS0FBS3VHLFdBQVl2RyxLQUFLc0csUUFFbkV0RyxLQUFLeUcsUUFBUXNDLHlCQUEyQixjQUd4Qy9JLEtBQUt5RyxRQUFRNkIsVUFBVXRJLEtBQUsrRyxnQkFBZ0IvRyxLQUFLd0csbUJBQW9CLEVBQUc0QyxFQUFTcEosS0FBS3VHLFdBQVl2RyxLQUFLc0csUUFFdkc0QyxHQUFlUixFQUVYUSxHQUFlRCxHQUNqQkQsY0FBY0csRUFJaEIsR0FFZSxJQUFkVCxFQUVMLENBRUFDLEdBQWMsR0FFQyxJQUFkRCxFQUlMLEUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zdHVkaW8vLi9zcmMvcGFnZXMvYmFzZS5qcyIsIndlYnBhY2s6Ly9zdHVkaW8vLi9zcmMvcGFnZXMvaG9tZS5qcyIsIndlYnBhY2s6Ly9zdHVkaW8vLi9zcmMvcGFnZXMvcGFja3MuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXG5leHBvcnQgY2xhc3MgQmFzZVBhZ2Uge1xuXG4gICAgY29uc3RydWN0b3Iod2FsbGV0Q29ubmVjdCwgaG9sZGluZ3MsIGFsZ29kQ2xpZW50LCBhbGdvSW5kZXhlcil7XG5cbiAgICAgICAgdGhpcy53YWxsZXRDb25uZWN0ID0gd2FsbGV0Q29ubmVjdDtcbiAgICAgICAgdGhpcy5hbGdvZENsaWVudCA9IGFsZ29kQ2xpZW50O1xuICAgICAgICB0aGlzLmFsZ29JbmRleGVyID0gYWxnb0luZGV4ZXI7XG4gICAgICAgIHRoaXMuaG9sZGluZ3MgPSBob2xkaW5ncztcblxuICAgICAgICBcblxuICAgIH1cblxufSIsImltcG9ydCB7IEJhc2VQYWdlIH0gZnJvbSBcIi4vYmFzZS5qc1wiO1xuaW1wb3J0IHsgbG9hZFBhY2tzIH0gZnJvbSBcIi4vcGFja3MuanNcIjtcblxuXG5leHBvcnQgY2xhc3MgSG9tZSBleHRlbmRzIEJhc2VQYWdlIHtcblxuICAgIGNvbnN0cnVjdG9yKCl7XG5cbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAgICAgXG4gICAgICAgIHRoaXMudWkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgdGhpcy51aS5pbm5lckhUTUwgPSBgXG4gICAgICAgIDwhLS08aDE+V2VsY29tZSB0byB0aGUgU3R1ZGlvPC9oMT4tLT5cbiAgICAgICAgPGRpdiBjbGFzcz1cInRleHQtY2VudGVyXCI+XG4gICAgICAgIDxpbWcgc3JjPVwiYXNzZXRzL2xvZ28tc3R1ZGlvLnBuZ1wiIHdpZHRoPVwiMTYwXCIgYWx0PVwiVGhlIFN0dWRpb1wiIGNsYXNzPVwibWItNFwiPlxuICAgICAgICA8cCBpZD1cImluZm8tbWVzc2FnZVwiPjwvcD5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJzcHJpbmdib2FyZCBkLWZsZXggZmxleC1jb2x1bW4gZmxleC1tZC1yb3cgdy0xMDBcIj5cblxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImZsZXgtZmlsbCBzcHJpbmdib2FyZC1pdGVtIHNwcmluZ2JvYXJkLW1haW4taXRlbSBtYi0zIG1lLW1kLTJcIj5cbiAgICAgICAgICAgICAgICA8YSBocmVmPVwiP2dyaW5kZXJcIiBjbGFzcz1cImQtYmxvY2tcIiBzdHlsZT1cImJhY2tncm91bmQtaW1hZ2U6IHVybCgnYXNzZXRzL3NwcmluZ2JvcmQtZ3JpbmRlci5wbmcnKTsgYmFja2dyb3VuZC1jb2xvcjogI2QzOWUyNztcIiBkYXRhLXBhZ2UtbGluaz1cImdyaW5kZXJcIj5cbiAgICAgICAgICAgICAgICAgICAgPGgzPkdyaW5kZXI8L2gzPlxuICAgICAgICAgICAgICAgICAgICA8cD5Vc2UgQ2FmZmVpbmUgQ2FyZHMgdG8gZXZvbHZlIHlvdXIgQmF0aGVyczwvcD5cbiAgICAgICAgICAgICAgICA8L2E+XG4gICAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImZsZXgtZmlsbCBkLWZsZXggZmxleC1jb2x1bW5cIj5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZmxleC1maWxsIHNwcmluZ2JvYXJkLWl0ZW0gbWItMyBtcy1tZC0yXCI+XG4gICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9XCI/Y2FyZHNcIiBjbGFzcz1cImQtYmxvY2tcIlxuICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9XCJiYWNrZ3JvdW5kLWltYWdlOiB1cmwoJ2Fzc2V0cy9zcHJpbmdib2FyZC1jYXJkcy5wbmcnKTsgYmFja2dyb3VuZC1jb2xvcjogI2JiNWYwMDtcIiBkYXRhLXBhZ2UtbGluaz1cImNhcmRzXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8aDM+Q2FmZmVpbmU8YnI+Q2FyZHM8L2gzPlxuICAgICAgICAgICAgICAgICAgICAgICAgPHA+QnJvd3NlIGFsbCBjYXJkczwvcD5cbiAgICAgICAgICAgICAgICAgICAgPC9hPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJmbGV4LWZpbGwgc3ByaW5nYm9hcmQtaXRlbSBtYi0zIG1zLW1kLTJcIj5cbiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj1cIj9nb29kLW1vcm5pbmdcIiBjbGFzcz1cImQtYmxvY2tcIlxuICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9XCJiYWNrZ3JvdW5kLWltYWdlOiB1cmwoJ2Fzc2V0cy9zcHJpbmdib2FyZC1nbS5wbmcnKTsgYmFja2dyb3VuZC1jb2xvcjogIzEyYzFiMTtcIiBkYXRhLXBhZ2UtbGluaz1cImdvb2QtbW9ybmluZ1wiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGgzPkdvb2QgTW9ybmluZyE8L2gzPlxuICAgICAgICAgICAgICAgICAgICAgICAgPHA+R2VuZXJhdGUgR00gR0lGcyBmZWF0dXJpbmcgeW91ciBCYXRoZXJzPC9wPlxuICAgICAgICAgICAgICAgICAgICA8L2E+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICBgO1xuXG4gICAgICAgIHRoaXMubG9hZFBhY2tzKCk7XG4gICAgfVxuXG4gICAgYXN5bmMgbG9hZFBhY2tzKCl7XG5cbiAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgbG9hZFBhY2tzKHRoaXMuaG9sZGluZ3MpO1xuXG4gICAgICAgIGlmIChyZXN1bHQgJiYgcmVzdWx0LmNsYWltYWJsZVBhY2tzLmxlbmd0aCA+IDApe1xuXG4gICAgICAgICAgICBjb25zdCBpbmZvTWVzc2FnZVNwYW4gPSB0aGlzLnVpLnF1ZXJ5U2VsZWN0b3IoJyNpbmZvLW1lc3NhZ2UnKTtcbiAgICAgICAgICAgIGluZm9NZXNzYWdlU3Bhbi5pbm5lckhUTUwgPSBgPGEgaHJlZj1cIj9wYWNrc1wiIGRhdGEtcGFnZS1saW5rPVwicGFja3NcIj5Zb3UgaGF2ZSAke3Jlc3VsdC5jbGFpbWFibGVQYWNrcy5sZW5ndGh9IENhZmZlaW5lIENhcmRzIHRvIGNsYWltITwvYT5gO1xuXG4gICAgICAgICAgICB3aW5kb3cuZW5hYmxlTmF2aWdhdGlvbkxpbmtzKCk7XG4gICAgICAgIH1cbiAgICAgICAgXG5cblxuXG4gICAgfVxuXG59IiwiaW1wb3J0IHsgQmFzZVBhZ2UgfSBmcm9tIFwiLi9iYXNlLmpzXCI7XG5pbXBvcnQgeyBORlRDb2xsZWN0aW9uIH0gZnJvbSBcImFsZ28tbmZ0LXV0aWxzXCI7XG5pbXBvcnQgYWxnb3NkayBmcm9tICdhbGdvc2RrJztcbmltcG9ydCB7IE5GVCB9IGZyb20gXCJhbGdvLW5mdC11dGlsc1wiO1xuaW1wb3J0IHBhcnR5IGZyb20gXCJwYXJ0eS1qc1wiO1xuXG5jb25zdCBQQUNLU19BUElfVVJMID0gXCJodHRwczovL2FwaS5hdG9taXh3YXAueHl6XCI7XG4vL2NvbnN0IFBBQ0tTX0FQSV9VUkwgPSBcImh0dHBzOi8vbG9jYWxob3N0XCI7XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBsb2FkUGFja3MoaG9sZGluZ3MpIHtcbiAgbGV0IHJlc3VsdCA9IGF3YWl0IGZldGNoKGAke1BBQ0tTX0FQSV9VUkx9L2NhZmZlaW5lLWNhcmQtcGFjay9nZXQtYWxsYCk7XG5cbiAgaWYgKHJlc3VsdC5zdGF0dXMgPT09IDIwMCkge1xuICAgIGxldCBqc29uID0gYXdhaXQgcmVzdWx0Lmpzb24oKTtcblxuICAgIC8vY29tcGFyZSB3aXRoIGhvbGRpbmdzXG4gICAgY29uc3QgYmF0aGVyc0lkcyA9IGhvbGRpbmdzLmJhdGhlcnMubmZ0cy5tYXAoKG5mdCkgPT4gbmZ0LmFzc2V0SWQpO1xuXG4gICAgbGV0IGNsYWltYWJsZVBhY2tzID0gW107XG5cbiAgICBmb3IgKGNvbnN0IHBhY2sgb2YganNvbi5wYWNrcykge1xuICAgICAgaWYgKGJhdGhlcnNJZHMuaW5jbHVkZXMocGFja1swXSkpIHtcbiAgICAgICAgY2xhaW1hYmxlUGFja3MucHVzaChwYWNrKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgY2xhaW1hYmxlUGFja3M6IGNsYWltYWJsZVBhY2tzLFxuICAgICAgZXNjcm93QWRkcmVzczoganNvbi5lc2Nyb3dBZGRyZXNzLFxuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBDYW5cXCd0IGxvYWQgcGFja3MuIEVycm9yICR7cmVzdWx0LnN0YXR1c31gKTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgUGFja3MgZXh0ZW5kcyBCYXNlUGFnZSB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG5cbiAgICB0aGlzLnVpID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICB0aGlzLnVpLmlubmVySFRNTCA9IGBcbiAgICA8aDE+Q2FmZmVpbmUgQ2FyZHMgUGFja3M8L2gxPlxuICAgIDxwIGlkPVwicGFja3Mtc3RhdHVzXCIgY2xhc3M9XCJkYXJrLXRleHQgdGV4dC1jZW50ZXJcIj5Mb2FkaW5nIHBhY2tzLi4uPC9wPlxuICAgIGA7XG5cbiAgICB0aGlzLmNsYWltYWJsZVBhY2tzO1xuICAgIHRoaXMuZXNjcm93QWRkcmVzcztcblxuICAgIHRoaXMuZmV0Y2hQYWNrcygpO1xuICB9XG5cbiAgYXN5bmMgZmV0Y2hQYWNrcygpIHtcblxuICAgIGNvbnN0IHBhY2tTdGF0dXNQID0gdGhpcy51aS5xdWVyeVNlbGVjdG9yKFwiI3BhY2tzLXN0YXR1c1wiKTtcblxuICAgIHRyeSB7XG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBsb2FkUGFja3ModGhpcy5ob2xkaW5ncyk7XG5cbiAgICAgIHRoaXMuY2xhaW1hYmxlUGFja3MgPSByZXN1bHQuY2xhaW1hYmxlUGFja3M7XG4gICAgICB0aGlzLmVzY3Jvd0FkZHJlc3MgPSByZXN1bHQuZXNjcm93QWRkcmVzcztcblxuICAgICAgaWYgKHRoaXMuY2xhaW1hYmxlUGFja3MubGVuZ3RoID4gMCkge1xuICAgICAgICBsZXQgcGx1cmFsID0gJyc7XG4gICAgICAgIGlmICh0aGlzLmNsYWltYWJsZVBhY2tzLmxlbmd0aCA+IDEpe1xuICAgICAgICAgIHBsdXJhbCA9ICdzJztcbiAgICAgICAgfVxuICAgICAgICBwYWNrU3RhdHVzUC50ZXh0Q29udGVudCA9IGAke3RoaXMuY2xhaW1hYmxlUGFja3MubGVuZ3RofSBwYWNrJHtwbHVyYWx9IHRvIGNsYWltIWA7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwYWNrU3RhdHVzUC5pbm5lckhUTUwgPSBgPGltZyBzcmM9XCJhc3NldHMvcGFjazAtMC5wbmdcIiBzdHlsZT1cIndpZHRoOiAyNDBweDsgb3BhY2l0eTogMC4yO1wiIGNsYXNzPVwibWItM1wiPjxicj5cbiAgICAgICAgTm8gcGFjayB0byBvcGVuLjxicj5cbiAgICAgICAgTWFrZSBzdXJlIEJhdGhlcnMgYXJlIG5vdCBsaXN0ZWQgb24gbWFya2V0cGxhY2VzIHRvIHNlZSB5b3VyIHBhY2tzLjxicj48YnI+XG4gICAgICAgIEEgQ2FmZmVpbmUgQ2FyZCBpcyBnaXZlbiBmb3IgZXZlcnkgQmF0aGVyIGJvdWdodCBpbiB0aGUgPGEgaHJlZj1cImh0dHBzOi8vaW5zdGFudHNodWZmbGUuY29tL3NodWZmbGUveVVTYnpxNjFadnFUSXNTdkx5Y1NcIiB0YXJnZXQ9XCJfYmxhbmtcIj5JbnN0YW50IFNodWZmbGUuPC9hPlxuICAgICAgICBgO1xuICAgICAgfVxuXG4gICAgICAvL2Rpc3BsYXkgcGFjayBsaXN0XG4gICAgICBjb25zdCBwYWNrc0RpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICBwYWNrc0Rpdi5jbGFzc05hbWUgPVxuICAgICAgICBcInJvdyByb3ctY29scy0yIHJvdy1jb2xzLW1kLTMgcm93LWNvbHMtbGctNCBneS00IG1iLTUganVzdGlmeS1jb250ZW50LWNlbnRlclwiO1xuICAgICAgdGhpcy51aS5hcHBlbmQocGFja3NEaXYpO1xuXG4gICAgICBmb3IgKGNvbnN0IHBhY2sgb2YgdGhpcy5jbGFpbWFibGVQYWNrcykge1xuICAgICAgICBjb25zdCBwYWNrRGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgICAgcGFja0Rpdi5jbGFzc05hbWUgPSBcImNvbCB0ZXh0LWNlbnRlciBwcy0zIHBlLTNcIjtcbiAgICAgICAgcGFja3NEaXYuYXBwZW5kKHBhY2tEaXYpO1xuXG4gICAgICAgIC8qY29uc3QgZ3JhcGhpY0RpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICAgIGdyYXBoaWNEaXYuY2xhc3NOYW1lID0gJyc7XG4gICAgICAgIGdyYXBoaWNEaXYuaW5uZXJIVE1MID0gYDxpbWcgc3JjPVwiYXNzZXRzL3BhY2swLnBuZ1wiIGNsYXNzPVwidy0xMDAgbWItMlwiPmA7XG4gICAgICAgIHBhY2tEaXYuYXBwZW5kKGdyYXBoaWNEaXYpOyovXG5cbiAgICAgICAgY29uc3QgcGFja0NhbnZhcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJjYW52YXNcIik7XG4gICAgICAgIHBhY2tDYW52YXMuY2xhc3NOYW1lID0gJ3ctMTAwIG1iLTAnO1xuICAgICAgICBjb25zdCBjb250cm9sbGVyID0gbmV3IFBhY2tDYW52YXNDb250cm9sbGVyKHBhY2tDYW52YXMsIHBhY2tbMV0sIHRoaXMuYWxnb0luZGV4ZXIpO1xuICAgICAgICBhd2FpdCBjb250cm9sbGVyLmxvYWQoKTtcbiAgICAgICAgcGFja0Rpdi5hcHBlbmQocGFja0NhbnZhcyk7XG5cbiAgICAgICAgY29uc3QgaGlkZGVuTmFtZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICAgIGhpZGRlbk5hbWUuY2xhc3NOYW1lID0gXCJkYXJrLXRleHQgbXQtMCBwdC0wIG1iLTIgaGlkZGVuLXBhY2stbmFtZVwiO1xuICAgICAgICBoaWRkZW5OYW1lLnN0eWxlLm9wYWNpdHkgPSAnMCc7XG4gICAgICAgIGhpZGRlbk5hbWUuc3R5bGVbJ21heC1oZWlnaHQnXSA9ICcwJztcbiAgICAgICAgLy9oaWRkZW5OYW1lLmhpZGRlbiA9IHRydWU7XG4gICAgICAgIGhpZGRlbk5hbWUudGV4dENvbnRlbnQgPSBjb250cm9sbGVyLm5mdC5uYW1lO1xuICAgICAgICBwYWNrRGl2LmFwcGVuZChoaWRkZW5OYW1lKTtcblxuICAgICAgICBjb25zdCBvcGVuQnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImJ1dHRvblwiKTtcbiAgICAgICAgb3BlbkJ1dHRvbi5jbGFzc05hbWUgPSBcIm9wZW4tcGFjay1idXR0b25cIlxuICAgICAgICBvcGVuQnV0dG9uLnRleHRDb250ZW50ID0gXCJPcGVuXCI7XG4gICAgICAgIG9wZW5CdXR0b24uZGF0YXNldC5iYXRoZXJJZCA9IHBhY2tbMF07XG4gICAgICAgIG9wZW5CdXR0b24uZGF0YXNldC5jYWZmZWluZUNhcmRJZCA9IHBhY2tbMV07XG4gICAgICAgIG9wZW5CdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIHRoaXMub3BlblBhY2suYmluZCh0aGlzLCBjb250cm9sbGVyLCBoaWRkZW5OYW1lKSwgZmFsc2UpO1xuICAgICAgICBwYWNrRGl2LmFwcGVuZChvcGVuQnV0dG9uKTtcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcblxuICAgICAgcGFja1N0YXR1c1AudGV4dENvbnRlbnQgPSBlcnIubWVzc2FnZTtcbiAgICAgIC8vYWxlcnQoZXJyLm1lc3NhZ2UpO1xuICAgIH1cblxuICB9XG5cbiAgZGlzYWJsZUFsbEJ1dHRvbnMoZXhjZXB0KXtcblxuICAgIGNvbnN0IGJ1dHRvbnMgPSB0aGlzLnVpLnF1ZXJ5U2VsZWN0b3JBbGwoJy5vcGVuLXBhY2stYnV0dG9uJyk7XG4gICAgXG4gICAgYnV0dG9ucy5mb3JFYWNoKGIgPT4ge1xuXG4gICAgICBpZiAoYiAhPT0gZXhjZXB0ICYmICFiLmRhdGFzZXQub3BlbmVkKXtcbiAgICAgICAgYi5jbGFzc05hbWUgPSBcIm9wZW4tcGFjay1idXR0b24gc29mdC1kaXNhYmxlZFwiO1xuICAgICAgICBiLmRpc2FibGVkID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIFxuICAgIH0pO1xuICB9XG5cbiAgZW5hYmxlQWxsQnV0dG9ucyhleGNlcHQpe1xuXG4gICAgY29uc3QgYnV0dG9ucyA9IHRoaXMudWkucXVlcnlTZWxlY3RvckFsbCgnLm9wZW4tcGFjay1idXR0b24nKTtcbiAgICBcbiAgICBidXR0b25zLmZvckVhY2goYiA9PiB7XG5cbiAgICAgIGlmIChiICE9PSBleGNlcHQgJiYgIWIuZGF0YXNldC5vcGVuZWQpe1xuICAgICAgICBiLmNsYXNzTmFtZSA9IFwib3Blbi1wYWNrLWJ1dHRvblwiO1xuICAgICAgICBiLmRpc2FibGVkID0gZmFsc2U7XG4gICAgICB9XG4gICAgICAgIFxuICAgIH0pO1xuICB9XG5cbiAgYXN5bmMgb3BlblBhY2socGFja0NhbnZhc0NvbnRyb2xsZXIsIGhpZGRlbk5hbWUsIGV2ZW50KSB7XG5cbiAgICBjb25zdCBjYWxsaW5nQnV0dG9uID0gZXZlbnQuY3VycmVudFRhcmdldDsgXG5cbiAgICB0aGlzLmRpc2FibGVBbGxCdXR0b25zKGNhbGxpbmdCdXR0b24pO1xuXG4gICAgY29uc3QgYmF0aGVySWQgPSBjYWxsaW5nQnV0dG9uLmRhdGFzZXQuYmF0aGVySWQ7XG4gICAgY29uc3QgY2FmZmVpbmVDYXJkSWQgPSBjYWxsaW5nQnV0dG9uLmRhdGFzZXQuY2FmZmVpbmVDYXJkSWQ7XG5cbiAgICB0cnkge1xuXG4gICAgICBjYWxsaW5nQnV0dG9uLmlubmVySFRNTCA9IGA8c3BhbiBjbGFzcz1cInNwaW5uZXItYm9yZGVyIHNwaW5uZXItYm9yZGVyLXNtXCIgcm9sZT1cInN0YXR1c1wiIGFyaWEtaGlkZGVuPVwidHJ1ZVwiPjwvc3Bhbj5gO1xuICAgICAgY2FsbGluZ0J1dHRvbi5kaXNhYmxlZCA9IHRydWU7XG5cbiAgICAgIGxldCBzdWdnZXN0ZWRQYXJhbXMgPSBhd2FpdCB0aGlzLmFsZ29kQ2xpZW50LmdldFRyYW5zYWN0aW9uUGFyYW1zKCkuZG8oKTtcblxuICAgICAgLy9wcmVwYXJlIG9wdGluIHR4blxuICAgICAgbGV0IG9wdGluVHhuID1cbiAgICAgIGFsZ29zZGsubWFrZUFzc2V0VHJhbnNmZXJUeG5XaXRoU3VnZ2VzdGVkUGFyYW1zRnJvbU9iamVjdCh7XG4gICAgICAgIGZyb206IHRoaXMud2FsbGV0Q29ubmVjdC53YWxsZXRBZGRyZXNzLFxuICAgICAgICB0bzogdGhpcy53YWxsZXRDb25uZWN0LndhbGxldEFkZHJlc3MsXG4gICAgICAgIGFtb3VudDogMCxcbiAgICAgICAgYXNzZXRJbmRleDogcGFyc2VJbnQoY2FmZmVpbmVDYXJkSWQpLFxuICAgICAgICBzdWdnZXN0ZWRQYXJhbXM6IHN1Z2dlc3RlZFBhcmFtcyxcbiAgICAgIH0pO1xuXG4gICAgLy9wcmVwYXJlIHRyYW5zZmVyIHR4blxuICAgIGxldCB0cmFuc2ZlclR4biA9XG4gICAgICBhbGdvc2RrLm1ha2VBc3NldFRyYW5zZmVyVHhuV2l0aFN1Z2dlc3RlZFBhcmFtc0Zyb21PYmplY3Qoe1xuICAgICAgICBmcm9tOiB0aGlzLmVzY3Jvd0FkZHJlc3MsXG4gICAgICAgIHRvOiB0aGlzLndhbGxldENvbm5lY3Qud2FsbGV0QWRkcmVzcyxcbiAgICAgICAgYW1vdW50OiAxLFxuICAgICAgICBhc3NldEluZGV4OiBwYXJzZUludChjYWZmZWluZUNhcmRJZCksXG4gICAgICAgIHN1Z2dlc3RlZFBhcmFtczogc3VnZ2VzdGVkUGFyYW1zLFxuICAgICAgfSk7XG5cbiAgICAgIGxldCBhbGxUeG5zID0gW29wdGluVHhuLCB0cmFuc2ZlclR4bl07XG4gICAgICBhbGdvc2RrLmFzc2lnbkdyb3VwSUQoYWxsVHhucyk7XG5cbiAgICAgIGNvbnN0IHNpZ25lZFR4bnMgPSBhd2FpdCB0aGlzLndhbGxldENvbm5lY3Quc2lnblRyYW5zYWN0aW9ucyhhbGxUeG5zKTtcblxuICAgICAgY29uc3Qgc2lnbmVkVHhuSnNvbiA9IHtcbiAgICAgICAgYmF0aGVySWQ6IGJhdGhlcklkLFxuICAgICAgICB0eG46IGJ0b2EoU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShudWxsLCBzaWduZWRUeG5zWzBdKSksXG4gICAgICAgIHN1Z2dlc3RlZFBhcmFtczogc3VnZ2VzdGVkUGFyYW1zXG4gICAgICB9XG5cbiAgICAgIGNhbGxpbmdCdXR0b24uaW5uZXJIVE1MID0gYDxzcGFuIGNsYXNzPVwic3Bpbm5lci1ib3JkZXIgc3Bpbm5lci1ib3JkZXItc21cIiByb2xlPVwic3RhdHVzXCIgYXJpYS1oaWRkZW49XCJ0cnVlXCI+PC9zcGFuPlxuICAgICAgT3BlbmluZy4uLmA7XG4gICAgICBjYWxsaW5nQnV0dG9uLmRpc2FibGVkID0gdHJ1ZTtcblxuICAgICAgLy9jYWxsIGFwaVxuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChQQUNLU19BUElfVVJMICsgXCIvY2FmZmVpbmUtY2FyZC1wYWNrL2NsYWltXCIsIHtcbiAgICAgICAgbWV0aG9kOiBcIlBPU1RcIixcbiAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoc2lnbmVkVHhuSnNvbiksXG4gICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICBBY2NlcHQ6IFwiYXBwbGljYXRpb24vanNvblwiLFxuICAgICAgICAgIFwiQ29udGVudC1UeXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiLFxuICAgICAgICB9LFxuICAgICAgfSk7XG5cbiAgICAgIGlmIChyZXNwb25zZS5zdGF0dXMgPT09IDIwMCkge1xuXG4gICAgICAgIC8vY29uc3QgZGF0YSA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcblxuICAgICAgICBjYWxsaW5nQnV0dG9uLmlubmVySFRNTCA9IGA8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB3aWR0aD1cIjI0XCIgaGVpZ2h0PVwiMjRcIiBmaWxsPVwiY3VycmVudENvbG9yXCIgY2xhc3M9XCJiaSBiaS1jaGVjay1jaXJjbGUtZmlsbFwiIHZpZXdCb3g9XCIwIDAgMTYgMTZcIj5cbiAgICAgICAgPHBhdGggZD1cIk0xNiA4QTggOCAwIDEgMSAwIDhhOCA4IDAgMCAxIDE2IDB6bS0zLjk3LTMuMDNhLjc1Ljc1IDAgMCAwLTEuMDguMDIyTDcuNDc3IDkuNDE3IDUuMzg0IDcuMzIzYS43NS43NSAwIDAgMC0xLjA2IDEuMDZMNi45NyAxMS4wM2EuNzUuNzUgMCAwIDAgMS4wNzktLjAybDMuOTkyLTQuOTlhLjc1Ljc1IDAgMCAwLS4wMS0xLjA1elwiLz5cbiAgICAgIDwvc3ZnPlxuICAgICAgICBPcGVuZWRgO1xuICAgICAgICBjYWxsaW5nQnV0dG9uLmRpc2FibGVkID0gdHJ1ZTtcbiAgICAgICAgY2FsbGluZ0J1dHRvbi5kYXRhc2V0Lm9wZW5lZCA9IHRydWU7XG5cbiAgICAgICAgLy9hbmltYXRlIHBhY2sgb3BlbmluZ1xuICAgICAgICBwYWNrQ2FudmFzQ29udHJvbGxlci5hbmltYXRlKCk7XG5cbiAgICAgICAgaGlkZGVuTmFtZS5zdHlsZS5vcGFjaXR5ID0gJzEnO1xuICAgICAgICBoaWRkZW5OYW1lLnN0eWxlWydtYXgtaGVpZ2h0J10gPSAnNTAwcHgnO1xuXG4gICAgICAgIHRoaXMuZW5hYmxlQWxsQnV0dG9ucyhjYWxsaW5nQnV0dG9uKTtcblxuICAgICAgfSBlbHNlIHtcblxuICAgICAgICBsZXQgZGF0YTtcblxuICAgICAgICB0cnkge1xuICAgICAgICAgIGRhdGEgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XG4gICAgICAgIH0gY2F0Y2goZXJyKSB7fVxuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIGlmIChkYXRhICYmIGRhdGEuZXJyb3Ipe1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihkYXRhLmVycm9yKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEVycm9yICR7cmVzcG9uc2Uuc3RhdHVzfWApO1xuICAgICAgICB9XG5cbiAgICAgIH1cblxuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgY29uc29sZS5lcnJvcihlcnIpO1xuICAgICAgYWxlcnQoZXJyLm1lc3NhZ2UpO1xuXG4gICAgICBjYWxsaW5nQnV0dG9uLnRleHRDb250ZW50ID0gXCJPcGVuXCI7XG4gICAgICBjYWxsaW5nQnV0dG9uLmRpc2FibGVkID0gZmFsc2U7XG5cbiAgICAgIHRoaXMuZW5hYmxlQWxsQnV0dG9ucyhjYWxsaW5nQnV0dG9uKTtcbiAgICB9XG5cbiAgfVxuICBcbn1cblxuXG5jbGFzcyBQYWNrQ2FudmFzQ29udHJvbGxlcntcblxuICBjb25zdHJ1Y3RvcihjYW52YXMsIGNhZmZlaW5lQ2FyZElkLCBhbGdvSW5kZXhlcil7XG5cbiAgICB0aGlzLmNhZmZlaW5lQ2FyZElkID0gY2FmZmVpbmVDYXJkSWQ7XG4gICAgdGhpcy5hbGdvSW5kZXhlciA9IGFsZ29JbmRleGVyO1xuXG4gICAgdGhpcy53aWR0aCA9IDY2MDtcbiAgICB0aGlzLmhlaWdodCA9IDk2MFxuICAgIHRoaXMuaW1hZ2VXaWR0aCA9IDk2MDtcblxuICAgIHRoaXMubnVtQW5pbWF0aW9uSW1hZ2UgPSA0O1xuXG4gICAgdGhpcy5jYW52YXMgPSBjYW52YXM7XG4gICAgdGhpcy5jYW52YXMud2lkdGggPSB0aGlzLndpZHRoO1xuICAgIHRoaXMuY2FudmFzLmhlaWdodCA9IHRoaXMuaGVpZ2h0O1xuXG4gICAgdGhpcy5jb250ZXh0ID0gdGhpcy5jYW52YXMuZ2V0Q29udGV4dCgnMmQnKTtcbiAgICB0aGlzLmNvbnRleHQuaW1hZ2VTbW9vdGhpbmdFbmFibGVkID0gZmFsc2U7XG5cbiAgICAvL3RoaXMuY29udGV4dC5maWxsU3R5bGUgPSAncmVkJztcbiAgICAvL3RoaXMuY29udGV4dC5maWxsUmVjdCgwLCAwLCB0aGlzLndpZHRoLCB0aGlzLmhlaWdodCk7XG5cbiAgICB0aGlzLmNvbnRleHQudHJhbnNsYXRlKC0odGhpcy5pbWFnZVdpZHRoIC0gdGhpcy53aWR0aCkvMiwgMCk7XG5cbiAgICAvL2xvYWQgYW5pbWF0aW9uIGltYWdlc1xuICAgIC8vbG9hZCBjYWZmZWluZSBjYXJkIGltYWdlXG5cbiAgICB0aGlzLm5mdDtcblxuICAgIHRoaXMuY2FyZEltYWdlO1xuICAgIHRoaXMuY2FyZE1hc2s7XG4gICAgdGhpcy5hbmltYXRpb25JbWFnZXM7XG5cblxuICB9XG5cbiAgYXN5bmMgbG9hZCgpe1xuICAgIGF3YWl0IHRoaXMubG9hZEFsbEltYWdlKCk7XG4gIH1cblxuICBzdGF0aWMgbG9hZEltYWdlKHBhdGgpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuXG4gICAgICBjb25zdCBpbWFnZSA9IG5ldyBJbWFnZSgpO1xuXG4gICAgICBpbWFnZS5jcm9zc09yaWdpbiA9ICdBbm9ueW1vdXMnO1xuXG4gICAgICBpbWFnZS5vbmxvYWQgPSAoKSA9PiB7XG4gICAgICAgIHJlc29sdmUoaW1hZ2UpO1xuICAgICAgfVxuXG4gICAgICBpbWFnZS5vbmVycm9yID0gcmVqZWN0XG5cbiAgICAgIGltYWdlLnNyYyA9IHBhdGg7XG5cbiAgICB9KVxuICB9XG5cbiAgYXN5bmMgbG9hZEFsbEltYWdlKCl7XG5cbiAgICB0aGlzLmFuaW1hdGlvbkltYWdlcyA9IFtdO1xuXG4gICAgLy9jaG9vc2UgYSBjb2xvciByYW5kb21seSBkZXBlbmRpbmcgb24gY2FyZCBhc3NldCBpZFxuICAgIGNvbnN0IGNvbG9ySW5kZXggPSB0aGlzLmNhZmZlaW5lQ2FyZElkICUgNDtcbiAgICAvL2NvbnN0IGNvbG9ySW5kZXggPSAwO1xuXG4gICAgLy9sb2FkIGZpcnN0IGltYWdlIGFuZCBkaXNwbGF5IGl0IGFzIHNvb24gYXMgcG9zc2libGVcbiAgICBjb25zdCBpbml0aWFsSW1hZ2UgPSBhd2FpdCBQYWNrQ2FudmFzQ29udHJvbGxlci5sb2FkSW1hZ2UoYGFzc2V0cy9wYWNrJHtjb2xvckluZGV4fS0wLnBuZ2ApO1xuICAgIHRoaXMuYW5pbWF0aW9uSW1hZ2VzLnB1c2goaW5pdGlhbEltYWdlKVxuICAgIHRoaXMuZHJhd1BhY2soKTtcblxuICAgIC8vbG9hZCBtYXNrXG4gICAgdGhpcy5jYXJkTWFzayA9IGF3YWl0IFBhY2tDYW52YXNDb250cm9sbGVyLmxvYWRJbWFnZShgYXNzZXRzL2NhcmQtbWFzay5wbmdgKTtcblxuICAgIC8vbG9hZCBuZnQgaW1hZ2VcbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB0aGlzLmFsZ29JbmRleGVyLmxvb2t1cEFzc2V0QnlJRCh0aGlzLmNhZmZlaW5lQ2FyZElkKS5kbygpO1xuICAgIHRoaXMubmZ0ID0gbmV3IE5GVCh0aGlzLmNhZmZlaW5lQ2FyZElkLCByZXN1bHRbJ2Fzc2V0J10pO1xuICAgIGF3YWl0IHRoaXMubmZ0LmxvYWQodGhpcy5hbGdvSW5kZXhlcik7XG4gICAgXG4gICAgdHJ5IHtcbiAgICAgIHRoaXMuY2FyZEltYWdlID0gYXdhaXQgUGFja0NhbnZhc0NvbnRyb2xsZXIubG9hZEltYWdlKHRoaXMubmZ0LmltYWdlVXJsKTtcbiAgICB9IGNhdGNoIChlcnIpe1xuICAgICAgY29uc29sZS5sb2coYEVycm9yIGxvYWRpbmcgaW1hZ2UgZnJvbSBwcmltYXJ5LCB0cnlpbmcgc2Vjb25kYXJ5YCk7XG4gICAgICB0cnkge1xuICAgICAgICB0aGlzLmNhcmRJbWFnZSA9IGF3YWl0IFBhY2tDYW52YXNDb250cm9sbGVyLmxvYWRJbWFnZSh0aGlzLm5mdC5pbWFnZVVybEFsdGVybmF0ZSk7XG4gICAgICB9IGNhdGNoIChlcnIpe1xuICAgICAgICB0aGlzLmNhcmRJbWFnZSA9IGF3YWl0IFBhY2tDYW52YXNDb250cm9sbGVyLmxvYWRJbWFnZSgnYXNzZXRzL2VtcHR5LWNhcmQucG5nJyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy9sb2FkIGFuaW1hdGlvbiBpbWFnZXNcbiAgICBcbiAgICBcblxuICAgIGZvciAobGV0IGkgPSAxOyBpIDw9IHRoaXMubnVtQW5pbWF0aW9uSW1hZ2U7IGkrKyl7XG4gICAgICBjb25zdCBhbmltYXRpb25JbWFnZSA9IGF3YWl0IFBhY2tDYW52YXNDb250cm9sbGVyLmxvYWRJbWFnZShgYXNzZXRzL3BhY2ske2NvbG9ySW5kZXh9LSR7aX0ucG5nYCk7XG4gICAgICB0aGlzLmFuaW1hdGlvbkltYWdlcy5wdXNoKGFuaW1hdGlvbkltYWdlKTtcbiAgICB9XG5cbiAgfVxuXG4gIFxuXG4gIGFzeW5jIGRyYXdQYWNrKCl7XG5cbiAgICAvL2xvYWQgaW1hZ2VcbiAgICB0aGlzLmNvbnRleHQuZHJhd0ltYWdlKHRoaXMuYW5pbWF0aW9uSW1hZ2VzWzBdLCAwLCAwLCB0aGlzLmltYWdlV2lkdGgsIHRoaXMuaGVpZ2h0KTtcblxuICB9XG5cbiAgc3RhdGljIGVhc2VJbk91dFF1YWQoeCkge1xuICAgIHJldHVybiB4IDwgMC41ID8gMiAqIHggKiB4IDogMSAtIE1hdGgucG93KC0yICogeCArIDIsIDIpIC8gMjtcbiAgfVxuXG4gIGFzeW5jIGFuaW1hdGUoKXtcblxuICAgIGxldCBmcmFtZUR1cmF0aW9uID0gMC4xNTtcblxuICAgIGxldCBjdXJyZW50RnJhbWUgPSAxO1xuXG4gICAgY29uc3QgaW50ZXJ2YWxJZCA9IHNldEludGVydmFsKCgpID0+IHtcblxuICAgICAgLy9jbGVhciBjb250ZXh0XG4gICAgICB0aGlzLmNvbnRleHQuY2xlYXJSZWN0KDAsIDAsIHRoaXMuaW1hZ2VXaWR0aCwgdGhpcy5oZWlnaHQpO1xuXG4gICAgICAvL2RyYXcgbWFza1xuICAgICAgdGhpcy5jb250ZXh0LmRyYXdJbWFnZSh0aGlzLmNhcmRNYXNrLCAwLCAwLCB0aGlzLmltYWdlV2lkdGgsIHRoaXMuaGVpZ2h0KTtcblxuICAgICAgdGhpcy5jb250ZXh0Lmdsb2JhbENvbXBvc2l0ZU9wZXJhdGlvbiA9ICdzb3VyY2UtaW4nO1xuXG4gICAgICAvL2RyYXcgY2FyZFxuICAgICAgdGhpcy5jb250ZXh0LmRyYXdJbWFnZSh0aGlzLmNhcmRJbWFnZSwgMCwgMCwgdGhpcy5pbWFnZVdpZHRoLCB0aGlzLmhlaWdodCk7XG5cbiAgICAgIHRoaXMuY29udGV4dC5nbG9iYWxDb21wb3NpdGVPcGVyYXRpb24gPSAnc291cmNlLW92ZXInO1xuXG4gICAgICAvL2RyYXcgcGFjayBhbmltYXRpb25cbiAgICAgIHRoaXMuY29udGV4dC5kcmF3SW1hZ2UodGhpcy5hbmltYXRpb25JbWFnZXNbY3VycmVudEZyYW1lXSwgMCwgMCwgdGhpcy5pbWFnZVdpZHRoLCB0aGlzLmhlaWdodCk7XG5cbiAgICAgIGlmIChjdXJyZW50RnJhbWUgPT09IHRoaXMubnVtQW5pbWF0aW9uSW1hZ2Upe1xuXG4gICAgICAgIGNsZWFySW50ZXJ2YWwoaW50ZXJ2YWxJZCk7XG5cbiAgICAgICAgcGFydHkuc3BhcmtsZXModGhpcy5jYW52YXMpO1xuXG4gICAgICAgIC8vc3RhcnQgc2xpZGUgYW5pbWF0aW9uXG4gICAgICAgIGZyYW1lRHVyYXRpb24gPSAwLjA1O1xuICAgICAgICBjb25zdCBhbmltYXRpb25EdXJhdGlvbiA9IDAuODtcbiAgICAgICAgbGV0IGN1cnJlbnRUaW1lID0gMDtcblxuICAgICAgICBjb25zdCBpbnRlcnZhbElkMiA9IHNldEludGVydmFsKCgpID0+IHtcblxuICAgICAgICAgIGNvbnN0IHlPZmZzZXQgPSBQYWNrQ2FudmFzQ29udHJvbGxlci5lYXNlSW5PdXRRdWFkKGN1cnJlbnRUaW1lL2FuaW1hdGlvbkR1cmF0aW9uKSp0aGlzLmhlaWdodDtcblxuICAgICAgICAgIC8vY2xlYXIgY29udGV4dFxuICAgICAgICAgIHRoaXMuY29udGV4dC5jbGVhclJlY3QoMCwgMCwgdGhpcy5pbWFnZVdpZHRoLCB0aGlzLmhlaWdodCk7XG5cbiAgICAgICAgICAvL2RyYXcgbWFza1xuICAgICAgICAgIHRoaXMuY29udGV4dC5kcmF3SW1hZ2UodGhpcy5jYXJkTWFzaywgMCwgMCwgdGhpcy5pbWFnZVdpZHRoLCB0aGlzLmhlaWdodCk7XG5cbiAgICAgICAgICB0aGlzLmNvbnRleHQuZ2xvYmFsQ29tcG9zaXRlT3BlcmF0aW9uID0gJ3NvdXJjZS1pbic7XG5cbiAgICAgICAgICAvL2RyYXcgY2FyZFxuICAgICAgICAgIHRoaXMuY29udGV4dC5kcmF3SW1hZ2UodGhpcy5jYXJkSW1hZ2UsIDAsIDAsIHRoaXMuaW1hZ2VXaWR0aCwgdGhpcy5oZWlnaHQpO1xuXG4gICAgICAgICAgdGhpcy5jb250ZXh0Lmdsb2JhbENvbXBvc2l0ZU9wZXJhdGlvbiA9ICdzb3VyY2Utb3Zlcic7XG5cbiAgICAgICAgICAvL2RyYXcgcGFjayBhbmltYXRpb25cbiAgICAgICAgICB0aGlzLmNvbnRleHQuZHJhd0ltYWdlKHRoaXMuYW5pbWF0aW9uSW1hZ2VzW3RoaXMubnVtQW5pbWF0aW9uSW1hZ2VdLCAwLCB5T2Zmc2V0LCB0aGlzLmltYWdlV2lkdGgsIHRoaXMuaGVpZ2h0KTtcblxuICAgICAgICAgIGN1cnJlbnRUaW1lICs9IGZyYW1lRHVyYXRpb247XG5cbiAgICAgICAgICBpZiAoY3VycmVudFRpbWUgPj0gYW5pbWF0aW9uRHVyYXRpb24pe1xuICAgICAgICAgICAgY2xlYXJJbnRlcnZhbChpbnRlcnZhbElkMik7XG5cbiAgICAgICAgICAgIFxuXG4gICAgICAgICAgfVxuXG4gICAgICAgIH0sIGZyYW1lRHVyYXRpb24qMTAwMCk7XG5cbiAgICAgIH1cblxuICAgICAgY3VycmVudEZyYW1lKys7XG5cbiAgICB9LCBmcmFtZUR1cmF0aW9uKjEwMDApXG5cblxuXG4gIH1cblxufVxuIl0sIm5hbWVzIjpbIkJhc2VQYWdlIiwiY29uc3RydWN0b3IiLCJ3YWxsZXRDb25uZWN0IiwiaG9sZGluZ3MiLCJhbGdvZENsaWVudCIsImFsZ29JbmRleGVyIiwidGhpcyIsIkhvbWUiLCJzdXBlciIsImFyZ3VtZW50cyIsInVpIiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50IiwiaW5uZXJIVE1MIiwibG9hZFBhY2tzIiwiYXN5bmMiLCJyZXN1bHQiLCJjbGFpbWFibGVQYWNrcyIsImxlbmd0aCIsInF1ZXJ5U2VsZWN0b3IiLCJ3aW5kb3ciLCJlbmFibGVOYXZpZ2F0aW9uTGlua3MiLCJQQUNLU19BUElfVVJMIiwiZmV0Y2giLCJzdGF0dXMiLCJqc29uIiwiYmF0aGVyc0lkcyIsImJhdGhlcnMiLCJuZnRzIiwibWFwIiwibmZ0IiwiYXNzZXRJZCIsInBhY2siLCJwYWNrcyIsImluY2x1ZGVzIiwicHVzaCIsImVzY3Jvd0FkZHJlc3MiLCJFcnJvciIsIlBhY2tzIiwiZmV0Y2hQYWNrcyIsInBhY2tTdGF0dXNQIiwicGx1cmFsIiwidGV4dENvbnRlbnQiLCJwYWNrc0RpdiIsImNsYXNzTmFtZSIsImFwcGVuZCIsInBhY2tEaXYiLCJwYWNrQ2FudmFzIiwiY29udHJvbGxlciIsIlBhY2tDYW52YXNDb250cm9sbGVyIiwibG9hZCIsImhpZGRlbk5hbWUiLCJzdHlsZSIsIm9wYWNpdHkiLCJuYW1lIiwib3BlbkJ1dHRvbiIsImRhdGFzZXQiLCJiYXRoZXJJZCIsImNhZmZlaW5lQ2FyZElkIiwiYWRkRXZlbnRMaXN0ZW5lciIsIm9wZW5QYWNrIiwiYmluZCIsImVyciIsImNvbnNvbGUiLCJlcnJvciIsIm1lc3NhZ2UiLCJkaXNhYmxlQWxsQnV0dG9ucyIsImV4Y2VwdCIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJmb3JFYWNoIiwiYiIsIm9wZW5lZCIsImRpc2FibGVkIiwiZW5hYmxlQWxsQnV0dG9ucyIsInBhY2tDYW52YXNDb250cm9sbGVyIiwiZXZlbnQiLCJjYWxsaW5nQnV0dG9uIiwiY3VycmVudFRhcmdldCIsInN1Z2dlc3RlZFBhcmFtcyIsImdldFRyYW5zYWN0aW9uUGFyYW1zIiwiZG8iLCJhbGxUeG5zIiwiZnJvbSIsIndhbGxldEFkZHJlc3MiLCJ0byIsImFtb3VudCIsImFzc2V0SW5kZXgiLCJwYXJzZUludCIsInNpZ25lZFR4bnMiLCJzaWduVHJhbnNhY3Rpb25zIiwic2lnbmVkVHhuSnNvbiIsInR4biIsImJ0b2EiLCJTdHJpbmciLCJmcm9tQ2hhckNvZGUiLCJhcHBseSIsInJlc3BvbnNlIiwibWV0aG9kIiwiYm9keSIsIkpTT04iLCJzdHJpbmdpZnkiLCJoZWFkZXJzIiwiQWNjZXB0IiwiZGF0YSIsImFuaW1hdGUiLCJhbGVydCIsImNhbnZhcyIsIndpZHRoIiwiaGVpZ2h0IiwiaW1hZ2VXaWR0aCIsIm51bUFuaW1hdGlvbkltYWdlIiwiY29udGV4dCIsImdldENvbnRleHQiLCJpbWFnZVNtb290aGluZ0VuYWJsZWQiLCJ0cmFuc2xhdGUiLCJjYXJkSW1hZ2UiLCJjYXJkTWFzayIsImFuaW1hdGlvbkltYWdlcyIsImxvYWRBbGxJbWFnZSIsInN0YXRpYyIsInBhdGgiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsImltYWdlIiwiSW1hZ2UiLCJjcm9zc09yaWdpbiIsIm9ubG9hZCIsIm9uZXJyb3IiLCJzcmMiLCJjb2xvckluZGV4IiwiaW5pdGlhbEltYWdlIiwibG9hZEltYWdlIiwiZHJhd1BhY2siLCJsb29rdXBBc3NldEJ5SUQiLCJpbWFnZVVybCIsImxvZyIsImltYWdlVXJsQWx0ZXJuYXRlIiwiaSIsImFuaW1hdGlvbkltYWdlIiwiZHJhd0ltYWdlIiwieCIsIk1hdGgiLCJwb3ciLCJmcmFtZUR1cmF0aW9uIiwiY3VycmVudEZyYW1lIiwiaW50ZXJ2YWxJZCIsInNldEludGVydmFsIiwiY2xlYXJSZWN0IiwiZ2xvYmFsQ29tcG9zaXRlT3BlcmF0aW9uIiwiY2xlYXJJbnRlcnZhbCIsImFuaW1hdGlvbkR1cmF0aW9uIiwiY3VycmVudFRpbWUiLCJpbnRlcnZhbElkMiIsInlPZmZzZXQiLCJlYXNlSW5PdXRRdWFkIl0sInNvdXJjZVJvb3QiOiIifQ==