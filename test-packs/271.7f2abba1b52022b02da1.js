"use strict";(self.webpackChunkstudio=self.webpackChunkstudio||[]).push([[271,998,298],{6998:(t,e,a)=>{a.r(e),a.d(e,{BasePage:()=>s});class s{constructor(t,e,a,s){this.walletConnect=t,this.algodClient=a,this.algoIndexer=s,this.holdings=e}}},1271:(t,e,a)=>{a.r(e),a.d(e,{Home:()=>i});var s=a(6998),n=a(5298);class i extends s.BasePage{constructor(){super(...arguments),this.ui=document.createElement("div"),this.ui.innerHTML='\n        \x3c!--<h1>Welcome to the Studio</h1>--\x3e\n        <div class="text-center">\n        <img src="assets/logo-studio.png" width="160" alt="The Studio" class="mb-4">\n        <p id="info-message"></p>\n        </div>\n        <div class="springboard d-flex flex-column flex-md-row w-100">\n\n            <div class="flex-fill springboard-item springboard-main-item mb-3 me-md-2">\n                <a href="?grinder" class="d-block" style="background-image: url(\'assets/springbord-grinder.png\'); background-color: #d39e27;" data-page-link="grinder">\n                    <h3>Grinder</h3>\n                    <p>Use Caffeine Cards to evolve your Bathers</p>\n                </a>\n            </div>\n\n            <div class="flex-fill d-flex flex-column">\n                <div class="flex-fill springboard-item mb-3 ms-md-2">\n                    <a href="?cards" class="d-block"\n                        style="background-image: url(\'assets/springboard-cards.png\'); background-color: #bb5f00;" data-page-link="cards">\n                        <h3>Caffeine<br>Cards</h3>\n                        <p>Browse all cards</p>\n                    </a>\n                </div>\n                <div class="flex-fill springboard-item mb-3 ms-md-2">\n                    <a href="?good-morning" class="d-block"\n                        style="background-image: url(\'assets/springboard-gm.png\'); background-color: #12c1b1;" data-page-link="good-morning">\n                        <h3>Good Morning!</h3>\n                        <p>Generate GM GIFs featuring your Bathers</p>\n                    </a>\n                </div>\n\n            </div>\n        ',this.loadPacks()}async loadPacks(){const t=await(0,n.loadPacks)(this.holdings);t&&t.claimablePacks.length>0&&(this.ui.querySelector("#info-message").innerHTML=`<a href="?packs" data-page-link="packs">You have ${t.claimablePacks.length} Caffeine Cards to claim!</a>`,window.enableNavigationLinks())}}},5298:(t,e,a)=>{a.r(e),a.d(e,{Packs:()=>l,loadPacks:()=>c});var s=a(6998),n=a(7304),i=a(4050),o=a(4393);const r="https://api.atomixwap.xyz";async function c(t){let e=await fetch(`${r}/caffeine-card-pack/get-all`);if(200===e.status){let a=await e.json();const s=t.bathers.nfts.map((t=>t.assetId));let n=[];for(const t of a.packs)s.includes(t[0])&&n.push(t);return{claimablePacks:n,escrowAddress:a.escrowAddress}}throw new Error(`Can't load packs. Error ${e.status}`)}class l extends s.BasePage{constructor(){super(...arguments),this.ui=document.createElement("div"),this.ui.innerHTML='\n    <h1>Caffeine Cards Packs</h1>\n    <p id="packs-status" class="dark-text text-center">Loading packs...</p>\n    ',this.claimablePacks,this.escrowAddress,this.fetchPacks()}sleep(t){return new Promise((e=>setTimeout(e,t)))}async fetchPacks(){const t=this.ui.querySelector("#packs-status");try{const e=await c(this.holdings);if(this.claimablePacks=e.claimablePacks,this.escrowAddress=e.escrowAddress,this.claimablePacks.length>0){let e="";this.claimablePacks.length>1&&(e="s"),t.textContent=`${this.claimablePacks.length} pack${e} to claim!`}else t.innerHTML='<img src="assets/pack0-0.png" style="width: 240px; opacity: 0.2;" class="mb-3"><br>\n        No pack to open.<br>\n        Make sure Bathers are not listed on marketplaces to see your packs.<br><br>\n        A Caffeine Card is given for every Bather bought in the <a href="https://instantshuffle.com/shuffle/yUSbzq61ZvqTIsSvLycS" target="_blank">Instant Shuffle.</a>\n        ';const a=document.createElement("div");a.className="row row-cols-2 row-cols-md-3 row-cols-lg-4 gy-4 mb-5 justify-content-center",this.ui.append(a);for(const t of this.claimablePacks){const e=document.createElement("div");e.className="col text-center ps-3 pe-3",a.append(e);const s=document.createElement("canvas");s.className="w-100 mb-0";const n=new d(s,t[1],this.algoIndexer);e.append(s),await n.load().then((()=>{const a=document.createElement("div");a.className="dark-text mt-0 pt-0 mb-2 hidden-pack-name",a.style.opacity="0",a.style["max-height"]="0",a.textContent=n.nft.name,e.append(a);const s=document.createElement("button");s.className="open-pack-button",s.textContent="Open",s.dataset.batherId=t[0],s.dataset.caffeineCardId=t[1],s.addEventListener("click",this.openPack.bind(this,n,a),!1),e.append(s)})).catch((t=>{console.log(t)})),this.sleep(300)}}catch(e){console.error(e),t.textContent=e.message}}disableAllButtons(t){this.ui.querySelectorAll(".open-pack-button").forEach((e=>{e===t||e.dataset.opened||(e.className="open-pack-button soft-disabled",e.disabled=!0)}))}enableAllButtons(t){this.ui.querySelectorAll(".open-pack-button").forEach((e=>{e===t||e.dataset.opened||(e.className="open-pack-button",e.disabled=!1)}))}async openPack(t,e,a){const s=a.currentTarget;this.disableAllButtons(s);const n=s.dataset.batherId,o=s.dataset.caffeineCardId;try{s.innerHTML='<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>',s.disabled=!0;let a=await this.algodClient.getTransactionParams().do(),c=[i.makeAssetTransferTxnWithSuggestedParamsFromObject({from:this.walletConnect.walletAddress,to:this.walletConnect.walletAddress,amount:0,assetIndex:parseInt(o),suggestedParams:a}),i.makeAssetTransferTxnWithSuggestedParamsFromObject({from:this.escrowAddress,to:this.walletConnect.walletAddress,amount:1,assetIndex:parseInt(o),suggestedParams:a})];i.assignGroupID(c);const l=await this.walletConnect.signTransactions(c),d={batherId:n,txn:btoa(String.fromCharCode.apply(null,l[0])),suggestedParams:a};this.sleep(100),s.innerHTML='<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>\n      Opening...',s.disabled=!0;const h=await fetch(r+"/caffeine-card-pack/claim/",{method:"POST",body:JSON.stringify(d),headers:{Accept:"application/json","Content-Type":"application/json"}});if(200!==h.status){let t;try{t=await h.json()}catch(t){}throw t&&t.error?new Error(t.error):new Error(`Error ${h.status}`)}s.innerHTML='<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" class="bi bi-check-circle-fill" viewBox="0 0 16 16">\n        <path d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zm-3.97-3.03a.75.75 0 0 0-1.08.022L7.477 9.417 5.384 7.323a.75.75 0 0 0-1.06 1.06L6.97 11.03a.75.75 0 0 0 1.079-.02l3.992-4.99a.75.75 0 0 0-.01-1.05z"/>\n      </svg>\n        Opened',s.disabled=!0,s.dataset.opened=!0,t.animate(),e.style.opacity="1",e.style["max-height"]="500px",this.enableAllButtons(s)}catch(t){console.error(t),alert(t.message),s.textContent="Open",s.disabled=!1,this.enableAllButtons(s)}}}class d{constructor(t,e,a){this.caffeineCardId=e,this.algoIndexer=a,this.width=660,this.height=960,this.imageWidth=960,this.numAnimationImage=4,this.canvas=t,this.canvas.width=this.width,this.canvas.height=this.height,this.context=this.canvas.getContext("2d"),this.context.imageSmoothingEnabled=!1,this.context.translate(-(this.imageWidth-this.width)/2,0),this.nft,this.cardImage,this.cardMask,this.animationImages}async load(){await this.loadAllImage()}static loadImage(t){return new Promise(((e,a)=>{const s=new Image;s.onload=()=>{e(s)},s.onerror=a,s.src=t}))}async loadAllImage(){this.animationImages=[];const t=this.caffeineCardId%4,e=await d.loadImage(`assets/pack${t}-0.png`);this.animationImages.push(e),this.drawPack(),this.cardMask=await d.loadImage("assets/card-mask.png");const a=await this.algoIndexer.lookupAssetByID(this.caffeineCardId).do();this.nft=new n.Sm(this.caffeineCardId,a.asset),await this.nft.load(this.algoIndexer);try{this.cardImage=await d.loadImage(this.nft.imageUrl)}catch(t){console.log("Error loading image from primary, trying secondary");try{this.cardImage=await d.loadImage(this.nft.imageUrlAlternate)}catch(t){this.cardImage=await d.loadImage("assets/empty-card.png")}}for(let e=1;e<=this.numAnimationImage;e++){const a=await d.loadImage(`assets/pack${t}-${e}.png`);this.animationImages.push(a)}}async drawPack(){this.context.drawImage(this.animationImages[0],0,0,this.imageWidth,this.height)}static easeInOutQuad(t){return t<.5?2*t*t:1-Math.pow(-2*t+2,2)/2}async animate(){let t=.15,e=1;const a=setInterval((()=>{if(this.context.clearRect(0,0,this.imageWidth,this.height),this.context.drawImage(this.cardMask,0,0,this.imageWidth,this.height),this.context.globalCompositeOperation="source-in",this.context.drawImage(this.cardImage,0,0,this.imageWidth,this.height),this.context.globalCompositeOperation="source-over",this.context.drawImage(this.animationImages[e],0,0,this.imageWidth,this.height),e===this.numAnimationImage){clearInterval(a),o.sparkles(this.canvas),t=.05;const e=.8;let s=0;const n=setInterval((()=>{const a=d.easeInOutQuad(s/e)*this.height;this.context.clearRect(0,0,this.imageWidth,this.height),this.context.drawImage(this.cardMask,0,0,this.imageWidth,this.height),this.context.globalCompositeOperation="source-in",this.context.drawImage(this.cardImage,0,0,this.imageWidth,this.height),this.context.globalCompositeOperation="source-over",this.context.drawImage(this.animationImages[this.numAnimationImage],0,a,this.imageWidth,this.height),s+=t,s>=e&&clearInterval(n)}),1e3*t)}e++}),1e3*t)}}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUFLcUgsVUFBVyxFQUFHLEVBQUdySCxLQUFLK0csV0FBWS9HLEtBQUs4RyxRQUVuRTlHLEtBQUtpSCxRQUFRa0MseUJBQTJCLGNBR3hDbkosS0FBS2lILFFBQVF5QixVQUFVMUksS0FBS3VILGdCQUFnQndCLEdBQWUsRUFBRyxFQUFHL0ksS0FBSytHLFdBQVkvRyxLQUFLOEcsUUFFbkZpQyxJQUFpQi9JLEtBQUtnSCxrQkFBa0IsQ0FFMUNvQyxjQUFjSixHQUVkLFdBQWVoSixLQUFLNEcsUUFHcEJrQyxFQUFnQixJQUNoQixNQUFNTyxFQUFvQixHQUMxQixJQUFJQyxFQUFjLEVBRWxCLE1BQU1DLEVBQWNOLGFBQVksS0FFOUIsTUFBTU8sRUFBVXhHLEVBQXFCeUcsY0FBY0gsRUFBWUQsR0FBbUJySixLQUFLOEcsT0FHdkY5RyxLQUFLaUgsUUFBUWlDLFVBQVUsRUFBRyxFQUFHbEosS0FBSytHLFdBQVkvRyxLQUFLOEcsUUFHbkQ5RyxLQUFLaUgsUUFBUXlCLFVBQVUxSSxLQUFLc0gsU0FBVSxFQUFHLEVBQUd0SCxLQUFLK0csV0FBWS9HLEtBQUs4RyxRQUVsRTlHLEtBQUtpSCxRQUFRa0MseUJBQTJCLFlBR3hDbkosS0FBS2lILFFBQVF5QixVQUFVMUksS0FBS3FILFVBQVcsRUFBRyxFQUFHckgsS0FBSytHLFdBQVkvRyxLQUFLOEcsUUFFbkU5RyxLQUFLaUgsUUFBUWtDLHlCQUEyQixjQUd4Q25KLEtBQUtpSCxRQUFReUIsVUFBVTFJLEtBQUt1SCxnQkFBZ0J2SCxLQUFLZ0gsbUJBQW9CLEVBQUd3QyxFQUFTeEosS0FBSytHLFdBQVkvRyxLQUFLOEcsUUFFdkd3QyxHQUFlUixFQUVYUSxHQUFlRCxHQUNqQkQsY0FBY0csRUFJaEIsR0FFZSxJQUFkVCxFQUVMLENBRUFDLEdBQWMsR0FFQyxJQUFkRCxFQUlMLEUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zdHVkaW8vLi9zcmMvcGFnZXMvYmFzZS5qcyIsIndlYnBhY2s6Ly9zdHVkaW8vLi9zcmMvcGFnZXMvaG9tZS5qcyIsIndlYnBhY2s6Ly9zdHVkaW8vLi9zcmMvcGFnZXMvcGFja3MuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXG5leHBvcnQgY2xhc3MgQmFzZVBhZ2Uge1xuXG4gICAgY29uc3RydWN0b3Iod2FsbGV0Q29ubmVjdCwgaG9sZGluZ3MsIGFsZ29kQ2xpZW50LCBhbGdvSW5kZXhlcil7XG5cbiAgICAgICAgdGhpcy53YWxsZXRDb25uZWN0ID0gd2FsbGV0Q29ubmVjdDtcbiAgICAgICAgdGhpcy5hbGdvZENsaWVudCA9IGFsZ29kQ2xpZW50O1xuICAgICAgICB0aGlzLmFsZ29JbmRleGVyID0gYWxnb0luZGV4ZXI7XG4gICAgICAgIHRoaXMuaG9sZGluZ3MgPSBob2xkaW5ncztcblxuICAgICAgICBcblxuICAgIH1cblxufSIsImltcG9ydCB7IEJhc2VQYWdlIH0gZnJvbSBcIi4vYmFzZS5qc1wiO1xuaW1wb3J0IHsgbG9hZFBhY2tzIH0gZnJvbSBcIi4vcGFja3MuanNcIjtcblxuXG5leHBvcnQgY2xhc3MgSG9tZSBleHRlbmRzIEJhc2VQYWdlIHtcblxuICAgIGNvbnN0cnVjdG9yKCl7XG5cbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAgICAgXG4gICAgICAgIHRoaXMudWkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgdGhpcy51aS5pbm5lckhUTUwgPSBgXG4gICAgICAgIDwhLS08aDE+V2VsY29tZSB0byB0aGUgU3R1ZGlvPC9oMT4tLT5cbiAgICAgICAgPGRpdiBjbGFzcz1cInRleHQtY2VudGVyXCI+XG4gICAgICAgIDxpbWcgc3JjPVwiYXNzZXRzL2xvZ28tc3R1ZGlvLnBuZ1wiIHdpZHRoPVwiMTYwXCIgYWx0PVwiVGhlIFN0dWRpb1wiIGNsYXNzPVwibWItNFwiPlxuICAgICAgICA8cCBpZD1cImluZm8tbWVzc2FnZVwiPjwvcD5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJzcHJpbmdib2FyZCBkLWZsZXggZmxleC1jb2x1bW4gZmxleC1tZC1yb3cgdy0xMDBcIj5cblxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImZsZXgtZmlsbCBzcHJpbmdib2FyZC1pdGVtIHNwcmluZ2JvYXJkLW1haW4taXRlbSBtYi0zIG1lLW1kLTJcIj5cbiAgICAgICAgICAgICAgICA8YSBocmVmPVwiP2dyaW5kZXJcIiBjbGFzcz1cImQtYmxvY2tcIiBzdHlsZT1cImJhY2tncm91bmQtaW1hZ2U6IHVybCgnYXNzZXRzL3NwcmluZ2JvcmQtZ3JpbmRlci5wbmcnKTsgYmFja2dyb3VuZC1jb2xvcjogI2QzOWUyNztcIiBkYXRhLXBhZ2UtbGluaz1cImdyaW5kZXJcIj5cbiAgICAgICAgICAgICAgICAgICAgPGgzPkdyaW5kZXI8L2gzPlxuICAgICAgICAgICAgICAgICAgICA8cD5Vc2UgQ2FmZmVpbmUgQ2FyZHMgdG8gZXZvbHZlIHlvdXIgQmF0aGVyczwvcD5cbiAgICAgICAgICAgICAgICA8L2E+XG4gICAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImZsZXgtZmlsbCBkLWZsZXggZmxleC1jb2x1bW5cIj5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZmxleC1maWxsIHNwcmluZ2JvYXJkLWl0ZW0gbWItMyBtcy1tZC0yXCI+XG4gICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9XCI/Y2FyZHNcIiBjbGFzcz1cImQtYmxvY2tcIlxuICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9XCJiYWNrZ3JvdW5kLWltYWdlOiB1cmwoJ2Fzc2V0cy9zcHJpbmdib2FyZC1jYXJkcy5wbmcnKTsgYmFja2dyb3VuZC1jb2xvcjogI2JiNWYwMDtcIiBkYXRhLXBhZ2UtbGluaz1cImNhcmRzXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8aDM+Q2FmZmVpbmU8YnI+Q2FyZHM8L2gzPlxuICAgICAgICAgICAgICAgICAgICAgICAgPHA+QnJvd3NlIGFsbCBjYXJkczwvcD5cbiAgICAgICAgICAgICAgICAgICAgPC9hPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJmbGV4LWZpbGwgc3ByaW5nYm9hcmQtaXRlbSBtYi0zIG1zLW1kLTJcIj5cbiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj1cIj9nb29kLW1vcm5pbmdcIiBjbGFzcz1cImQtYmxvY2tcIlxuICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9XCJiYWNrZ3JvdW5kLWltYWdlOiB1cmwoJ2Fzc2V0cy9zcHJpbmdib2FyZC1nbS5wbmcnKTsgYmFja2dyb3VuZC1jb2xvcjogIzEyYzFiMTtcIiBkYXRhLXBhZ2UtbGluaz1cImdvb2QtbW9ybmluZ1wiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGgzPkdvb2QgTW9ybmluZyE8L2gzPlxuICAgICAgICAgICAgICAgICAgICAgICAgPHA+R2VuZXJhdGUgR00gR0lGcyBmZWF0dXJpbmcgeW91ciBCYXRoZXJzPC9wPlxuICAgICAgICAgICAgICAgICAgICA8L2E+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICBgO1xuXG4gICAgICAgIHRoaXMubG9hZFBhY2tzKCk7XG4gICAgfVxuXG4gICAgYXN5bmMgbG9hZFBhY2tzKCl7XG5cbiAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgbG9hZFBhY2tzKHRoaXMuaG9sZGluZ3MpO1xuXG4gICAgICAgIGlmIChyZXN1bHQgJiYgcmVzdWx0LmNsYWltYWJsZVBhY2tzLmxlbmd0aCA+IDApe1xuXG4gICAgICAgICAgICBjb25zdCBpbmZvTWVzc2FnZVNwYW4gPSB0aGlzLnVpLnF1ZXJ5U2VsZWN0b3IoJyNpbmZvLW1lc3NhZ2UnKTtcbiAgICAgICAgICAgIGluZm9NZXNzYWdlU3Bhbi5pbm5lckhUTUwgPSBgPGEgaHJlZj1cIj9wYWNrc1wiIGRhdGEtcGFnZS1saW5rPVwicGFja3NcIj5Zb3UgaGF2ZSAke3Jlc3VsdC5jbGFpbWFibGVQYWNrcy5sZW5ndGh9IENhZmZlaW5lIENhcmRzIHRvIGNsYWltITwvYT5gO1xuXG4gICAgICAgICAgICB3aW5kb3cuZW5hYmxlTmF2aWdhdGlvbkxpbmtzKCk7XG4gICAgICAgIH1cbiAgICAgICAgXG5cblxuXG4gICAgfVxuXG59IiwiaW1wb3J0IHsgQmFzZVBhZ2UgfSBmcm9tIFwiLi9iYXNlLmpzXCI7XG5pbXBvcnQgeyBORlRDb2xsZWN0aW9uIH0gZnJvbSBcImFsZ28tbmZ0LXV0aWxzXCI7XG5pbXBvcnQgYWxnb3NkayBmcm9tICdhbGdvc2RrJztcbmltcG9ydCB7IE5GVCB9IGZyb20gXCJhbGdvLW5mdC11dGlsc1wiO1xuaW1wb3J0IHBhcnR5IGZyb20gXCJwYXJ0eS1qc1wiO1xuXG5jb25zdCBQQUNLU19BUElfVVJMID0gXCJodHRwczovL2FwaS5hdG9taXh3YXAueHl6XCI7XG4vL2NvbnN0IFBBQ0tTX0FQSV9VUkwgPSBcImh0dHBzOi8vbG9jYWxob3N0XCI7XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBsb2FkUGFja3MoaG9sZGluZ3MpIHtcbiAgbGV0IHJlc3VsdCA9IGF3YWl0IGZldGNoKGAke1BBQ0tTX0FQSV9VUkx9L2NhZmZlaW5lLWNhcmQtcGFjay9nZXQtYWxsYCk7XG5cbiAgaWYgKHJlc3VsdC5zdGF0dXMgPT09IDIwMCkge1xuICAgIGxldCBqc29uID0gYXdhaXQgcmVzdWx0Lmpzb24oKTtcblxuICAgIC8vY29tcGFyZSB3aXRoIGhvbGRpbmdzXG4gICAgY29uc3QgYmF0aGVyc0lkcyA9IGhvbGRpbmdzLmJhdGhlcnMubmZ0cy5tYXAoKG5mdCkgPT4gbmZ0LmFzc2V0SWQpO1xuXG4gICAgbGV0IGNsYWltYWJsZVBhY2tzID0gW107XG5cbiAgICBmb3IgKGNvbnN0IHBhY2sgb2YganNvbi5wYWNrcykge1xuICAgICAgaWYgKGJhdGhlcnNJZHMuaW5jbHVkZXMocGFja1swXSkpIHtcbiAgICAgICAgY2xhaW1hYmxlUGFja3MucHVzaChwYWNrKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgY2xhaW1hYmxlUGFja3M6IGNsYWltYWJsZVBhY2tzLFxuICAgICAgZXNjcm93QWRkcmVzczoganNvbi5lc2Nyb3dBZGRyZXNzLFxuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBDYW5cXCd0IGxvYWQgcGFja3MuIEVycm9yICR7cmVzdWx0LnN0YXR1c31gKTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgUGFja3MgZXh0ZW5kcyBCYXNlUGFnZSB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG5cbiAgICB0aGlzLnVpID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICB0aGlzLnVpLmlubmVySFRNTCA9IGBcbiAgICA8aDE+Q2FmZmVpbmUgQ2FyZHMgUGFja3M8L2gxPlxuICAgIDxwIGlkPVwicGFja3Mtc3RhdHVzXCIgY2xhc3M9XCJkYXJrLXRleHQgdGV4dC1jZW50ZXJcIj5Mb2FkaW5nIHBhY2tzLi4uPC9wPlxuICAgIGA7XG5cbiAgICB0aGlzLmNsYWltYWJsZVBhY2tzO1xuICAgIHRoaXMuZXNjcm93QWRkcmVzcztcblxuICAgIHRoaXMuZmV0Y2hQYWNrcygpO1xuICB9XG5cbiAgc2xlZXAoZGVsYXlUaW1lKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKHJlc29sdmUgPT4gc2V0VGltZW91dChyZXNvbHZlLCBkZWxheVRpbWUpKTtcbiAgfSBcblxuICBhc3luYyBmZXRjaFBhY2tzKCkge1xuXG4gICAgY29uc3QgcGFja1N0YXR1c1AgPSB0aGlzLnVpLnF1ZXJ5U2VsZWN0b3IoXCIjcGFja3Mtc3RhdHVzXCIpO1xuXG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGxvYWRQYWNrcyh0aGlzLmhvbGRpbmdzKTtcblxuICAgICAgdGhpcy5jbGFpbWFibGVQYWNrcyA9IHJlc3VsdC5jbGFpbWFibGVQYWNrcztcbiAgICAgIHRoaXMuZXNjcm93QWRkcmVzcyA9IHJlc3VsdC5lc2Nyb3dBZGRyZXNzO1xuXG4gICAgICBpZiAodGhpcy5jbGFpbWFibGVQYWNrcy5sZW5ndGggPiAwKSB7XG4gICAgICAgIGxldCBwbHVyYWwgPSAnJztcbiAgICAgICAgaWYgKHRoaXMuY2xhaW1hYmxlUGFja3MubGVuZ3RoID4gMSl7XG4gICAgICAgICAgcGx1cmFsID0gJ3MnO1xuICAgICAgICB9XG4gICAgICAgIHBhY2tTdGF0dXNQLnRleHRDb250ZW50ID0gYCR7dGhpcy5jbGFpbWFibGVQYWNrcy5sZW5ndGh9IHBhY2ske3BsdXJhbH0gdG8gY2xhaW0hYDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBhY2tTdGF0dXNQLmlubmVySFRNTCA9IGA8aW1nIHNyYz1cImFzc2V0cy9wYWNrMC0wLnBuZ1wiIHN0eWxlPVwid2lkdGg6IDI0MHB4OyBvcGFjaXR5OiAwLjI7XCIgY2xhc3M9XCJtYi0zXCI+PGJyPlxuICAgICAgICBObyBwYWNrIHRvIG9wZW4uPGJyPlxuICAgICAgICBNYWtlIHN1cmUgQmF0aGVycyBhcmUgbm90IGxpc3RlZCBvbiBtYXJrZXRwbGFjZXMgdG8gc2VlIHlvdXIgcGFja3MuPGJyPjxicj5cbiAgICAgICAgQSBDYWZmZWluZSBDYXJkIGlzIGdpdmVuIGZvciBldmVyeSBCYXRoZXIgYm91Z2h0IGluIHRoZSA8YSBocmVmPVwiaHR0cHM6Ly9pbnN0YW50c2h1ZmZsZS5jb20vc2h1ZmZsZS95VVNienE2MVp2cVRJc1N2THljU1wiIHRhcmdldD1cIl9ibGFua1wiPkluc3RhbnQgU2h1ZmZsZS48L2E+XG4gICAgICAgIGA7XG4gICAgICB9XG5cbiAgICAgIC8vZGlzcGxheSBwYWNrIGxpc3RcbiAgICAgIGNvbnN0IHBhY2tzRGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgIHBhY2tzRGl2LmNsYXNzTmFtZSA9XG4gICAgICAgIFwicm93IHJvdy1jb2xzLTIgcm93LWNvbHMtbWQtMyByb3ctY29scy1sZy00IGd5LTQgbWItNSBqdXN0aWZ5LWNvbnRlbnQtY2VudGVyXCI7XG4gICAgICB0aGlzLnVpLmFwcGVuZChwYWNrc0Rpdik7XG5cbiAgICAgIGZvciAoY29uc3QgcGFjayBvZiB0aGlzLmNsYWltYWJsZVBhY2tzKSB7XG4gICAgICAgIGNvbnN0IHBhY2tEaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICBwYWNrRGl2LmNsYXNzTmFtZSA9IFwiY29sIHRleHQtY2VudGVyIHBzLTMgcGUtM1wiO1xuICAgICAgICBwYWNrc0Rpdi5hcHBlbmQocGFja0Rpdik7XG5cbiAgICAgICAgLypjb25zdCBncmFwaGljRGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgICAgZ3JhcGhpY0Rpdi5jbGFzc05hbWUgPSAnJztcbiAgICAgICAgZ3JhcGhpY0Rpdi5pbm5lckhUTUwgPSBgPGltZyBzcmM9XCJhc3NldHMvcGFjazAucG5nXCIgY2xhc3M9XCJ3LTEwMCBtYi0yXCI+YDtcbiAgICAgICAgcGFja0Rpdi5hcHBlbmQoZ3JhcGhpY0Rpdik7Ki9cblxuICAgICAgICBjb25zdCBwYWNrQ2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImNhbnZhc1wiKTtcbiAgICAgICAgcGFja0NhbnZhcy5jbGFzc05hbWUgPSAndy0xMDAgbWItMCc7XG4gICAgICAgIGNvbnN0IGNvbnRyb2xsZXIgPSBuZXcgUGFja0NhbnZhc0NvbnRyb2xsZXIocGFja0NhbnZhcywgcGFja1sxXSwgdGhpcy5hbGdvSW5kZXhlcik7XG4gICAgICAgIHBhY2tEaXYuYXBwZW5kKHBhY2tDYW52YXMpO1xuXG4gICAgICAgIGF3YWl0IGNvbnRyb2xsZXIubG9hZCgpLnRoZW4oKCkgPT4ge1xuXG4gICAgICAgICAgY29uc3QgaGlkZGVuTmFtZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICAgICAgaGlkZGVuTmFtZS5jbGFzc05hbWUgPSBcImRhcmstdGV4dCBtdC0wIHB0LTAgbWItMiBoaWRkZW4tcGFjay1uYW1lXCI7XG4gICAgICAgICAgaGlkZGVuTmFtZS5zdHlsZS5vcGFjaXR5ID0gJzAnO1xuICAgICAgICAgIGhpZGRlbk5hbWUuc3R5bGVbJ21heC1oZWlnaHQnXSA9ICcwJztcbiAgICAgICAgICAvL2hpZGRlbk5hbWUuaGlkZGVuID0gdHJ1ZTtcbiAgICAgICAgICBoaWRkZW5OYW1lLnRleHRDb250ZW50ID0gY29udHJvbGxlci5uZnQubmFtZTtcbiAgICAgICAgICBwYWNrRGl2LmFwcGVuZChoaWRkZW5OYW1lKTtcblxuICAgICAgICAgIGNvbnN0IG9wZW5CdXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIpO1xuICAgICAgICAgIG9wZW5CdXR0b24uY2xhc3NOYW1lID0gXCJvcGVuLXBhY2stYnV0dG9uXCJcbiAgICAgICAgICBvcGVuQnV0dG9uLnRleHRDb250ZW50ID0gXCJPcGVuXCI7XG4gICAgICAgICAgb3BlbkJ1dHRvbi5kYXRhc2V0LmJhdGhlcklkID0gcGFja1swXTtcbiAgICAgICAgICBvcGVuQnV0dG9uLmRhdGFzZXQuY2FmZmVpbmVDYXJkSWQgPSBwYWNrWzFdO1xuICAgICAgICAgIG9wZW5CdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIHRoaXMub3BlblBhY2suYmluZCh0aGlzLCBjb250cm9sbGVyLCBoaWRkZW5OYW1lKSwgZmFsc2UpO1xuICAgICAgICAgIHBhY2tEaXYuYXBwZW5kKG9wZW5CdXR0b24pO1xuXG4gICAgICAgIH0pLmNhdGNoKGVyciA9PiB7XG4gICAgICAgICAgY29uc29sZS5sb2coZXJyKVxuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLnNsZWVwKDMwMCk7XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBjb25zb2xlLmVycm9yKGVycik7XG5cbiAgICAgIHBhY2tTdGF0dXNQLnRleHRDb250ZW50ID0gZXJyLm1lc3NhZ2U7XG4gICAgICAvL2FsZXJ0KGVyci5tZXNzYWdlKTtcbiAgICB9XG5cbiAgfVxuXG4gIGRpc2FibGVBbGxCdXR0b25zKGV4Y2VwdCl7XG5cbiAgICBjb25zdCBidXR0b25zID0gdGhpcy51aS5xdWVyeVNlbGVjdG9yQWxsKCcub3Blbi1wYWNrLWJ1dHRvbicpO1xuICAgIFxuICAgIGJ1dHRvbnMuZm9yRWFjaChiID0+IHtcblxuICAgICAgaWYgKGIgIT09IGV4Y2VwdCAmJiAhYi5kYXRhc2V0Lm9wZW5lZCl7XG4gICAgICAgIGIuY2xhc3NOYW1lID0gXCJvcGVuLXBhY2stYnV0dG9uIHNvZnQtZGlzYWJsZWRcIjtcbiAgICAgICAgYi5kaXNhYmxlZCA9IHRydWU7XG4gICAgICB9XG4gICAgICBcbiAgICB9KTtcbiAgfVxuXG4gIGVuYWJsZUFsbEJ1dHRvbnMoZXhjZXB0KXtcblxuICAgIGNvbnN0IGJ1dHRvbnMgPSB0aGlzLnVpLnF1ZXJ5U2VsZWN0b3JBbGwoJy5vcGVuLXBhY2stYnV0dG9uJyk7XG4gICAgXG4gICAgYnV0dG9ucy5mb3JFYWNoKGIgPT4ge1xuXG4gICAgICBpZiAoYiAhPT0gZXhjZXB0ICYmICFiLmRhdGFzZXQub3BlbmVkKXtcbiAgICAgICAgYi5jbGFzc05hbWUgPSBcIm9wZW4tcGFjay1idXR0b25cIjtcbiAgICAgICAgYi5kaXNhYmxlZCA9IGZhbHNlO1xuICAgICAgfVxuICAgICAgICBcbiAgICB9KTtcbiAgfVxuXG4gIGFzeW5jIG9wZW5QYWNrKHBhY2tDYW52YXNDb250cm9sbGVyLCBoaWRkZW5OYW1lLCBldmVudCkge1xuXG4gICAgY29uc3QgY2FsbGluZ0J1dHRvbiA9IGV2ZW50LmN1cnJlbnRUYXJnZXQ7IFxuXG4gICAgdGhpcy5kaXNhYmxlQWxsQnV0dG9ucyhjYWxsaW5nQnV0dG9uKTtcblxuICAgIGNvbnN0IGJhdGhlcklkID0gY2FsbGluZ0J1dHRvbi5kYXRhc2V0LmJhdGhlcklkO1xuICAgIGNvbnN0IGNhZmZlaW5lQ2FyZElkID0gY2FsbGluZ0J1dHRvbi5kYXRhc2V0LmNhZmZlaW5lQ2FyZElkO1xuXG4gICAgdHJ5IHtcblxuICAgICAgY2FsbGluZ0J1dHRvbi5pbm5lckhUTUwgPSBgPHNwYW4gY2xhc3M9XCJzcGlubmVyLWJvcmRlciBzcGlubmVyLWJvcmRlci1zbVwiIHJvbGU9XCJzdGF0dXNcIiBhcmlhLWhpZGRlbj1cInRydWVcIj48L3NwYW4+YDtcbiAgICAgIGNhbGxpbmdCdXR0b24uZGlzYWJsZWQgPSB0cnVlO1xuXG4gICAgICBsZXQgc3VnZ2VzdGVkUGFyYW1zID0gYXdhaXQgdGhpcy5hbGdvZENsaWVudC5nZXRUcmFuc2FjdGlvblBhcmFtcygpLmRvKCk7XG5cbiAgICAgIC8vcHJlcGFyZSBvcHRpbiB0eG5cbiAgICAgIGxldCBvcHRpblR4biA9XG4gICAgICBhbGdvc2RrLm1ha2VBc3NldFRyYW5zZmVyVHhuV2l0aFN1Z2dlc3RlZFBhcmFtc0Zyb21PYmplY3Qoe1xuICAgICAgICBmcm9tOiB0aGlzLndhbGxldENvbm5lY3Qud2FsbGV0QWRkcmVzcyxcbiAgICAgICAgdG86IHRoaXMud2FsbGV0Q29ubmVjdC53YWxsZXRBZGRyZXNzLFxuICAgICAgICBhbW91bnQ6IDAsXG4gICAgICAgIGFzc2V0SW5kZXg6IHBhcnNlSW50KGNhZmZlaW5lQ2FyZElkKSxcbiAgICAgICAgc3VnZ2VzdGVkUGFyYW1zOiBzdWdnZXN0ZWRQYXJhbXMsXG4gICAgICB9KTtcblxuICAgIC8vcHJlcGFyZSB0cmFuc2ZlciB0eG5cbiAgICBsZXQgdHJhbnNmZXJUeG4gPVxuICAgICAgYWxnb3Nkay5tYWtlQXNzZXRUcmFuc2ZlclR4bldpdGhTdWdnZXN0ZWRQYXJhbXNGcm9tT2JqZWN0KHtcbiAgICAgICAgZnJvbTogdGhpcy5lc2Nyb3dBZGRyZXNzLFxuICAgICAgICB0bzogdGhpcy53YWxsZXRDb25uZWN0LndhbGxldEFkZHJlc3MsXG4gICAgICAgIGFtb3VudDogMSxcbiAgICAgICAgYXNzZXRJbmRleDogcGFyc2VJbnQoY2FmZmVpbmVDYXJkSWQpLFxuICAgICAgICBzdWdnZXN0ZWRQYXJhbXM6IHN1Z2dlc3RlZFBhcmFtcyxcbiAgICAgIH0pO1xuXG4gICAgICBsZXQgYWxsVHhucyA9IFtvcHRpblR4biwgdHJhbnNmZXJUeG5dO1xuICAgICAgYWxnb3Nkay5hc3NpZ25Hcm91cElEKGFsbFR4bnMpO1xuXG4gICAgICBjb25zdCBzaWduZWRUeG5zID0gYXdhaXQgdGhpcy53YWxsZXRDb25uZWN0LnNpZ25UcmFuc2FjdGlvbnMoYWxsVHhucyk7XG5cbiAgICAgIGNvbnN0IHNpZ25lZFR4bkpzb24gPSB7XG4gICAgICAgIGJhdGhlcklkOiBiYXRoZXJJZCxcbiAgICAgICAgdHhuOiBidG9hKFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkobnVsbCwgc2lnbmVkVHhuc1swXSkpLFxuICAgICAgICBzdWdnZXN0ZWRQYXJhbXM6IHN1Z2dlc3RlZFBhcmFtc1xuICAgICAgfVxuXG4gICAgICB0aGlzLnNsZWVwKDEwMCk7XG4gICAgICBcbiAgICAgIGNhbGxpbmdCdXR0b24uaW5uZXJIVE1MID0gYDxzcGFuIGNsYXNzPVwic3Bpbm5lci1ib3JkZXIgc3Bpbm5lci1ib3JkZXItc21cIiByb2xlPVwic3RhdHVzXCIgYXJpYS1oaWRkZW49XCJ0cnVlXCI+PC9zcGFuPlxuICAgICAgT3BlbmluZy4uLmA7XG4gICAgICBjYWxsaW5nQnV0dG9uLmRpc2FibGVkID0gdHJ1ZTtcblxuICAgICAgLy9jYWxsIGFwaVxuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChQQUNLU19BUElfVVJMICsgXCIvY2FmZmVpbmUtY2FyZC1wYWNrL2NsYWltL1wiLCB7XG4gICAgICAgIG1ldGhvZDogXCJQT1NUXCIsXG4gICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHNpZ25lZFR4bkpzb24pLFxuICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgQWNjZXB0OiBcImFwcGxpY2F0aW9uL2pzb25cIixcbiAgICAgICAgICBcIkNvbnRlbnQtVHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIixcbiAgICAgICAgfSxcbiAgICAgIH0pO1xuXG5cblxuICAgICAgaWYgKHJlc3BvbnNlLnN0YXR1cyA9PT0gMjAwKSB7XG5cbiAgICAgICAgLy9jb25zdCBkYXRhID0gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xuXG4gICAgICAgIGNhbGxpbmdCdXR0b24uaW5uZXJIVE1MID0gYDxzdmcgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHdpZHRoPVwiMjRcIiBoZWlnaHQ9XCIyNFwiIGZpbGw9XCJjdXJyZW50Q29sb3JcIiBjbGFzcz1cImJpIGJpLWNoZWNrLWNpcmNsZS1maWxsXCIgdmlld0JveD1cIjAgMCAxNiAxNlwiPlxuICAgICAgICA8cGF0aCBkPVwiTTE2IDhBOCA4IDAgMSAxIDAgOGE4IDggMCAwIDEgMTYgMHptLTMuOTctMy4wM2EuNzUuNzUgMCAwIDAtMS4wOC4wMjJMNy40NzcgOS40MTcgNS4zODQgNy4zMjNhLjc1Ljc1IDAgMCAwLTEuMDYgMS4wNkw2Ljk3IDExLjAzYS43NS43NSAwIDAgMCAxLjA3OS0uMDJsMy45OTItNC45OWEuNzUuNzUgMCAwIDAtLjAxLTEuMDV6XCIvPlxuICAgICAgPC9zdmc+XG4gICAgICAgIE9wZW5lZGA7XG4gICAgICAgIGNhbGxpbmdCdXR0b24uZGlzYWJsZWQgPSB0cnVlO1xuICAgICAgICBjYWxsaW5nQnV0dG9uLmRhdGFzZXQub3BlbmVkID0gdHJ1ZTtcblxuICAgICAgICAvL2FuaW1hdGUgcGFjayBvcGVuaW5nXG4gICAgICAgIHBhY2tDYW52YXNDb250cm9sbGVyLmFuaW1hdGUoKTtcblxuICAgICAgICBoaWRkZW5OYW1lLnN0eWxlLm9wYWNpdHkgPSAnMSc7XG4gICAgICAgIGhpZGRlbk5hbWUuc3R5bGVbJ21heC1oZWlnaHQnXSA9ICc1MDBweCc7XG5cbiAgICAgICAgdGhpcy5lbmFibGVBbGxCdXR0b25zKGNhbGxpbmdCdXR0b24pO1xuXG4gICAgICB9IGVsc2Uge1xuXG4gICAgICAgIGxldCBkYXRhO1xuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgZGF0YSA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcbiAgICAgICAgfSBjYXRjaChlcnIpIHt9XG4gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgaWYgKGRhdGEgJiYgZGF0YS5lcnJvcil7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGRhdGEuZXJyb3IpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgRXJyb3IgJHtyZXNwb25zZS5zdGF0dXN9YCk7XG4gICAgICAgIH1cblxuICAgICAgfVxuXG4gICAgfSBjYXRjaCAoZXJyKSB7XG5cbiAgICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAgICAgIGFsZXJ0KGVyci5tZXNzYWdlKTtcblxuICAgICAgY2FsbGluZ0J1dHRvbi50ZXh0Q29udGVudCA9IFwiT3BlblwiO1xuICAgICAgY2FsbGluZ0J1dHRvbi5kaXNhYmxlZCA9IGZhbHNlO1xuXG4gICAgICB0aGlzLmVuYWJsZUFsbEJ1dHRvbnMoY2FsbGluZ0J1dHRvbik7XG5cbiAgICB9XG5cbiAgfVxuICBcbn1cblxuXG5jbGFzcyBQYWNrQ2FudmFzQ29udHJvbGxlcntcblxuICBjb25zdHJ1Y3RvcihjYW52YXMsIGNhZmZlaW5lQ2FyZElkLCBhbGdvSW5kZXhlcil7XG5cbiAgICB0aGlzLmNhZmZlaW5lQ2FyZElkID0gY2FmZmVpbmVDYXJkSWQ7XG4gICAgdGhpcy5hbGdvSW5kZXhlciA9IGFsZ29JbmRleGVyO1xuXG4gICAgdGhpcy53aWR0aCA9IDY2MDtcbiAgICB0aGlzLmhlaWdodCA9IDk2MFxuICAgIHRoaXMuaW1hZ2VXaWR0aCA9IDk2MDtcblxuICAgIHRoaXMubnVtQW5pbWF0aW9uSW1hZ2UgPSA0O1xuXG4gICAgdGhpcy5jYW52YXMgPSBjYW52YXM7XG4gICAgdGhpcy5jYW52YXMud2lkdGggPSB0aGlzLndpZHRoO1xuICAgIHRoaXMuY2FudmFzLmhlaWdodCA9IHRoaXMuaGVpZ2h0O1xuXG4gICAgdGhpcy5jb250ZXh0ID0gdGhpcy5jYW52YXMuZ2V0Q29udGV4dCgnMmQnKTtcbiAgICB0aGlzLmNvbnRleHQuaW1hZ2VTbW9vdGhpbmdFbmFibGVkID0gZmFsc2U7XG5cbiAgICAvL3RoaXMuY29udGV4dC5maWxsU3R5bGUgPSAncmVkJztcbiAgICAvL3RoaXMuY29udGV4dC5maWxsUmVjdCgwLCAwLCB0aGlzLndpZHRoLCB0aGlzLmhlaWdodCk7XG5cbiAgICB0aGlzLmNvbnRleHQudHJhbnNsYXRlKC0odGhpcy5pbWFnZVdpZHRoIC0gdGhpcy53aWR0aCkvMiwgMCk7XG5cbiAgICAvL2xvYWQgYW5pbWF0aW9uIGltYWdlc1xuICAgIC8vbG9hZCBjYWZmZWluZSBjYXJkIGltYWdlXG5cbiAgICB0aGlzLm5mdDtcblxuICAgIHRoaXMuY2FyZEltYWdlO1xuICAgIHRoaXMuY2FyZE1hc2s7XG4gICAgdGhpcy5hbmltYXRpb25JbWFnZXM7XG5cblxuICB9XG5cbiAgYXN5bmMgbG9hZCgpe1xuICAgIGF3YWl0IHRoaXMubG9hZEFsbEltYWdlKCk7XG4gIH1cblxuICBzdGF0aWMgbG9hZEltYWdlKHBhdGgpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuXG4gICAgICBjb25zdCBpbWFnZSA9IG5ldyBJbWFnZSgpO1xuXG4gICAgICAvL2ltYWdlLmNyb3NzT3JpZ2luID0gJ0Fub255bW91cyc7XG5cbiAgICAgIGltYWdlLm9ubG9hZCA9ICgpID0+IHtcbiAgICAgICAgcmVzb2x2ZShpbWFnZSk7XG4gICAgICB9XG5cbiAgICAgIGltYWdlLm9uZXJyb3IgPSByZWplY3RcblxuICAgICAgaW1hZ2Uuc3JjID0gcGF0aDtcblxuICAgIH0pXG4gIH1cblxuICBhc3luYyBsb2FkQWxsSW1hZ2UoKXtcblxuICAgIHRoaXMuYW5pbWF0aW9uSW1hZ2VzID0gW107XG5cbiAgICAvL2Nob29zZSBhIGNvbG9yIHJhbmRvbWx5IGRlcGVuZGluZyBvbiBjYXJkIGFzc2V0IGlkXG4gICAgY29uc3QgY29sb3JJbmRleCA9IHRoaXMuY2FmZmVpbmVDYXJkSWQgJSA0O1xuICAgIC8vY29uc3QgY29sb3JJbmRleCA9IDA7XG5cbiAgICAvL2xvYWQgZmlyc3QgaW1hZ2UgYW5kIGRpc3BsYXkgaXQgYXMgc29vbiBhcyBwb3NzaWJsZVxuICAgIGNvbnN0IGluaXRpYWxJbWFnZSA9IGF3YWl0IFBhY2tDYW52YXNDb250cm9sbGVyLmxvYWRJbWFnZShgYXNzZXRzL3BhY2ske2NvbG9ySW5kZXh9LTAucG5nYCk7XG4gICAgdGhpcy5hbmltYXRpb25JbWFnZXMucHVzaChpbml0aWFsSW1hZ2UpXG4gICAgdGhpcy5kcmF3UGFjaygpO1xuXG4gICAgLy9sb2FkIG1hc2tcbiAgICB0aGlzLmNhcmRNYXNrID0gYXdhaXQgUGFja0NhbnZhc0NvbnRyb2xsZXIubG9hZEltYWdlKGBhc3NldHMvY2FyZC1tYXNrLnBuZ2ApO1xuXG4gICAgLy9sb2FkIG5mdCBpbWFnZVxuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHRoaXMuYWxnb0luZGV4ZXIubG9va3VwQXNzZXRCeUlEKHRoaXMuY2FmZmVpbmVDYXJkSWQpLmRvKCk7XG4gICAgdGhpcy5uZnQgPSBuZXcgTkZUKHRoaXMuY2FmZmVpbmVDYXJkSWQsIHJlc3VsdFsnYXNzZXQnXSk7XG4gICAgYXdhaXQgdGhpcy5uZnQubG9hZCh0aGlzLmFsZ29JbmRleGVyKTtcbiAgICBcbiAgICB0cnkge1xuICAgICAgdGhpcy5jYXJkSW1hZ2UgPSBhd2FpdCBQYWNrQ2FudmFzQ29udHJvbGxlci5sb2FkSW1hZ2UodGhpcy5uZnQuaW1hZ2VVcmwpO1xuICAgIH0gY2F0Y2ggKGVycil7XG4gICAgICBjb25zb2xlLmxvZyhgRXJyb3IgbG9hZGluZyBpbWFnZSBmcm9tIHByaW1hcnksIHRyeWluZyBzZWNvbmRhcnlgKTtcbiAgICAgIHRyeSB7XG4gICAgICAgIHRoaXMuY2FyZEltYWdlID0gYXdhaXQgUGFja0NhbnZhc0NvbnRyb2xsZXIubG9hZEltYWdlKHRoaXMubmZ0LmltYWdlVXJsQWx0ZXJuYXRlKTtcbiAgICAgIH0gY2F0Y2ggKGVycil7XG4gICAgICAgIHRoaXMuY2FyZEltYWdlID0gYXdhaXQgUGFja0NhbnZhc0NvbnRyb2xsZXIubG9hZEltYWdlKCdhc3NldHMvZW1wdHktY2FyZC5wbmcnKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvL2xvYWQgYW5pbWF0aW9uIGltYWdlc1xuICAgIFxuICAgIFxuXG4gICAgZm9yIChsZXQgaSA9IDE7IGkgPD0gdGhpcy5udW1BbmltYXRpb25JbWFnZTsgaSsrKXtcbiAgICAgIGNvbnN0IGFuaW1hdGlvbkltYWdlID0gYXdhaXQgUGFja0NhbnZhc0NvbnRyb2xsZXIubG9hZEltYWdlKGBhc3NldHMvcGFjayR7Y29sb3JJbmRleH0tJHtpfS5wbmdgKTtcbiAgICAgIHRoaXMuYW5pbWF0aW9uSW1hZ2VzLnB1c2goYW5pbWF0aW9uSW1hZ2UpO1xuICAgIH1cblxuICB9XG5cbiAgXG5cbiAgYXN5bmMgZHJhd1BhY2soKXtcblxuICAgIC8vbG9hZCBpbWFnZVxuICAgIHRoaXMuY29udGV4dC5kcmF3SW1hZ2UodGhpcy5hbmltYXRpb25JbWFnZXNbMF0sIDAsIDAsIHRoaXMuaW1hZ2VXaWR0aCwgdGhpcy5oZWlnaHQpO1xuXG4gIH1cblxuICBzdGF0aWMgZWFzZUluT3V0UXVhZCh4KSB7XG4gICAgcmV0dXJuIHggPCAwLjUgPyAyICogeCAqIHggOiAxIC0gTWF0aC5wb3coLTIgKiB4ICsgMiwgMikgLyAyO1xuICB9XG5cbiAgYXN5bmMgYW5pbWF0ZSgpe1xuXG4gICAgbGV0IGZyYW1lRHVyYXRpb24gPSAwLjE1O1xuXG4gICAgbGV0IGN1cnJlbnRGcmFtZSA9IDE7XG5cbiAgICBjb25zdCBpbnRlcnZhbElkID0gc2V0SW50ZXJ2YWwoKCkgPT4ge1xuXG4gICAgICAvL2NsZWFyIGNvbnRleHRcbiAgICAgIHRoaXMuY29udGV4dC5jbGVhclJlY3QoMCwgMCwgdGhpcy5pbWFnZVdpZHRoLCB0aGlzLmhlaWdodCk7XG5cbiAgICAgIC8vZHJhdyBtYXNrXG4gICAgICB0aGlzLmNvbnRleHQuZHJhd0ltYWdlKHRoaXMuY2FyZE1hc2ssIDAsIDAsIHRoaXMuaW1hZ2VXaWR0aCwgdGhpcy5oZWlnaHQpO1xuXG4gICAgICB0aGlzLmNvbnRleHQuZ2xvYmFsQ29tcG9zaXRlT3BlcmF0aW9uID0gJ3NvdXJjZS1pbic7XG5cbiAgICAgIC8vZHJhdyBjYXJkXG4gICAgICB0aGlzLmNvbnRleHQuZHJhd0ltYWdlKHRoaXMuY2FyZEltYWdlLCAwLCAwLCB0aGlzLmltYWdlV2lkdGgsIHRoaXMuaGVpZ2h0KTtcblxuICAgICAgdGhpcy5jb250ZXh0Lmdsb2JhbENvbXBvc2l0ZU9wZXJhdGlvbiA9ICdzb3VyY2Utb3Zlcic7XG5cbiAgICAgIC8vZHJhdyBwYWNrIGFuaW1hdGlvblxuICAgICAgdGhpcy5jb250ZXh0LmRyYXdJbWFnZSh0aGlzLmFuaW1hdGlvbkltYWdlc1tjdXJyZW50RnJhbWVdLCAwLCAwLCB0aGlzLmltYWdlV2lkdGgsIHRoaXMuaGVpZ2h0KTtcblxuICAgICAgaWYgKGN1cnJlbnRGcmFtZSA9PT0gdGhpcy5udW1BbmltYXRpb25JbWFnZSl7XG5cbiAgICAgICAgY2xlYXJJbnRlcnZhbChpbnRlcnZhbElkKTtcblxuICAgICAgICBwYXJ0eS5zcGFya2xlcyh0aGlzLmNhbnZhcyk7XG5cbiAgICAgICAgLy9zdGFydCBzbGlkZSBhbmltYXRpb25cbiAgICAgICAgZnJhbWVEdXJhdGlvbiA9IDAuMDU7XG4gICAgICAgIGNvbnN0IGFuaW1hdGlvbkR1cmF0aW9uID0gMC44O1xuICAgICAgICBsZXQgY3VycmVudFRpbWUgPSAwO1xuXG4gICAgICAgIGNvbnN0IGludGVydmFsSWQyID0gc2V0SW50ZXJ2YWwoKCkgPT4ge1xuXG4gICAgICAgICAgY29uc3QgeU9mZnNldCA9IFBhY2tDYW52YXNDb250cm9sbGVyLmVhc2VJbk91dFF1YWQoY3VycmVudFRpbWUvYW5pbWF0aW9uRHVyYXRpb24pKnRoaXMuaGVpZ2h0O1xuXG4gICAgICAgICAgLy9jbGVhciBjb250ZXh0XG4gICAgICAgICAgdGhpcy5jb250ZXh0LmNsZWFyUmVjdCgwLCAwLCB0aGlzLmltYWdlV2lkdGgsIHRoaXMuaGVpZ2h0KTtcblxuICAgICAgICAgIC8vZHJhdyBtYXNrXG4gICAgICAgICAgdGhpcy5jb250ZXh0LmRyYXdJbWFnZSh0aGlzLmNhcmRNYXNrLCAwLCAwLCB0aGlzLmltYWdlV2lkdGgsIHRoaXMuaGVpZ2h0KTtcblxuICAgICAgICAgIHRoaXMuY29udGV4dC5nbG9iYWxDb21wb3NpdGVPcGVyYXRpb24gPSAnc291cmNlLWluJztcblxuICAgICAgICAgIC8vZHJhdyBjYXJkXG4gICAgICAgICAgdGhpcy5jb250ZXh0LmRyYXdJbWFnZSh0aGlzLmNhcmRJbWFnZSwgMCwgMCwgdGhpcy5pbWFnZVdpZHRoLCB0aGlzLmhlaWdodCk7XG5cbiAgICAgICAgICB0aGlzLmNvbnRleHQuZ2xvYmFsQ29tcG9zaXRlT3BlcmF0aW9uID0gJ3NvdXJjZS1vdmVyJztcblxuICAgICAgICAgIC8vZHJhdyBwYWNrIGFuaW1hdGlvblxuICAgICAgICAgIHRoaXMuY29udGV4dC5kcmF3SW1hZ2UodGhpcy5hbmltYXRpb25JbWFnZXNbdGhpcy5udW1BbmltYXRpb25JbWFnZV0sIDAsIHlPZmZzZXQsIHRoaXMuaW1hZ2VXaWR0aCwgdGhpcy5oZWlnaHQpO1xuXG4gICAgICAgICAgY3VycmVudFRpbWUgKz0gZnJhbWVEdXJhdGlvbjtcblxuICAgICAgICAgIGlmIChjdXJyZW50VGltZSA+PSBhbmltYXRpb25EdXJhdGlvbil7XG4gICAgICAgICAgICBjbGVhckludGVydmFsKGludGVydmFsSWQyKTtcblxuICAgICAgICAgICAgXG5cbiAgICAgICAgICB9XG5cbiAgICAgICAgfSwgZnJhbWVEdXJhdGlvbioxMDAwKTtcblxuICAgICAgfVxuXG4gICAgICBjdXJyZW50RnJhbWUrKztcblxuICAgIH0sIGZyYW1lRHVyYXRpb24qMTAwMClcblxuXG5cbiAgfVxuXG59XG4iXSwibmFtZXMiOlsiQmFzZVBhZ2UiLCJjb25zdHJ1Y3RvciIsIndhbGxldENvbm5lY3QiLCJob2xkaW5ncyIsImFsZ29kQ2xpZW50IiwiYWxnb0luZGV4ZXIiLCJ0aGlzIiwiSG9tZSIsInN1cGVyIiwiYXJndW1lbnRzIiwidWkiLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJpbm5lckhUTUwiLCJsb2FkUGFja3MiLCJhc3luYyIsInJlc3VsdCIsImNsYWltYWJsZVBhY2tzIiwibGVuZ3RoIiwicXVlcnlTZWxlY3RvciIsIndpbmRvdyIsImVuYWJsZU5hdmlnYXRpb25MaW5rcyIsIlBBQ0tTX0FQSV9VUkwiLCJmZXRjaCIsInN0YXR1cyIsImpzb24iLCJiYXRoZXJzSWRzIiwiYmF0aGVycyIsIm5mdHMiLCJtYXAiLCJuZnQiLCJhc3NldElkIiwicGFjayIsInBhY2tzIiwiaW5jbHVkZXMiLCJwdXNoIiwiZXNjcm93QWRkcmVzcyIsIkVycm9yIiwiUGFja3MiLCJmZXRjaFBhY2tzIiwic2xlZXAiLCJkZWxheVRpbWUiLCJQcm9taXNlIiwicmVzb2x2ZSIsInNldFRpbWVvdXQiLCJwYWNrU3RhdHVzUCIsInBsdXJhbCIsInRleHRDb250ZW50IiwicGFja3NEaXYiLCJjbGFzc05hbWUiLCJhcHBlbmQiLCJwYWNrRGl2IiwicGFja0NhbnZhcyIsImNvbnRyb2xsZXIiLCJQYWNrQ2FudmFzQ29udHJvbGxlciIsImxvYWQiLCJ0aGVuIiwiaGlkZGVuTmFtZSIsInN0eWxlIiwib3BhY2l0eSIsIm5hbWUiLCJvcGVuQnV0dG9uIiwiZGF0YXNldCIsImJhdGhlcklkIiwiY2FmZmVpbmVDYXJkSWQiLCJhZGRFdmVudExpc3RlbmVyIiwib3BlblBhY2siLCJiaW5kIiwiY2F0Y2giLCJlcnIiLCJjb25zb2xlIiwibG9nIiwiZXJyb3IiLCJtZXNzYWdlIiwiZGlzYWJsZUFsbEJ1dHRvbnMiLCJleGNlcHQiLCJxdWVyeVNlbGVjdG9yQWxsIiwiZm9yRWFjaCIsImIiLCJvcGVuZWQiLCJkaXNhYmxlZCIsImVuYWJsZUFsbEJ1dHRvbnMiLCJwYWNrQ2FudmFzQ29udHJvbGxlciIsImV2ZW50IiwiY2FsbGluZ0J1dHRvbiIsImN1cnJlbnRUYXJnZXQiLCJzdWdnZXN0ZWRQYXJhbXMiLCJnZXRUcmFuc2FjdGlvblBhcmFtcyIsImRvIiwiYWxsVHhucyIsImZyb20iLCJ3YWxsZXRBZGRyZXNzIiwidG8iLCJhbW91bnQiLCJhc3NldEluZGV4IiwicGFyc2VJbnQiLCJzaWduZWRUeG5zIiwic2lnblRyYW5zYWN0aW9ucyIsInNpZ25lZFR4bkpzb24iLCJ0eG4iLCJidG9hIiwiU3RyaW5nIiwiZnJvbUNoYXJDb2RlIiwiYXBwbHkiLCJyZXNwb25zZSIsIm1ldGhvZCIsImJvZHkiLCJKU09OIiwic3RyaW5naWZ5IiwiaGVhZGVycyIsIkFjY2VwdCIsImRhdGEiLCJhbmltYXRlIiwiYWxlcnQiLCJjYW52YXMiLCJ3aWR0aCIsImhlaWdodCIsImltYWdlV2lkdGgiLCJudW1BbmltYXRpb25JbWFnZSIsImNvbnRleHQiLCJnZXRDb250ZXh0IiwiaW1hZ2VTbW9vdGhpbmdFbmFibGVkIiwidHJhbnNsYXRlIiwiY2FyZEltYWdlIiwiY2FyZE1hc2siLCJhbmltYXRpb25JbWFnZXMiLCJsb2FkQWxsSW1hZ2UiLCJzdGF0aWMiLCJwYXRoIiwicmVqZWN0IiwiaW1hZ2UiLCJJbWFnZSIsIm9ubG9hZCIsIm9uZXJyb3IiLCJzcmMiLCJjb2xvckluZGV4IiwiaW5pdGlhbEltYWdlIiwibG9hZEltYWdlIiwiZHJhd1BhY2siLCJsb29rdXBBc3NldEJ5SUQiLCJpbWFnZVVybCIsImltYWdlVXJsQWx0ZXJuYXRlIiwiaSIsImFuaW1hdGlvbkltYWdlIiwiZHJhd0ltYWdlIiwieCIsIk1hdGgiLCJwb3ciLCJmcmFtZUR1cmF0aW9uIiwiY3VycmVudEZyYW1lIiwiaW50ZXJ2YWxJZCIsInNldEludGVydmFsIiwiY2xlYXJSZWN0IiwiZ2xvYmFsQ29tcG9zaXRlT3BlcmF0aW9uIiwiY2xlYXJJbnRlcnZhbCIsImFuaW1hdGlvbkR1cmF0aW9uIiwiY3VycmVudFRpbWUiLCJpbnRlcnZhbElkMiIsInlPZmZzZXQiLCJlYXNlSW5PdXRRdWFkIl0sInNvdXJjZVJvb3QiOiIifQ==