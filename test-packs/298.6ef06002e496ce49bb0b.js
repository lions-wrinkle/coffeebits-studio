"use strict";(self.webpackChunkstudio=self.webpackChunkstudio||[]).push([[298,998],{6998:(t,a,e)=>{e.r(a),e.d(a,{BasePage:()=>s});class s{constructor(t,a,e,s){this.walletConnect=t,this.algodClient=e,this.algoIndexer=s,this.holdings=a}}},5298:(t,a,e)=>{e.r(a),e.d(a,{Packs:()=>c,loadPacks:()=>h});var s=e(6998),i=e(7304),n=(e(4050),e(4393));async function h(t){let a=await fetch("https://api.atomixwap.xyz/caffeine-card-pack/get-all");if(200===a.status){let e=await a.json();const s=t.bathers.nfts.map((t=>t.assetId));let i=[];for(const t of e.packs)s.includes(t[0])&&i.push(t);return{claimablePacks:i,suggestedParams:e.suggestedParams,escrowAddress:e.escrowAddress}}throw new Error(`Can't load packs. Error ${a.status}`)}class c extends s.BasePage{constructor(){super(...arguments),this.ui=document.createElement("div"),this.ui.innerHTML='\n    <h1>Caffeine Cards Packs</h1>\n    <p id="packs-status" class="dark-text text-center">Loading packs...</p>\n    ',this.claimablePacks,this.suggestedParams,this.escrowAddress,this.fetchPacks()}async fetchPacks(){const t=this.ui.querySelector("#packs-status");try{const a=await h(this.holdings);if(this.claimablePacks=a.claimablePacks,this.suggestedParams=a.suggestedParams,this.escrowAddress=a.escrowAddress,this.claimablePacks.length>0){let a="";this.claimablePacks.length>1&&(a="s"),t.textContent=`${this.claimablePacks.length} pack${a} to claim!`}else t.innerHTML='<img src="assets/pack0-0.png" style="width: 240px; opacity: 0.2;" class="mb-3"><br>\n        No pack to open.<br>\n        A Caffeine Card is given for every Bather bought in the <a href="https://instantshuffle.com/shuffle/Y1ybuqKKZU6O4Kl2hzD5" target="_blank">Instant Shuffle.</a>\n        ';const e=document.createElement("div");e.className="row row-cols-2 row-cols-md-3 row-cols-lg-4 gy-4 mb-5 justify-content-center",this.ui.append(e);for(const t of this.claimablePacks){const a=document.createElement("div");a.className="col text-center ps-3 pe-3",e.append(a);const s=document.createElement("canvas");s.className="w-100 mb-2";const i=new o(s,t[1],this.algoIndexer);a.append(s);const n=document.createElement("button");n.textContent="Open",n.dataset.batherId=t[0],n.dataset.caffeineCardId=t[1],n.addEventListener("click",this.openPack.bind(this,i),!1),a.append(n)}}catch(a){console.error(a),t.textContent=a.message}}async openPack(t,a){t.animate()}}class o{constructor(t,a,e){this.caffeineCardId=a,this.algoIndexer=e,this.width=660,this.height=960,this.imageWidth=960,this.numAnimationImage=4,this.canvas=t,this.canvas.width=this.width,this.canvas.height=this.height,this.context=this.canvas.getContext("2d"),this.context.imageSmoothingEnabled=!1,this.context.translate(-(this.imageWidth-this.width)/2,0),this.cardImage,this.cardMask,this.animationImages,this.loadAllImage()}static loadImage(t){return new Promise(((a,e)=>{const s=new Image;s.onload=()=>{a(s)},s.onerror=t=>{e(t)},s.src=t}))}async loadAllImage(){this.animationImages=[];const t=this.caffeineCardId%4,a=await o.loadImage(`assets/pack${t}-0.png`);this.animationImages.push(a),this.drawPack(),this.cardMask=await o.loadImage("assets/card-mask.png");const e=await this.algoIndexer.lookupAssetByID(this.caffeineCardId).do(),s=new i.Sm(this.caffeineCardId,e.asset);await s.load(this.algoIndexer);try{this.cardImage=await o.loadImage(s.imageUrl)}catch(t){try{this.cardImage=await o.loadImage(s.imageUrlAlternate)}catch(t){this.cardImage=await o.loadImage("assets/empty-card.png")}}for(let a=1;a<=this.numAnimationImage;a++){const e=await o.loadImage(`assets/pack${t}-${a}.png`);this.animationImages.push(e)}}async drawPack(){this.context.drawImage(this.animationImages[0],0,0,this.imageWidth,this.height)}static easeInOutQuad(t){return t<.5?2*t*t:1-Math.pow(-2*t+2,2)/2}async animate(){let t=.15,a=1;const e=setInterval((()=>{if(this.context.clearRect(0,0,this.imageWidth,this.height),this.context.drawImage(this.cardMask,0,0,this.imageWidth,this.height),this.context.globalCompositeOperation="source-in",this.context.drawImage(this.cardImage,0,0,this.imageWidth,this.height),this.context.globalCompositeOperation="source-over",this.context.drawImage(this.animationImages[a],0,0,this.imageWidth,this.height),a===this.numAnimationImage){clearInterval(e),n.sparkles(this.canvas),t=.05;const a=.8;let s=0;const i=setInterval((()=>{const e=o.easeInOutQuad(s/a)*this.height;this.context.clearRect(0,0,this.imageWidth,this.height),this.context.drawImage(this.cardMask,0,0,this.imageWidth,this.height),this.context.globalCompositeOperation="source-in",this.context.drawImage(this.cardImage,0,0,this.imageWidth,this.height),this.context.globalCompositeOperation="source-over",this.context.drawImage(this.animationImages[this.numAnimationImage],0,e,this.imageWidth,this.height),s+=t,s>=a&&clearInterval(i)}),1e3*t)}a++}),1e3*t)}}}}]);