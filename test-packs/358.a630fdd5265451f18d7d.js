"use strict";(self.webpackChunkstudio=self.webpackChunkstudio||[]).push([[358,998],{6998:(t,e,s)=>{s.r(e),s.d(e,{BasePage:()=>a});class a{constructor(t,e,s,a){this.walletConnect=t,this.algodClient=s,this.algoIndexer=a,this.holdings=e}}},2358:(t,e,s)=>{s.r(e),s.d(e,{GrinderQueue:()=>r});var a=s(6998),n=s(5190),o=s(2417);class r extends a.BasePage{constructor(){super(...arguments),this.ui=document.createElement("div"),this.ui.innerHTML='\n    <button class="button-alt" id="refresh-button">Refresh</button>\n    <table class="table" style="table-layout: fixed; color: var(--white);">\n      <thead>\n        <tr>\n          <th scope="col">Txn</th>\n          <th scope="col">Date</th>\n          <th scope="col">Sender</th>\n          <th scope="col">Bather</th>\n          <th scope="col">Card</th>\n          <th scope="col">Status</th>\n        </tr>\n      </thead>\n      <tbody id="table-body">\n      </tbody>\n    </table>\n        ',this.load(),this.ui.querySelector("#refresh-button").addEventListener("click",(()=>{this.load()}),!1)}async load(){const t=n.Z.filter((t=>"caffeineCards"===t.name))[0].addresses[0];let e=!1;(o.Z.algodUrl.includes("testnet")||o.Z.algoIndexerUrl.includes("testnet"))&&(e=!0);let s,a=[];do{const e=await this.algoIndexer.searchForTransactions(t).address(t).addressRole("receiver").txType("axfer").nextToken(s).do();for(const t of e.transactions)1===t["asset-transfer-transaction"].amount&&t.note&&atob(t.note).includes('"evolve":')&&a.push(t);s=e["next-token"]}while(s);a.sort(((t,e)=>e["round-time"]-t.roundtime));const r=this.ui.querySelector("#table-body");r.textContent="";for(const s of a){const a=JSON.parse(atob(s.note)).evolve,n=s["asset-transfer-transaction"]["asset-id"];let o,l;try{o=await this.algoIndexer.lookupAssetByID(a).do()}catch(t){console.error(t)}try{l=await this.algoIndexer.lookupAssetByID(n).do()}catch(t){console.error(t)}let d="";e&&(d="testnet.");let c="";try{const t=await fetch(`https://api.${d}nf.domains/nfd/address?address=${s.sender}`);if(200===t.status){const e=await t.json();c=`<a href="https://${e[0].name}.xyz" target="_blank">${e[0].name}</a>`}}catch(t){console.error(t)}const i=new Date(1e3*s["round-time"]),{statuses:h,groupId:p}=await this.getStatus(s.id,a,n,t);let u="";p&&(u=`<br><small><a href="https://${d}algoexplorer.io/tx/group/${encodeURIComponent(p)}" class="link-secondary" target="_blank">Txns group</a></small>`);const b=document.createElement("tr");b.innerHTML=`\n      <td style="overflow: hidden; text-overflow: ellipsis; white-space: nowrap;"><a href="https://${d}algoexplorer.io/tx/${s.id}" target="_blank">${s.id}</a><br><a href="#" id="btn-${s.id}" class="opacity: 0.5;">copy</a>\n      </td>\n      <td>${i.toLocaleString()}</td>\n      <td style="overflow: hidden; text-overflow: ellipsis; white-space: nowrap;"><a href="https://${d}algoexplorer.io/address/${s.sender}" target="_blank">${s.sender}</a><br>${c}</td>\n      <td><a href="https://${d}algoexplorer.io/asset/${a}" target="_blank">${o?o.asset.params.name:"unknown"}</a><br><small class="text-secondary">${a}</small></td>\n      <td><a href="https://${d}algoexplorer.io/asset/${n}" target="_blank">${l?l.asset.params.name:"unknown"}</a><br><small class="text-secondary">${n}</small></td>\n      <td>${h.join(" ")}${u}</td>\n      `,r.appendChild(b),b.querySelector(`#btn-${s.id}`).addEventListener("click",(t=>{navigator.clipboard.writeText(s.id),t.preventDefault()}),!1)}}async getStatus(t,e,s,a){let n,o=[];const r=await this.algoIndexer.lookupAssetTransactions(e).txType("acfg").do();for(const e of r.transactions)if(e.note){const s=JSON.parse(atob(e.note));s&&"update"===s.type&&s.requestTxn===t&&(o.push('<span class="badge text-bg-success">updated</span>'),n=e.group)}const l=await this.algoIndexer.lookupAssetTransactions(s).txType("axfer").address(a).addressRole("sender").do();for(const e of l.transactions)if(e.note){const s=JSON.parse(atob(e.note));s&&"burn"===s.type&&s.requestTxn===t&&o.push('<span class="badge text-bg-success">burned</span>')}return 0===o.length&&o.push('<span class="badge text-bg-warning">pending</span>'),{statuses:o,groupId:n}}}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,