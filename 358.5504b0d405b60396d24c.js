"use strict";(self.webpackChunkstudio=self.webpackChunkstudio||[]).push([[358,998],{6998:(t,e,s)=>{s.r(e),s.d(e,{BasePage:()=>a});class a{constructor(t,e,s,a){this.walletConnect=t,this.algodClient=s,this.algoIndexer=a,this.holdings=e}}},2358:(t,e,s)=>{s.r(e),s.d(e,{GrinderQueue:()=>r});var a=s(6998),o=s(5190),n=s(2417);class r extends a.BasePage{constructor(){super(...arguments),this.ui=document.createElement("div"),this.ui.innerHTML='\n    <button class="button-alt" id="refresh-button">Refresh</button>\n    <table class="table" style="table-layout: fixed; color: var(--white);">\n      <thead>\n        <tr>\n          <th scope="col" style="width:6px">&nbsp;</th>\n          <th scope="col">Txn</th>\n          <th scope="col">Group</th>\n          <th scope="col">Date</th>\n          <th scope="col">Sender</th>\n          <th scope="col">Bather</th>\n          <th scope="col">Card</th>\n          <th scope="col">Status</th>\n        </tr>\n      </thead>\n      <tbody id="table-body">\n      </tbody>\n    </table>\n        ',this.load(),this.ui.querySelector("#refresh-button").addEventListener("click",(()=>{this.load()}),!1)}async load(){const t=o.default.filter((t=>"caffeineCards"===t.name))[0].addresses[0];let e=!1;(n.Z.algodUrl.includes("testnet")||n.Z.algoIndexerUrl.includes("testnet"))&&(e=!0);let s=[];const a=await this.algoIndexer.searchForTransactions(t).address(t).addressRole("receiver").txType("axfer").currencyGreaterThan(0).nextToken(void 0).limit(1e3).do();for(const t of a.transactions)console.log(t),1===t["asset-transfer-transaction"]?.amount&&t.note&&atob(t.note).includes('"evolve":')&&s.push(t);s.sort(((t,e)=>e["round-time"]-t.roundtime));const r=this.ui.querySelector("#table-body");let l,d;r.textContent="";for(const a of s){const s=JSON.parse(atob(a.note)).evolve,o=a["asset-transfer-transaction"]["asset-id"];let n,c;try{n=await this.algoIndexer.lookupAssetByID(s).do()}catch(t){console.error(t)}try{c=await this.algoIndexer.lookupAssetByID(o).do()}catch(t){console.error(t)}let i="";e&&(i="testnet.");let p="";try{const t=await fetch(`https://api.${i}nf.domains/nfd/address?address=${a.sender}`);if(200===t.status){const e=await t.json();p=`<a href="https://${e[0].name}.xyz" target="_blank">${e[0].name}</a>`}}catch(t){console.error(t)}const u=new Date(1e3*a["round-time"]),{statuses:h,groupId:g}=await this.getStatus(a.id,a.group,s,o,t);let b="";g&&(b=`<br><small><a href="https://${i}algoexplorer.io/tx/group/${encodeURIComponent(g)}" class="link-secondary" target="_blank">Txns group</a></small>`),l?void 0!==a.group&&d!==a.group&&(l="darkgoldenrod"===l?"darkcyan":"darkgoldenrod"):l="darkgoldenrod";const f=document.createElement("tr");f.innerHTML=`\n      <td style="background-color:${a.group?l:"none"};">\n      </td>\n      <td style="overflow: hidden; text-overflow: ellipsis; white-space: nowrap;"><a href="https://${i}algoexplorer.io/tx/${a.id}" target="_blank">${a.id}</a><br><a href="#" id="btn-${a.id}" style="opacity: 0.5;">copy</a>\n      </td>\n      <td style="overflow: hidden; text-overflow: ellipsis; white-space: nowrap;">\n      <a href="https://${i}algoexplorer.io/tx/group/${encodeURIComponent(a.group)}" target="_blank">${a.group}</a>\n      </td>\n      <td>${u.toLocaleString()}</td>\n      <td style="overflow: hidden; text-overflow: ellipsis; white-space: nowrap;"><a href="https://${i}algoexplorer.io/address/${a.sender}" target="_blank">${a.sender}</a><br>${p}</td>\n      <td><a href="https://www.nftexplorer.app/asset/${s}" target="_blank">${n?n.asset.params.name:"unknown"}</a><br><small class="text-secondary">${s}</small></td>\n      <td><a href="https://www.nftexplorer.app/asset/${o}" target="_blank">${c?c.asset.params.name:"unknown"}</a><br><small class="text-secondary">${o}</small></td>\n      <td>${h.join(" ")}${b}</td>\n      `,r.appendChild(f),f.querySelector(`#btn-${a.id}`).addEventListener("click",(t=>{navigator.clipboard.writeText(a.id),t.preventDefault()}),!1),d=a.group}}async getStatus(t,e,s,a,o){let n,r=[];const l=await this.algoIndexer.lookupAssetTransactions(s).txType("acfg").do();for(const s of l.transactions)if(s.note){const a=JSON.parse(atob(s.note));a&&"update"===a.type&&(a.requestTxn===t||a.group&&a.group===e)&&(r.push('<span class="badge text-bg-success">updated</span>'),n=s.group)}const d=await this.algoIndexer.lookupAssetTransactions(a).txType("axfer").address(o).addressRole("sender").do();for(const s of d.transactions)if(s.note){let a;try{a=JSON.parse(atob(s.note))}catch(t){console.error(t)}a&&"burn"===a.type&&(a.requestTxn===t||a.group&&a.group===e)&&r.push('<span class="badge text-bg-success">burned</span>')}return 0===r.length&&r.push('<span class="badge text-bg-warning">pending</span>'),{statuses:r,groupId:n}}}}}]);