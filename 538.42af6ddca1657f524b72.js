"use strict";(self.webpackChunkstudio=self.webpackChunkstudio||[]).push([[538],{6538:(e,t,a)=>{a.r(t),a.d(t,{Grinder:()=>l});var s=a(6998),i=(a(5190),a(7304)),n=a(7644),r=a(2404),d=a(2871),o=a(4714);class l extends s.BasePage{constructor(...e){super(...arguments),this.simulator=e[e.length-1],this.ui=document.createElement("div"),this.ui.innerHTML=`\n    <h1>Grinder ${this.simulator?"Simulator":""}</h1>\n    <p class="dark-text">${this.simulator?'Try any Caffeine Card. Go to the <a href="?grinder" data-page-link="grinder" class="text-decoration-underline">regular Grinder</a> to actually use your cards.<br />Get the Caffeine Card of your dreams on <a href="https://www.nftexplorer.app/collection/caffeine-cards" class="text-decoration-underline" target="_blank">secondary market.</a>':'Use your Caffeine Cards to customize your Bathers.<br />Try any Caffeine Card in the <a href="?grinder-simulator" data-page-link="grinder-simulator" class="text-decoration-underline">simulator</a>.'}</p>\n\n    <div class="d-sm-flex flew-row" style="background-color: var(--background-dark);">\n\n    ${this.simulator?`<div class="d-flex flex-column p-3 text-center">\n\n            <img src="assets/default.png" class="mb-2 ms-auto me-auto" id="club-img" style="width: 200px; height: auto">\n\n            <div class="dropdown" id="bath-club-dropdown">\n                <button class="dropdown-toggle button-alt" type="button" data-bs-toggle="dropdown"\n                    aria-expanded="false">\n                    Choose Bather\n                </button>\n            </div>\n            <div class="mb-2 mt-4 ms-auto me-auto justify-content-center row row-cols-2" id="cards" style="width: 200px;">\n              <div class="col text-center" id="default-card" style="width: 200px;">\n                <img src="assets/default-card.png" class="img-fluid" style="width: 200px; height: auto;">\n              </div>\n            </div>\n            <div class="dropdown mb-3" id="cards-dropdown">\n                <button class="dropdown-toggle button-alt mb-2" type="button" data-bs-toggle="dropdown"\n                    aria-expanded="false" id="choose-card-button" disabled>\n                    Add Card\n                </button>\n            </div>\n            ${this.simulator?"":'<button id="button-review" disabled>Review...</button>'}\n\n        </div>\n\n        <div class="d-flex flex-column flex-fill p-3 text-center">\n            <small class="dark-text">preview</small>\n            <img src="assets/default.png" class="w-100 m-auto img-fluid" style="max-width: 480px;" id="merged-img">\n\n        </div>`:'<div class="d-flex justify-content-center align-items-center p-3 text-center w-100 vh-100">\n          <div>\n            The grinder is unavailable while I\'m getting ready for the upcoming Roar Cafe.<br>\n            You can still play with the <a href="?grinder-simulator" data-page-link="grinder-simulator" class="text-decoration-underline">simulator</a>.\n          </div>\n        </div>'}\n\n        \n\n    </div>`,this.bathersCollection,this.cardsCollection,this.selectedBather,this.selectedCards=[],this.mergedProperties={},this.mergedImgDataURL,this.chooseCardButton=this.ui.querySelector("#choose-card-button"),this.load()}async load(){await this.loadBathers(),this.ui.querySelector("#button-review")?.addEventListener("click",this.review.bind(this));const e=window.location.search,t=new URLSearchParams(e);if(t.has("bather")){const e=parseInt(t.get("bather")),a=this.bathersCollection.nfts.filter((t=>t.assetId===e))?.[0];a&&await this.displayBather(a)}}async loadBathers(){this.bathersCollection=this.holdings.bathers;const e=this.ui.querySelector("#bath-club-dropdown");let t=e.querySelector(".dropdown-menu");t&&t.remove(),t=new d.Z(this.bathersCollection.nfts.filter((e=>e.metadata)),this.didSelectBather.bind(this)),e.append(t.ui)}async didSelectBather(e){e.preventDefault(),this.clearCard();const t=e.currentTarget.dataset.index;if(!t)return;const a=this.bathersCollection.nfts[t];this.mergedProperties=a.metadata.properties,await this.displayBather(a)}async displayBather(e){this.selectedBather=e,this.ui.querySelector("#club-img").src=e.imageUrl,this.validate(),await this.loadCards(),this.chooseCardButton.disabled=!1}clearCard(){this.selectedCards=[],this.chooseCardButton.disabled=!0,this.mergedProperties={},this.ui.querySelector("#default-card").hidden=!1;const e=Array.from(this.ui.querySelector("#cards").children);for(const t of e)"default-card"!==t.id&&t.remove()}async loadCards(){this.simulator?this.cardsCollection||(this.cardsCollection=await this.loadAllCards()):this.cardsCollection=this.holdings.caffeineCards;const e=this.ui.querySelector("#cards-dropdown");let t=e.querySelector("#cards-dropdown-nft");t&&t.remove();let a=[];e:for(const e of this.cardsCollection.nfts){if(e.metadata?.require)for(const t in e.metadata.require)if(this.mergedProperties[t]!=e.metadata.require[t]){a.push(e.assetId);continue e}for(const t of this.selectedCards)if(t.metadata?.properties){for(const s in t.metadata.properties)if(e.metadata.properties[s]){a.push(e.assetId);continue e}}else console.error(new Error(`Error loading properties for card card ${t?.name}`))}t=new d.Z(this.cardsCollection.nfts.filter((e=>e.metadata)),this.didSelectCard.bind(this),"cards-dropdown-nft",a),e.append(t.ui),new window.bootstrap.Dropdown(this.chooseCardButton)}sleep(e){return new Promise((t=>setTimeout(t,e)))}async loadAllCards(){return new Promise((async(e,t)=>{this.chooseCardButton.textContent="Loading...";const{default:s}=await Promise.resolve().then(a.bind(a,5190)),n=s.filter((e=>"caffeineCards"===e.name))[0],r=new i.tf([n]);await r.load(this.algoIndexer);let d=0;for(const t of r.nfts){await this.sleep(10);let a=!1;for(;!a;)try{await t.load(this.algoIndexer),this.chooseCardButton.textContent=`Loading ${d+1}/${r.nfts.length}...`,d++,d===r.nfts.length&&(this.chooseCardButton.textContent="Add Card",e(r)),a=!0}catch(e){console.error(e),await this.sleep(300)}}}))}async didSelectCard(e){e.preventDefault();const t=e.currentTarget.dataset.index;if(!t)return;const a=this.cardsCollection.nfts[t];this.selectedCards.push(a);const s=this.ui.querySelector("#default-card");s&&(s.hidden=!0);const i=document.createElement("div");i.className="col text-center",i.id=`card-${t}`,i.innerHTML=`\n    <img style="width: 80px; height: auto" src="${a.imageUrl}">\n    <p><a href="javascript:void(0);" id="rm-${t}" data-index="${t}">Remove</a></p>\n    `,i.querySelector(`#rm-${t}`).addEventListener("click",this.removeCard.bind(this),!1),this.ui.querySelector("#cards").append(i),this.validate(),await this.loadCards()}async removeCard(e){e.preventDefault();const t=e.currentTarget.dataset.index;if(!t)return;const a=this.cardsCollection.nfts[t];if(console.log(this.selectedCards.map((e=>e.name))),this.selectedCards=this.selectedCards.filter((e=>e.assetId!=a.assetId)),console.log(this.selectedCards.map((e=>e.name))),0===this.selectedCards.length){const e=this.ui.querySelector("#default-card");e&&(e.hidden=!1)}this.validate(),await this.loadCards(),this.ui.querySelector(`#card-${t}`).remove()}validate(){let e;this.simulator||(e=this.ui.querySelector("#button-review")),this.selectedBather&&this.selectedCards.length>0?(this.simulator||(e.disabled=!1),this.preview()):this.selectedBather?(this.ui.querySelector("#merged-img").src=this.selectedBather.imageUrl,this.simulator||(e.disabled=!0)):this.simulator||(e.disabled=!0)}review(e){const t=document.createElement("div");t.className="modal",t.tabIndex="-1";let a,s=[];for(const e of this.selectedCards)for(const t in e.metadata.properties)o.duplicateCriteria.includes(t)&&s.push(t);s.length>0&&(a=`&#9888;&#65039; This request contains a modification that can generate a duplicate (${s.join(",")}). If it's the case, the request will be canceled and the cards returned to your wallet.<br>`),t.innerHTML=`\n    <div class="modal-dialog modal-dialog-centered">\n      <div class="modal-content">\n        <div class="modal-header">\n          <h5 class="modal-title">Review Bather modification</h5>\n          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>\n        </div>\n        <div class="modal-body">\n            <div class="text-center mb-3">\n                <img style="width: 320px; height: auto;" id="preview-merged-img">\n            </div>\n\n          <p>\n          Your <strong>${this.selectedBather.name}</strong> will be updated.<br>\n          Your <strong>${this.selectedCards.map((e=>e.name)).join(", ")}</strong> will be burned &#128293;\n          </p>\n\n          <p>You'll get <strong>${11*this.selectedCards.length} $Roar</strong></p>\n            \n          <p>${a||""}&#128337; As the process requires a manual step, update can take up to 24h.<br>\n          &#128236; You will be notified by a zero Algo transaction when the update is complete.</p>\n        </div>\n        <div class="modal-footer">\n          <button type="button" class="button-alt" data-bs-dismiss="modal">Close</button>\n          <button type="button" id="send-button">Send request</button>\n        </div>\n      </div>\n    </div>\n    `,t.querySelector("#preview-merged-img").src=this.mergedImgDataURL;const i=t.querySelector("#send-button");i.currentModal=t,i.addEventListener("click",this.send.bind(this),!1),new window.bootstrap.Modal(t,{}).show()}async preview(){let e;this.simulator||(e=this.ui.querySelector("#button-review"),e.disabled=!0,e.textContent="Generating...");const t=this.ui.querySelector("#merged-img");this.mergedProperties=Object.assign({},this.selectedBather.metadata.properties);for(const e of this.selectedCards)for(const t in e.metadata.properties)this.mergedProperties[t]=e.metadata.properties[t];let a=await(0,n.i)(this.mergedProperties,o,"layers_images");this.simulator&&(a=await this.applyWipOverlay(a)),this.mergedImgDataURL=a.toDataURL("image/png"),t.src=this.mergedImgDataURL,this.simulator||(e.disabled=!1,e.textContent="Review...")}applyWipOverlay(e){return new Promise(((t,a)=>{let s=document.createElement("canvas");s.width=52,s.height=52;var i=s.getContext("2d");let n=new Image;n.onload=()=>{i.drawImage(e,2,2),i.drawImage(n,0,0),t(s)},n.onerror=e=>{a(e)},n.src="assets/wip.png"}))}async send(e){const t=e.currentTarget;t.disabled=!0,t.textContent="Waiting for signature...";const a=await this.algodClient.getTransactionParams().do(),s={evolve:this.selectedBather.assetId},i=(new TextEncoder).encode(JSON.stringify(s));if(this.selectedCards.length>13)return void alert("No more than 14 cards can be used at once.");let n=[];for(const e of this.selectedCards)n.push(r.default.makeAssetTransferTxnWithSuggestedParamsFromObject({from:this.walletConnect.walletAddress,to:this.cardsCollection.collections[0].addresses[0],amount:1,assetIndex:e.assetId,suggestedParams:a,note:i}));n.length>1&&r.default.assignGroupID(n);const d=await this.walletConnect.signTransactions(n),o=t.currentModal;let l;o.innerHTML='\n    <div class="modal-dialog modal-dialog-centered">\n      <div class="modal-content">\n        <div class="modal-header">\n          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>\n        </div>\n        <div class="modal-body ">\n            <div class="text-center mb-3">\n                <img src="assets/grinder.png" style="width: 128px; height: auto;">\n            </div>\n            <div class="text-center mb-3">\n            Sending Caffeine Card to the Grinder...\n            </div>\n        </div>\n      </div>\n    </div>\n    ';try{l=await this.algodClient.sendRawTransaction(d).do(),await r.default.waitForConfirmation(this.algodClient,l.txId,4),o.innerHTML='\n    <div class="modal-dialog modal-dialog-centered">\n      <div class="modal-content">\n        <div class="modal-header">\n          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>\n        </div>\n        <div class="modal-body">\n          <div class="text-center mb-3">\n          <img src="assets/heart-cup.png" width="60"><br><br>\n          We got your card and your evolution request.<br>\n          We\'ll be back to you very soon.\n          </div>\n        </div>\n        <div class="modal-footer">\n          <button type="button" data-bs-dismiss="modal">Close</button>\n        </div>\n      </div>\n    </div>\n    ',o.addEventListener("hidden.bs.modal",(e=>{location.reload()}))}catch(e){o.innerHTML=`\n    <div class="modal-dialog modal-dialog-centered">\n      <div class="modal-content">\n        <div class="modal-header">\n          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>\n        </div>\n        <div class="modal-body">\n          <div class="text-center mb-3">\n          <div class="alert alert-danger" role="alert">${e.message} </div>\n          </div>\n        </div>\n        <div class="modal-footer">\n          <button type="button" data-bs-dismiss="modal">Close</button>\n        </div>\n      </div>\n    </div>\n    `,console.error(e)}}}}}]);