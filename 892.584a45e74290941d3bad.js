"use strict";(self.webpackChunkstudio=self.webpackChunkstudio||[]).push([[892,998],{6998:(e,t,s)=>{s.r(t),s.d(t,{BasePage:()=>a});class a{constructor(e,t,s,a){this.walletConnect=e,this.algodClient=s,this.algoIndexer=a,this.holdings=t}}},6892:(e,t,s)=>{s.r(t),s.d(t,{Browse:()=>o});var a=s(6998),i=s(7304),n=s(5190);class o extends a.BasePage{constructor(...e){super(...arguments),this.collectionName=e[e.length-1],this.title="","caffeineCards"===this.collectionName?this.title="Caffeine Cards":"bathers"===this.collectionName&&(this.title="Bathers"),this.ui=document.createElement("div"),this.ui.innerHTML=`\n    <h1 class="mb-0">${this.title}</h1>\n    <div class="dark-text mb-4">Browse all ${this.title}</div>\n    <div class="row mb-3" id="filters"></div>\n    `,this.collection,this.bathersWithPacks,this.loadAll()}sleep(e){return new Promise((t=>setTimeout(t,e)))}async loadAll(){const e=document.createElement("p");e.textContent=`Loading ${this.title}...`,this.ui.append(e);const t=n.Z.filter((e=>e.name===this.collectionName))[0];if(this.collection=new i.tf([t]),await this.collection.load(this.algoIndexer),"bathers"===this.collectionName){const{loadPacks:e}=await Promise.all([s.e(393),s.e(298)]).then(s.bind(s,5298));try{const t=await e();t&&t.length>0&&(this.bathersWithPacks=t.map((e=>e[0])))}catch(e){console.error(e)}}e.remove(),this.displayList()}displayList(){if(!this.collection.nfts.length){const e=document.createElement("div");return e.innerHTML='<div class="dark-text mb-5">No assets</div>',void this.ui.append(e)}const e=this.ui.querySelector("#filters");e.innerHTML='\n    <div class="col-12 col-md-6">\n      <input type="search" class="form-control custom-form-control" placeholder="Name or asset ID" id="filter-search" style="max-width: 16rem;">\n    </div>\n    ',e.querySelector("#filter-search").addEventListener("search",this.search.bind(this),!1);const t=document.createElement("div");t.className="row row-cols-2 row-cols-md-3 row-cols-lg-4 gy-4 mb-5",this.ui.append(t);let s=new IntersectionObserver(this.loadVisibleNFTs.bind(this),{root:null,rootMargin:"0px",threshold:0}),a=0;for(const e of this.collection.nfts){const i=document.createElement("div");i.id=`nft-${a}`,i.className="col nft-item",i.dataset.i=a;let n="bathers"===this.collectionName?"placeholder-bather":"placeholder-card";if(i.innerHTML=`\n          <div class="list-item h-100 d-flex flex-column">\n              <div class="ratio ratio-1x1 ${n}">\n                <img src="" class="nft-img img-fluid" loading="lazy" hidden>\n              </div>\n              <div class="list-item-text flex-fill d-flex flex-column">\n                  <h4>${e.name}</h4>\n                  <div class="d-flex justify-content-between">\n                      <span class="asset-id">${e.assetId}</span>\n                      ${e.total}\n                  </div>\n                  <div class="mt-3 nft-properties">\n                  </div>\n                  <div class="flex-fill d-flex justify-content-between align-items-end mt-2">\n                        <div class="nft-special"></div>\n                        <div class="dropdown"></div>\n                  </div>\n              </div>\n          </div>\n      `,i.querySelector(".dropdown").innerHTML=`\n          <a href="#" role="button" data-bs-toggle="dropdown" aria-expanded="false">\n          <img src="assets/more.png" class="more">\n          </a>\n          <ul class="dropdown-menu">\n              <li><a class="dropdown-item" href="https://www.nftexplorer.app/asset/${e.assetId}" target="_blank">NFTExplorer</a></li>\n              <li><a class="dropdown-item" href="https://www.randgallery.com/algo-collection/?address=${e.assetId}" target="_blank">RandGallery</a></li>\n              <li><a class="dropdown-item" href="https://algoxnft.com/asset/${e.assetId}" target="_blank">ALGOxNFT</a></li>\n          </ul>\n    `,"bathers"===this.collectionName&&this.bathersWithPacks&&this.bathersWithPacks.includes(e.assetId)){const e=i.querySelector(".nft-special");e.dataset.bsTitle="The pack tied to this Bather has not been opened yet",e.dataset.bsToggle="tooltip",e.dataset.bsCustomClass="custom-tooltip",e.innerHTML='<img src="assets/pack-icon.png">',new window.bootstrap.Tooltip(e)}t.append(i),a++,s.observe(i)}}loadVisibleNFTs(e,t){e.forEach((e=>{if(!e.isIntersecting)return;const t=e.target,s=this.collection.nfts[t.dataset.i];if(s.loading)return;const a="bathers"===this.collectionName;s.load(this.algoIndexer,a).then((()=>{const e=t.querySelector(".nft-img");if(e.src=s.imageUrl,e.hidden=!1,s.handleImageError(e),"caffeineCards"===this.collectionName){let e="";if(s.metadata.properties){for(const t in s.metadata.properties)e+=`<span class="custom-badge">${t}</span> `;e+="<br>"}let a="";if(s.metadata.require){let e=[];for(const t in s.metadata.require)e.push(`<span class="custom-badge light">${t}: ${s.metadata.require[t]}</span>`);a=`<span class="custom-badge dark">Require:</span> ${e.join(" ")}`}t.querySelector(".nft-properties").innerHTML=`${e} ${a}<br>`;const i=t.querySelector(".nft-special");i.innerHTML='&#128293; <span id="burn-count">...</span>',i.dataset.bsTitle="Number of card definitively burned",i.dataset.bsToggle="tooltip",i.dataset.bsCustomClass="custom-tooltip",new window.bootstrap.Tooltip(i),this.algodClient.accountAssetInformation(s.metadata.burn_address,s.assetId).do().then((e=>{i.innerHTML=`&#128293; <span id="burn-count">${e["asset-holding"].amount}</span>`}))}})),s.loading=!0,this.sleep(100)}))}search(e){const t=e.currentTarget.value;if(!t)return void this.ui.querySelectorAll(".nft-item").forEach((e=>{e.hidden=!1}));let s=t.split(" ");s=s.map((e=>e.trim().toLowerCase())),s=s.filter((e=>e));let a=0;for(const e of this.collection.nfts){let t=!1;e:for(const a of s){if(e.name.toLowerCase().includes(a)||e.assetId==a){t=!0;break}if(e.metadata&&e.metadata.properties)for(const s in e.metadata.properties)if(s.toLowerCase().includes(a)||e.metadata.properties[s].toLowerCase().includes(a)){t=!0;break e}}this.ui.querySelector(`#nft-${a}`).hidden=!t,a++}}}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,