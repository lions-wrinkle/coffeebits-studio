"use strict";(self.webpackChunkstudio=self.webpackChunkstudio||[]).push([[810],{6810:(t,a,s)=>{s.d(a,{c:()=>g,a:()=>c});var e=s(194),i=s(1466);const{GIFEncoder:h,quantize:o,applyPalette:r}=i;class n{constructor(t,a,s=1){this.width=t,this.height=a,this.scale=s,this.gifEncoder=h()}addFrame(t,a=300){let{data:s,width:i,height:h}=t.getImageData(0,0,this.width,this.height);const n=o(s,256);if(1!=this.scale){const a=(0,e.vL)(Math.round(this.width*this.scale),Math.round(this.height*this.scale)),o=a.getContext("2d");o.imageSmoothingEnabled=!1,o.scale(this.scale,this.scale),o.drawImage(t.canvas,0,0);const r=o.getImageData(0,0,a.width,a.height);s=r.data,i=r.width,h=r.height}const d=r(s,n);this.gifEncoder.writeFrame(d,i,h,{palette:n,delay:a})}finish(){this.gifEncoder.finish()}getOutput(){return this.gifEncoder.bytes()}}var d=s(7644);class g{constructor(){this.width=48,this.height=48,this.scale=8,this.layersData,this.types=["chatty","shower","sunrise","neon_glitch"]}async drawLayers(t,a,s){this.layersData=await(0,d.i)(t,a,s,!0)}async draw_chatty(){const t=new n(this.width,this.height,this.scale),a=(0,e.vL)(this.width,this.height).getContext("2d"),s=(0,e.vL)(this.width,this.height),i=s.getContext("2d"),h=["./graphic-tools-assets/basic-1.png","./graphic-tools-assets/basic-2.png","./graphic-tools-assets/basic-3.png","./graphic-tools-assets/basic-4.png","./graphic-tools-assets/basic-5.png","./graphic-tools-assets/basic-6.png"];let o=0;for(const r of h){for(const t of this.layersData){const e=t.imageData;i.clearRect(0,0,this.width,this.height),i.putImageData(e,0,0),a.globalCompositeOperation=t.composite,a.save(),o%2==1&&["body","reflection","mouth","beard","clothes","minicup","eyes","head","power","glow"].includes(t.name)&&(a.translate(this.width,0),a.scale(-1,1)),a.drawImage(s,0,0),a.restore()}const h=await(0,e.po)(r);a.drawImage(h,0,0),t.addFrame(a,700),o++}return t.finish(),t.getOutput()}async draw_shower(){const t=new n(this.width,this.height,this.scale),a=(0,e.vL)(this.width,this.height).getContext("2d"),s=(0,e.vL)(this.width,this.height),i=s.getContext("2d"),h=["./graphic-tools-assets/coffee-shower-1.png","./graphic-tools-assets/coffee-shower-2.png","./graphic-tools-assets/coffee-shower-3.png","./graphic-tools-assets/coffee-shower-4.png"];for(const o of h){let h=!1;for(const t of this.layersData){const r=t.imageData;if(i.clearRect(0,0,this.width,this.height),i.putImageData(r,0,0),a.globalCompositeOperation=t.composite,a.drawImage(s,0,0),"head"===t.name){const t=await(0,e.po)(o);a.drawImage(t,0,0),h=!0}}if(!h){const t=await(0,e.po)(o);a.drawImage(t,0,0)}t.addFrame(a,100)}return t.finish(),t.getOutput()}async draw_sunrise(){const t=new n(this.width,this.height,this.scale),a=(0,e.vL)(this.width,this.height).getContext("2d"),s=(0,e.vL)(this.width,this.height),i=s.getContext("2d"),h=[{background:"./graphic-tools-assets/sunrise-1.png",foreground:null,duration:100},{background:"./graphic-tools-assets/sunrise-2.png",foreground:null,duration:100},{background:"./graphic-tools-assets/sunrise-3.png",foreground:"./graphic-tools-assets/sunrise-text-1.png",duration:100},{background:"./graphic-tools-assets/sunrise-4.png",foreground:"./graphic-tools-assets/sunrise-text-2.png",duration:100},{background:"./graphic-tools-assets/sunrise-5.png",foreground:"./graphic-tools-assets/sunrise-text-3.png",duration:100},{background:"./graphic-tools-assets/sunrise-6.png",foreground:"./graphic-tools-assets/sunrise-text-4.png",duration:1200},{background:"./graphic-tools-assets/sunrise-7.png",foreground:"./graphic-tools-assets/sunrise-text-4.png",duration:100},{background:"./graphic-tools-assets/sunrise-8.png",foreground:"./graphic-tools-assets/sunrise-text-5.png",duration:100},{background:"./graphic-tools-assets/sunrise-9.png",foreground:null,duration:100}];for(const o of h){for(const t of this.layersData){const h=t.imageData;if(i.clearRect(0,0,this.width,this.height),i.putImageData(h,0,0),a.globalCompositeOperation=t.composite,a.drawImage(s,0,0),"room"===t.name){const t=await(0,e.po)(o.background);a.drawImage(t,0,0)}}if(o.foreground){const t=await(0,e.po)(o.foreground);a.drawImage(t,0,0)}t.addFrame(a,o.duration)}return t.finish(),t.getOutput()}glitch(t,a,s=!1){const e=t.data.length/4;if(s)return t;let i=a.createImageData(this.width,this.height);i.data.set(t.data);for(let a=0;a<3;a++){let a=Math.floor(Math.random()*e),s=Math.round(Math.random())?"add":"remove";if("add"===s)for(let s=a;s<e;s++)i.data[4*s+0]=t.data[4*(s-1)+0],i.data[4*s+1]=t.data[4*(s-1)+1],i.data[4*s+2]=t.data[4*(s-1)+2],i.data[4*s+3]=t.data[4*(s-1)+3];else if("remove"===s)for(let s=a;s<e;s++)i.data[4*s+0]=t.data[4*(s+1)+0],i.data[4*s+1]=t.data[4*(s+1)+1],i.data[4*s+2]=t.data[4*(s+1)+2],i.data[4*s+3]=t.data[4*(s+1)+3]}return i}async glitchedImage(t,a){const s=(0,e.vL)(this.width,this.height),i=s.getContext("2d"),h=await(0,e.po)(t);i.clearRect(0,0,this.width,this.height),i.drawImage(h,0,0);const o=this.glitch(i.getImageData(0,0,this.width,this.height),i,a);return i.putImageData(o,0,0),s}async draw_neon_glitch(){const t=new n(this.width,this.height,this.scale),a=(0,e.vL)(this.width,this.height).getContext("2d"),s=(0,e.vL)(this.width,this.height),i=s.getContext("2d"),h="./graphic-tools-assets/neon-glitch-g.png",o="./graphic-tools-assets/neon-glitch-m.png";for(let e=0;e<25;e++){let r=!1;(e>=9&&e<=12||e>=20&&e<=21)&&(r=!0);const n="foreground",d="background";for(const t of this.layersData){const e=this.glitch(t.imageData,i,!r);if(i.clearRect(0,0,this.width,this.height),i.putImageData(e,0,0),a.globalCompositeOperation=t.composite,a.drawImage(s,0,0),"room"===t.name){if("background"===n){const t=await this.glitchedImage(h,!r);a.drawImage(t,0,0)}if("background"===d){const t=await this.glitchedImage(o,!r);a.drawImage(t,0,0)}}}if("foreground"===n){const t=await this.glitchedImage(h,!r);a.drawImage(t,0,0)}if("foreground"===d){const t=await this.glitchedImage(o,!r);a.drawImage(t,0,0)}t.addFrame(a,100)}return t.finish(),t.getOutput()}}class c{constructor(t,a,s){this.properties=t,this.layers=a,this.layersFolder=s,this.width=48,this.height=48,this.scale=8,this.layersData}async drawLayers(){this.layersData=await(0,d.i)(this.properties,this.layers,this.layersFolder,!0)}upscale(t,a){const s=(0,e.vL)(this.width*a,this.height*a),i=s.getContext("2d");return i.imageSmoothingEnabled=!1,i.scale(this.scale,this.scale),i.drawImage(t,0,0,this.width,this.height),s}stretchNeck(t,a,s,e){let i=t.createImageData(this.width,this.height+e);for(let t=-e;t<this.height+e;t++)for(let h=0;h<this.width;h++){const o=4*((t+e)*this.width+h);if(t<21-s){const e=4*((t+s)*this.width+h);i.data[o+0]=a.data[e+0],i.data[o+1]=a.data[e+1],i.data[o+2]=a.data[e+2],i.data[o+3]=a.data[e+3]}else if(t<=21&&t>=21-s){const t=4*(21*this.width+h);i.data[o+0]=a.data[t+0],i.data[o+1]=a.data[t+1],i.data[o+2]=a.data[t+2],i.data[o+3]=a.data[t+3]}else{const s=4*(t*this.width+h);i.data[o+0]=a.data[s+0],i.data[o+1]=a.data[s+1],i.data[o+2]=a.data[s+2],i.data[o+3]=a.data[s+3]}}return i}async drawLong(t=9,a=!0){const s=(0,e.vL)(this.width,this.height).getContext("2d"),i=(0,e.vL)(this.width,this.height),h=i.getContext("2d");let o=!1;for(const a of this.layersData){s.save();let e=a.imageData;["body","power","glow"].includes(a.name)?e=this.stretchNeck(s,e,t,5):(!["room","decoration"].includes(a.name)||"room"===a.name&&o)&&s.translate(0,5),"room"===a.name&&(o=!0),["mouth","beard","eyes","head"].includes(a.name)&&s.translate(0,-t),h.clearRect(0,0,this.width,this.height),h.putImageData(e,0,0),s.globalCompositeOperation=a.composite,s.drawImage(i,0,0),s.restore()}if(a){const a=await(0,e.po)("./graphic-tools-assets/basic-3.png");s.drawImage(a,1,7-t)}return s}async drawLongPNG(t=10,a=!1){await this.drawLayers();const s=await this.drawLong(t,a);return this.upscale(s.canvas,this.scale)}async drawLongGif(t=10,a=!1){const s=new n(this.width,this.height,this.scale);for(let e=0;e<2*t;e++){await this.drawLayers();let i=e;e>t&&(i=t-(e-t));const h=await this.drawLong(i,a);s.addFrame(h,70)}return s.finish(),s.getOutput()}}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,