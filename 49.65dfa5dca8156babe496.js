"use strict";(self.webpackChunkstudio=self.webpackChunkstudio||[]).push([[49,998],{6998:(e,t,s)=>{s.r(t),s.d(t,{BasePage:()=>a});class a{constructor(e,t,s,a){this.walletConnect=e,this.algodClient=s,this.algoIndexer=a,this.holdings=t}}},1049:(e,t,s)=>{s.r(t),s.d(t,{Wallet:()=>n});var a=s(6998);class n extends a.BasePage{constructor(){super(...arguments),this.ui=document.createElement("div"),this.ui.innerHTML="\n    <h1>Wallet</h1>\n\n    ",this.displayHoldings()}async displayHoldings(){if(this.holdings)for(const e in this.holdings){let t;if("bathers"===e){const{loadPacks:e}=await Promise.all([s.e(393),s.e(298)]).then(s.bind(s,5298));try{const s=await e();s&&s.length>0&&(t=s.map((e=>e[0])))}catch(e){console.error(e)}}const a=this.holdings[e],n=document.createElement("h2");if(n.textContent="My "+a.collections[0].displayName,this.ui.append(n),!a.nfts.length){const e=document.createElement("div");e.innerHTML='<div class="dark-text mb-5">No assets</div>',this.ui.append(e);continue}const i=document.createElement("div");i.className="row row-cols-2 row-cols-md-3 row-cols-lg-4 gy-4 mb-5";for(const s of a.nfts){const a=document.createElement("div");a.id=`nft-${s.assetId}`,a.className="col",s.amount>1&&s.amount;let n="";if("bathers"===e&&(n=`<div class="me-2"><a href="?grinder&bather=${s.assetId}" data-page-link="grinder&bather=${s.assetId}" title="Open in Grinder"><img src="assets/grinder-icon.png" width="32"></a></div>`),"caffeineCards"!=e){if(a.innerHTML=`\n                <div class="list-item h-100 d-flex flex-column">\n                    <img src="${s.imageUrl}" class="nft-img img-fluid" loading="lazy">\n                    <div class="list-item-text flex-fill d-flex flex-column">\n\n                        <div>\n                              <h4>${s.name}</h4>\n                              <span class="asset-id">${s.assetId}</span>\n                        </div>\n                     \n                        <div class="flex-fill d-flex flex-row justify-content-between align-items-end">\n\n                            <div class="d-flex align-items-end" id="left">\n                              \n                            </div>\n\n                            <div class="d-flex align-items-end">\n                              ${n}\n                              <div class="dropdown inline"></div>\n                            </div>\n                            \n                        </div>\n                    </div>\n\n                </div>\n            `,s.metadata.pop_battle_wins&&s.metadata.pop_battle_wins.length>0)for(const e of s.metadata.pop_battle_wins){let t,s;1===e.rank?(t="pop-battle-icon-1st.png",s="1st"):2===e.rank?(t="pop-battle-icon-2nd.png",s="2nd"):3===e.rank&&(t="pop-battle-icon-3rd.png",s="3rd");const n=document.createElement("div");n.dataset.bsTitle=`Pop Battle Winner (${s})`,n.dataset.bsToggle="tooltip",n.dataset.bsCustomClass="custom-tooltip",n.innerHTML=`<img src="assets/${t}" width="32" height="32">`,n.className="me-1",a.querySelector("#left").append(n),new window.bootstrap.Tooltip(n)}if(t&&t.includes(s.assetId)){const e=document.createElement("a");e.href="?packs",e.dataset.link="packs",e.className="d-inline-block",e.dataset.bsTitle="The pack tied to this Bather has not been opened yet.",e.dataset.bsToggle="tooltip",e.dataset.bsCustomClass="custom-tooltip",e.innerHTML='<img src="assets/pack-icon.png">',a.querySelector("#left").append(e),new window.bootstrap.Tooltip(e)}}else{let e="",t="";if(s.metadata||(t="⚠︎",e+="⚠︎"),s.metadata?.properties){for(const t in s.metadata.properties)e+=`<span class="custom-badge">${t}</span> `;e+="<br>"}if(s.metadata?.require){let e=[];for(const t in s.metadata.require)e.push(`<span class="custom-badge light">${t}: ${s.metadata.require[t]}</span>`);t=`<span class="custom-badge dark">Require:</span> ${e.join(" ")}`}a.innerHTML=`\n                <div class="list-item h-100 d-flex flex-column">\n                    <img src="${s.imageUrl}" class="nft-img img-fluid" loading="lazy">\n                    <div class="list-item-text flex-fill d-flex flex-column">\n                        <h4>${s.name}</h4>\n                        <div class="d-flex justify-content-between">\n                            <span class="asset-id">${s.assetId}</span>\n                            ${s.amount}\n                        </div>\n                        <div class="mt-3">\n                              ${e} ${t}<br>\n                        </div>\n                        <div class="flex-fill d-flex justify-content-end align-items-end mt-2">\n                              <div class="dropdown"></div>\n                        </div>\n                    </div>\n                </div>\n\n                \n            `}a.querySelector(".dropdown").innerHTML=`\n                <a href="#" role="button" data-bs-toggle="dropdown" aria-expanded="false">\n                <img src="assets/more.png" class="more">\n                </a>\n                <ul class="dropdown-menu">\n                    <li><a class="dropdown-item" href="https://www.nftexplorer.app/asset/${s.assetId}" target="_blank">NFTExplorer</a></li>\n                    <li><a class="dropdown-item" href="https://www.asalytic.app/nft/${s.assetId}" target="_blank">Asalytic</a></li>\n                    <li><a class="dropdown-item" href="https://www.randgallery.com/algo-collection/?address=${s.assetId}" target="_blank">RandGallery</a></li>\n                    <li><a class="dropdown-item" href="https://algoxnft.com/asset/${s.assetId}" target="_blank">ALGOxNFT</a></li>\n                    <li><a class="dropdown-item" href="https://shufl.app/detail/${s.assetId}" target="_blank">Shufl</a></li>\n                    <li><a class="dropdown-item" href="https://exa.market/asset/${s.assetId}" target="_blank">exa.market</a></li>\n                </ul>\n          `,i.append(a),s.handleImageError(a.querySelector(".nft-img"))}this.ui.append(i)}window.enableNavigationLinks()}}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,