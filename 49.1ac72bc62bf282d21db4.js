"use strict";(self.webpackChunkstudio=self.webpackChunkstudio||[]).push([[49,998],{6998:(e,t,s)=>{s.r(t),s.d(t,{BasePage:()=>n});class n{constructor(e,t,s,n){this.walletConnect=e,this.algodClient=s,this.algoIndexer=n,this.holdings=t}}},1049:(e,t,s)=>{s.r(t),s.d(t,{Wallet:()=>a});var n=s(6998);class a extends n.BasePage{constructor(){super(...arguments),this.ui=document.createElement("div"),this.ui.innerHTML="\n    <h1>Wallet</h1>\n\n    ",this.displayHoldings()}displayHoldings(){if(this.holdings)for(const e in this.holdings){const t=this.holdings[e],s=document.createElement("h2");if(s.textContent="My "+t.collections[0].displayName,this.ui.append(s),!t.nfts.length){const e=document.createElement("div");e.innerHTML='<div class="dark-text mb-5">No assets</div>',this.ui.append(e);continue}const n=document.createElement("div");n.className="row row-cols-2 row-cols-md-3 row-cols-lg-4 gy-4 mb-5";for(const s of t.nfts){const t=document.createElement("div");t.id=`nft-${s.assetId}`,t.className="col",s.amount>1&&s.amount;let a="";if("bathers"===e&&(a=`<div class="me-2"><a href="?grinder&bather=${s.assetId}" data-page-link="grinder&bather=${s.assetId}" title="Open in Grinder"><img src="assets/grinder-icon.png" width="32"></a></div>`),"caffeineCards"!=e){if(t.innerHTML=`\n                <div class="list-item h-100 d-flex flex-column">\n                    <img src="${s.imageUrl}" class="nft-img img-fluid" loading="lazy">\n                    <div class="list-item-text flex-fill d-flex flex-column">\n\n                        <div>\n                              <h4>${s.name}</h4>\n                              <span class="asset-id">${s.assetId}</span>\n                        </div>\n                     \n                        <div class="flex-fill d-flex flex-row justify-content-between align-items-end">\n\n                            <div class="d-flex align-items-end" id="left">\n                              \n                            </div>\n\n                            <div class="d-flex align-items-end">\n                              ${a}\n                              <div class="dropdown inline"></div>\n                            </div>\n                            \n                        </div>\n                    </div>\n\n                </div>\n            `,s.metadata.pop_battle_wins&&s.metadata.pop_battle_wins.length>0)for(const e of s.metadata.pop_battle_wins){let s,n;1===e.rank?(s="pop-battle-icon-1st.png",n="1st"):2===e.rank?(s="pop-battle-icon-2nd.png",n="2nd"):3===e.rank&&(s="pop-battle-icon-3rd.png",n="3rd");const a=document.createElement("div");a.dataset.bsTitle=`Pop Battle Winner (${n})`,a.dataset.bsToggle="tooltip",a.dataset.bsCustomClass="custom-tooltip",a.innerHTML=`<img src="assets/${s}" width="32" height="32">`,a.className="me-1",t.querySelector("#left").append(a),new window.bootstrap.Tooltip(a)}}else{let e="",n="";if(s.metadata||(n="⚠︎",e+="⚠︎"),s.metadata?.properties){for(const t in s.metadata.properties)e+=`<span class="custom-badge">${t}</span> `;e+="<br>"}if(s.metadata?.require){let e=[];for(const t in s.metadata.require)e.push(`<span class="custom-badge light">${t}: ${s.metadata.require[t]}</span>`);n=`<span class="custom-badge dark">Require:</span> ${e.join(" ")}`}t.innerHTML=`\n                <div class="list-item h-100 d-flex flex-column">\n                    <img src="${s.imageUrl}" class="nft-img img-fluid" loading="lazy">\n                    <div class="list-item-text flex-fill d-flex flex-column">\n                        <h4>${s.name}</h4>\n                        <div class="d-flex justify-content-between">\n                            <span class="asset-id">${s.assetId}</span>\n                            ${s.amount}\n                        </div>\n                        <div class="mt-3">\n                              ${e} ${n}<br>\n                        </div>\n                        <div class="flex-fill d-flex justify-content-end align-items-end mt-2">\n                              <div class="dropdown"></div>\n                        </div>\n                    </div>\n                </div>\n\n                \n            `}t.querySelector(".dropdown").innerHTML=`\n                <a href="#" role="button" data-bs-toggle="dropdown" aria-expanded="false">\n                <img src="assets/more.png" class="more">\n                </a>\n                <ul class="dropdown-menu">\n                    <li><a class="dropdown-item" href="https://www.nftexplorer.app/asset/${s.assetId}" target="_blank">NFTExplorer</a></li>\n                    <li><a class="dropdown-item" href="https://www.asalytic.app/nft/${s.assetId}" target="_blank">Asalytic</a></li>\n                    <li><a class="dropdown-item" href="https://www.randgallery.com/algo-collection/?address=${s.assetId}" target="_blank">RandGallery</a></li>\n                    <li><a class="dropdown-item" href="https://algoxnft.com/asset/${s.assetId}" target="_blank">ALGOxNFT</a></li>\n                    <li><a class="dropdown-item" href="https://shufl.app/detail/${s.assetId}" target="_blank">Shufl</a></li>\n                    <li><a class="dropdown-item" href="https://exa.market/asset/${s.assetId}" target="_blank">exa.market</a></li>\n                </ul>\n          `,n.append(t),s.handleImageError(t.querySelector(".nft-img"))}this.ui.append(n)}}}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,