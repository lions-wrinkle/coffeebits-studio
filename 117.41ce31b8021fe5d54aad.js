"use strict";(self.webpackChunkstudio=self.webpackChunkstudio||[]).push([[117],{3333:(e,t,n)=>{n.r(t),n.d(t,{GoodMorning:()=>a});var i=n(6998),s=n(6810),o=n(2871),l=n(4714);class a extends i.BasePage{constructor(){super(...arguments),this.ui=document.createElement("div"),this.ui.innerHTML='\n        <h1>Good Morning Generator</h1>\n        <p class="dark-text">Generate GM GIFs featuring your Bathers</p>\n\n        <div class="d-sm-flex flew-row" style="background-color: var(--background-dark);">\n\n            <div class="d-flex flex-column p-3 text-center justify-content-between">\n\n                <div>\n                    <img src="assets/default.png" class="mb-2 ms-auto me-auto" id="club-img" style="width: 200px; height: auto">\n\n                    <div class="dropdown mb-3" id="bath-club-dropdown">\n                        <button class="dropdown-toggle button-alt" type="button" data-bs-toggle="dropdown"\n                            aria-expanded="false">\n                            Choose Bather\n                        </button>\n\n                    </div>\n\n                    <select class="form-select mb-3" aria-label="Default select example" id="select-filter">\n                        <option value="" selected>Select filter</option>\n                        <option value="chatty">Chatty</option>\n                        <option value="shower">Coffee Shower</option>\n                        <option value="neon_glitch">Neon glitch</option>\n                    </select>\n                </div>\n                \n                <button id="button-download" disabled>Download gif</button>\n\n            </div>\n\n            <div class="d-flex flex-column flex-fill p-3 text-center">\n\n                <img src="assets/default.png" class="w-100 m-auto img-fluid" style="max-width: 384px;" id="merged-img">\n\n            </div>\n\n        </div>',this.bathersCollection,this.selectedBather,this.selectedFilter,this.load()}async load(){await this.loadBathers(),this.ui.querySelector("#select-filter").addEventListener("change",this.didSelectFilter.bind(this),!1),this.ui.querySelector("#button-download").addEventListener("click",this.downloadGif.bind(this),!1)}async loadBathers(){this.bathersCollection=this.holdings.bathers;const e=this.ui.querySelector("#bath-club-dropdown");let t=e.querySelector(".dropdown-menu");t&&t.remove(),t=new o.Z(this.bathersCollection.nfts,this.didSelectBather.bind(this)),e.append(t.ui)}didSelectBather(e){const t=e.currentTarget.dataset.index;if(!t)return;const n=this.bathersCollection.nfts[t];this.selectedBather=n,this.ui.querySelector("#club-img").src=n.imageUrl,this.generateGif(),e.preventDefault()}didSelectFilter(e){this.selectedFilter=e.currentTarget.value,this.selectedFilter&&(this.generateGif(),e.preventDefault())}async generateGif(){if(this.selectedFilter&&this.selectedBather){const e=this.ui.querySelector("#button-download");e.disabled=!0,e.textContent="Generating GIF...";const t=this.ui.querySelector("#merged-img");t.src="assets/default.png";const n=this.selectedBather.metadata.properties,i=new s.c;await i.drawLayers(n,l,"./layers_images");const o=await i[`draw_${this.selectedFilter}`]();t.src=URL.createObjectURL(new Blob([o.buffer],{type:"image/gif"})),e.disabled=!1,e.textContent="Download GIF"}}downloadGif(){const e=this.ui.querySelector("#merged-img"),t=document.createElement("a");t.href=e.src,t.download="good-morning.gif",t.click()}}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTE3LjJiYzNhMDU0NmY5MDdlNWY4ZjMzLmpzIiwibWFwcGluZ3MiOiI2S0FNTyxNQUFNQSxVQUFvQixFQUFBQyxTQUMvQkMsY0FDRUMsU0FBU0MsV0FFVEMsS0FBS0MsR0FBS0MsU0FBU0MsY0FBYyxPQUNqQ0gsS0FBS0MsR0FBR0csVUFBWSxra0RBdUNwQkosS0FBS0ssa0JBRUxMLEtBQUtNLGVBQ0xOLEtBQUtPLGVBRUxQLEtBQUtRLE1BQ1AsQ0FFQUMsbUJBQ1FULEtBQUtVLGNBRVhWLEtBQUtDLEdBQ0ZVLGNBQWMsa0JBQ2RDLGlCQUFpQixTQUFVWixLQUFLYSxnQkFBZ0JDLEtBQUtkLE9BQU8sR0FFL0RBLEtBQUtDLEdBQ0ZVLGNBQWMsb0JBQ2RDLGlCQUFpQixRQUFTWixLQUFLZSxZQUFZRCxLQUFLZCxPQUFPLEVBQzVELENBRUFTLG9CQUVFVCxLQUFLSyxrQkFBb0JMLEtBQUtnQixTQUFrQixRQUVoRCxNQUFNQyxFQUFjakIsS0FBS0MsR0FBR1UsY0FBYyx1QkFFMUMsSUFBSU8sRUFBV0QsRUFBWU4sY0FBYyxrQkFDckNPLEdBQ0ZBLEVBQVNDLFNBR1hELEVBQVcsSUFBSSxJQUNibEIsS0FBS0ssa0JBQWtCZSxLQUN2QnBCLEtBQUtxQixnQkFBZ0JQLEtBQUtkLE9BRzVCaUIsRUFBWUssT0FBT0osRUFBU2pCLEdBb0M5QixDQUVBb0IsZ0JBQWdCRSxHQUNkLE1BQU1DLEVBQVdELEVBQU1FLGNBQWNDLFFBQVFDLE1BRTdDLElBQUtILEVBQ0gsT0FHRixNQUFNSSxFQUFNNUIsS0FBS0ssa0JBQWtCZSxLQUFLSSxHQUN4Q3hCLEtBQUtNLGVBQWlCc0IsRUFHSjVCLEtBQUtDLEdBQUdVLGNBQWMsYUFDOUJrQixJQUFNRCxFQUFJRSxTQUVwQjlCLEtBQUsrQixjQUVMUixFQUFNUyxnQkFDUixDQUVBbkIsZ0JBQWdCVSxHQUNkdkIsS0FBS08sZUFBaUJnQixFQUFNRSxjQUFjUSxNQUVyQ2pDLEtBQUtPLGlCQUlWUCxLQUFLK0IsY0FFTFIsRUFBTVMsaUJBQ1IsQ0FFQXZCLG9CQUNFLEdBQUlULEtBQUtPLGdCQUFrQlAsS0FBS00sZUFBZ0IsQ0FDOUMsTUFBTTRCLEVBQWlCbEMsS0FBS0MsR0FBR1UsY0FBYyxvQkFDN0N1QixFQUFlQyxVQUFXLEVBQzFCRCxFQUFlRSxZQUFjLG9CQUU3QixNQUFNQyxFQUFNckMsS0FBS0MsR0FBR1UsY0FBYyxlQUNsQzBCLEVBQUlSLElBQU0scUJBRVYsTUFBTVMsRUFBYXRDLEtBQUtNLGVBQWVpQyxTQUFTRCxXQUUxQ0UsRUFBYyxJQUFJLFVBR2xCQSxFQUFZQyxXQUFXSCxFQUFZLEVBQVEsbUJBRWpELE1BQU1JLFFBQWdCRixFQUFZLFFBQVF4QyxLQUFLTyxvQkFJL0M4QixFQUFJUixJQUFNYyxJQUFJQyxnQkFDWixJQUFJQyxLQUFLLENBQUNILEVBQVFJLFFBQVMsQ0FBRUMsS0FBTSxlQUdyQ2IsRUFBZUMsVUFBVyxFQUMxQkQsRUFBZUUsWUFBYyxjQUMvQixDQUNGLENBRUFyQixjQUNFLE1BQU1zQixFQUFNckMsS0FBS0MsR0FBR1UsY0FBYyxlQUU1QnFDLEVBQUk5QyxTQUFTQyxjQUFjLEtBQ2pDNkMsRUFBRUMsS0FBT1osRUFBSVIsSUFDYm1CLEVBQUVFLFNBQVcsbUJBQ2JGLEVBQUVHLE9BQ0osRSIsInNvdXJjZXMiOlsid2VicGFjazovL3N0dWRpby8uL3NyYy9wYWdlcy9nb29kLW1vcm5pbmcuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQmFzZVBhZ2UgfSBmcm9tIFwiLi9iYXNlLmpzXCI7XG5pbXBvcnQgeyBHbUdlbmVyYXRvciB9IGZyb20gXCJncmFwaGljLXRvb2xzXCI7XG5pbXBvcnQgRHJvcGRvd25OZnRzIGZyb20gXCIuLi9jb21tb24vZHJvcGRvd24tbmZ0cy5qc1wiO1xuXG5pbXBvcnQgbGF5ZXJzIGZyb20gXCIuLi8uLi8uLi9iYXRoLWNsdWIvbGF5ZXJzLmpzb25cIjtcblxuZXhwb3J0IGNsYXNzIEdvb2RNb3JuaW5nIGV4dGVuZHMgQmFzZVBhZ2Uge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuXG4gICAgdGhpcy51aSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgdGhpcy51aS5pbm5lckhUTUwgPSBgXG4gICAgICAgIDxoMT5Hb29kIE1vcm5pbmcgR2VuZXJhdG9yPC9oMT5cbiAgICAgICAgPHAgY2xhc3M9XCJkYXJrLXRleHRcIj5HZW5lcmF0ZSBHTSBHSUZzIGZlYXR1cmluZyB5b3VyIEJhdGhlcnM8L3A+XG5cbiAgICAgICAgPGRpdiBjbGFzcz1cImQtc20tZmxleCBmbGV3LXJvd1wiIHN0eWxlPVwiYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tYmFja2dyb3VuZC1kYXJrKTtcIj5cblxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImQtZmxleCBmbGV4LWNvbHVtbiBwLTMgdGV4dC1jZW50ZXIganVzdGlmeS1jb250ZW50LWJldHdlZW5cIj5cblxuICAgICAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPVwiYXNzZXRzL2RlZmF1bHQucG5nXCIgY2xhc3M9XCJtYi0yIG1zLWF1dG8gbWUtYXV0b1wiIGlkPVwiY2x1Yi1pbWdcIiBzdHlsZT1cIndpZHRoOiAyMDBweDsgaGVpZ2h0OiBhdXRvXCI+XG5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImRyb3Bkb3duIG1iLTNcIiBpZD1cImJhdGgtY2x1Yi1kcm9wZG93blwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cImRyb3Bkb3duLXRvZ2dsZSBidXR0b24tYWx0XCIgdHlwZT1cImJ1dHRvblwiIGRhdGEtYnMtdG9nZ2xlPVwiZHJvcGRvd25cIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyaWEtZXhwYW5kZWQ9XCJmYWxzZVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIENob29zZSBCYXRoZXJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxuXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgICAgICAgICAgIDxzZWxlY3QgY2xhc3M9XCJmb3JtLXNlbGVjdCBtYi0zXCIgYXJpYS1sYWJlbD1cIkRlZmF1bHQgc2VsZWN0IGV4YW1wbGVcIiBpZD1cInNlbGVjdC1maWx0ZXJcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCJcIiBzZWxlY3RlZD5TZWxlY3QgZmlsdGVyPC9vcHRpb24+XG4gICAgICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPVwiY2hhdHR5XCI+Q2hhdHR5PC9vcHRpb24+XG4gICAgICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPVwic2hvd2VyXCI+Q29mZmVlIFNob3dlcjwvb3B0aW9uPlxuICAgICAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cIm5lb25fZ2xpdGNoXCI+TmVvbiBnbGl0Y2g8L29wdGlvbj5cbiAgICAgICAgICAgICAgICAgICAgPC9zZWxlY3Q+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgPGJ1dHRvbiBpZD1cImJ1dHRvbi1kb3dubG9hZFwiIGRpc2FibGVkPkRvd25sb2FkIGdpZjwvYnV0dG9uPlxuXG4gICAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImQtZmxleCBmbGV4LWNvbHVtbiBmbGV4LWZpbGwgcC0zIHRleHQtY2VudGVyXCI+XG5cbiAgICAgICAgICAgICAgICA8aW1nIHNyYz1cImFzc2V0cy9kZWZhdWx0LnBuZ1wiIGNsYXNzPVwidy0xMDAgbS1hdXRvIGltZy1mbHVpZFwiIHN0eWxlPVwibWF4LXdpZHRoOiAzODRweDtcIiBpZD1cIm1lcmdlZC1pbWdcIj5cblxuICAgICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgPC9kaXY+YDtcblxuICAgIHRoaXMuYmF0aGVyc0NvbGxlY3Rpb247XG5cbiAgICB0aGlzLnNlbGVjdGVkQmF0aGVyO1xuICAgIHRoaXMuc2VsZWN0ZWRGaWx0ZXI7XG5cbiAgICB0aGlzLmxvYWQoKTtcbiAgfVxuXG4gIGFzeW5jIGxvYWQoKSB7XG4gICAgYXdhaXQgdGhpcy5sb2FkQmF0aGVycygpO1xuXG4gICAgdGhpcy51aVxuICAgICAgLnF1ZXJ5U2VsZWN0b3IoXCIjc2VsZWN0LWZpbHRlclwiKVxuICAgICAgLmFkZEV2ZW50TGlzdGVuZXIoXCJjaGFuZ2VcIiwgdGhpcy5kaWRTZWxlY3RGaWx0ZXIuYmluZCh0aGlzKSwgZmFsc2UpO1xuXG4gICAgdGhpcy51aVxuICAgICAgLnF1ZXJ5U2VsZWN0b3IoXCIjYnV0dG9uLWRvd25sb2FkXCIpXG4gICAgICAuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIHRoaXMuZG93bmxvYWRHaWYuYmluZCh0aGlzKSwgZmFsc2UpO1xuICB9XG5cbiAgYXN5bmMgbG9hZEJhdGhlcnMoKSB7XG5cbiAgICB0aGlzLmJhdGhlcnNDb2xsZWN0aW9uID0gdGhpcy5ob2xkaW5nc1tcImJhdGhlcnNcIl07XG5cbiAgICBjb25zdCBkcm9wZG93bkRpdiA9IHRoaXMudWkucXVlcnlTZWxlY3RvcihcIiNiYXRoLWNsdWItZHJvcGRvd25cIik7XG5cbiAgICBsZXQgZHJvcGRvd24gPSBkcm9wZG93bkRpdi5xdWVyeVNlbGVjdG9yKFwiLmRyb3Bkb3duLW1lbnVcIik7XG4gICAgaWYgKGRyb3Bkb3duKSB7XG4gICAgICBkcm9wZG93bi5yZW1vdmUoKTtcbiAgICB9XG5cbiAgICBkcm9wZG93biA9IG5ldyBEcm9wZG93bk5mdHMoXG4gICAgICB0aGlzLmJhdGhlcnNDb2xsZWN0aW9uLm5mdHMsXG4gICAgICB0aGlzLmRpZFNlbGVjdEJhdGhlci5iaW5kKHRoaXMpXG4gICAgKTtcblxuICAgIGRyb3Bkb3duRGl2LmFwcGVuZChkcm9wZG93bi51aSk7XG5cbiAgICAvKlxuXG4gICAgY29uc3QgYmF0aGVyc0Ryb3Bkb3duTGlzdCA9IHRoaXMudWkucXVlcnlTZWxlY3RvcihcbiAgICAgIFwiI2JhdGgtY2x1Yi1kcm9wZG93bi1saXN0XCJcbiAgICApO1xuICAgIGJhdGhlcnNEcm9wZG93bkxpc3QudGV4dENvbnRlbnQgPSBcIlwiO1xuXG4gICAgLy9hZGQgZGVmYXVsdCB2YWx1ZVxuICAgIGNvbnN0IG9wdGlvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJsaVwiKTtcbiAgICBiYXRoZXJzRHJvcGRvd25MaXN0LmFwcGVuZENoaWxkKG9wdGlvbik7XG5cbiAgICBpZiAodGhpcy5iYXRoZXJzQ29sbGVjdGlvbi5uZnRzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgb3B0aW9uLmlubmVySFRNTCA9ICc8YSBjbGFzcz1cImRyb3Bkb3duLWl0ZW0gZGlzYWJsZWRcIj5ObyBiYXRoZXJzPC9hPic7XG4gICAgfVxuXG4gICAgbGV0IGkgPSAwO1xuICAgIGZvciAoY29uc3QgbmZ0IG9mIHRoaXMuYmF0aGVyc0NvbGxlY3Rpb24ubmZ0cykge1xuICAgICAgY29uc3Qgb3B0aW9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxpXCIpO1xuXG4gICAgICBjb25zdCBhID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImFcIik7XG4gICAgICBhLmNsYXNzTmFtZSA9IFwiZHJvcGRvd24taXRlbVwiO1xuICAgICAgYS5ocmVmID0gXCIjXCI7XG4gICAgICBhLmRhdGFzZXQuaW5kZXggPSBpO1xuXG4gICAgICBhLmlubmVySFRNTCA9IGA8aW1nIHNyYz1cIiR7bmZ0LmltYWdlVXJsfVwiPiAke25mdC5uYW1lfWA7XG5cbiAgICAgIGEuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIHRoaXMuZGlkU2VsZWN0QmF0aGVyLmJpbmQodGhpcyksIGZhbHNlKTtcblxuICAgICAgb3B0aW9uLmFwcGVuZChhKTtcbiAgICAgIGJhdGhlcnNEcm9wZG93bkxpc3QuYXBwZW5kKG9wdGlvbik7XG5cbiAgICAgIGkrKztcbiAgICB9XG4gICAgKi9cbiAgfVxuXG4gIGRpZFNlbGVjdEJhdGhlcihldmVudCkge1xuICAgIGNvbnN0IG5mdEluZGV4ID0gZXZlbnQuY3VycmVudFRhcmdldC5kYXRhc2V0LmluZGV4O1xuXG4gICAgaWYgKCFuZnRJbmRleCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IG5mdCA9IHRoaXMuYmF0aGVyc0NvbGxlY3Rpb24ubmZ0c1tuZnRJbmRleF07XG4gICAgdGhpcy5zZWxlY3RlZEJhdGhlciA9IG5mdDtcblxuICAgIC8vZGlzcGxheSBpbWFnZVxuICAgIGNvbnN0IGJhdGhlckltZyA9IHRoaXMudWkucXVlcnlTZWxlY3RvcihcIiNjbHViLWltZ1wiKTtcbiAgICBiYXRoZXJJbWcuc3JjID0gbmZ0LmltYWdlVXJsO1xuXG4gICAgdGhpcy5nZW5lcmF0ZUdpZigpO1xuXG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgfVxuXG4gIGRpZFNlbGVjdEZpbHRlcihldmVudCkge1xuICAgIHRoaXMuc2VsZWN0ZWRGaWx0ZXIgPSBldmVudC5jdXJyZW50VGFyZ2V0LnZhbHVlO1xuXG4gICAgaWYgKCF0aGlzLnNlbGVjdGVkRmlsdGVyKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5nZW5lcmF0ZUdpZigpO1xuXG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgfVxuXG4gIGFzeW5jIGdlbmVyYXRlR2lmKCkge1xuICAgIGlmICh0aGlzLnNlbGVjdGVkRmlsdGVyICYmIHRoaXMuc2VsZWN0ZWRCYXRoZXIpIHtcbiAgICAgIGNvbnN0IGRvd25sb2FkQnV0dG9uID0gdGhpcy51aS5xdWVyeVNlbGVjdG9yKFwiI2J1dHRvbi1kb3dubG9hZFwiKTtcbiAgICAgIGRvd25sb2FkQnV0dG9uLmRpc2FibGVkID0gdHJ1ZTtcbiAgICAgIGRvd25sb2FkQnV0dG9uLnRleHRDb250ZW50ID0gXCJHZW5lcmF0aW5nIEdJRi4uLlwiO1xuXG4gICAgICBjb25zdCBpbWcgPSB0aGlzLnVpLnF1ZXJ5U2VsZWN0b3IoXCIjbWVyZ2VkLWltZ1wiKTtcbiAgICAgIGltZy5zcmMgPSBcImFzc2V0cy9kZWZhdWx0LnBuZ1wiO1xuXG4gICAgICBjb25zdCBwcm9wZXJ0aWVzID0gdGhpcy5zZWxlY3RlZEJhdGhlci5tZXRhZGF0YS5wcm9wZXJ0aWVzO1xuXG4gICAgICBjb25zdCBnbUdlbmVyYXRvciA9IG5ldyBHbUdlbmVyYXRvcigpO1xuXG4gICAgICAvL2RyYXcgbGF5ZXJzXG4gICAgICBhd2FpdCBnbUdlbmVyYXRvci5kcmF3TGF5ZXJzKHByb3BlcnRpZXMsIGxheWVycywgXCIuL2xheWVyc19pbWFnZXNcIik7XG5cbiAgICAgIGNvbnN0IGdpZkRhdGEgPSBhd2FpdCBnbUdlbmVyYXRvcltgZHJhd18ke3RoaXMuc2VsZWN0ZWRGaWx0ZXJ9YF0oKTtcblxuICAgICAgLy9jb25zdCBiYXNlNjRTdHJpbmcgPSBidG9hKFN0cmluZy5mcm9tQ2hhckNvZGUoLi4uZ2lmRGF0YSkpO1xuICAgICAgLy9pbWcuc3JjID0gYGRhdGE6aW1hZ2UvZ2lmO2Jhc2U2NCwke2Jhc2U2NFN0cmluZ31gO1xuICAgICAgaW1nLnNyYyA9IFVSTC5jcmVhdGVPYmplY3RVUkwoXG4gICAgICAgIG5ldyBCbG9iKFtnaWZEYXRhLmJ1ZmZlcl0sIHsgdHlwZTogXCJpbWFnZS9naWZcIiB9KVxuICAgICAgKTtcblxuICAgICAgZG93bmxvYWRCdXR0b24uZGlzYWJsZWQgPSBmYWxzZTtcbiAgICAgIGRvd25sb2FkQnV0dG9uLnRleHRDb250ZW50ID0gXCJEb3dubG9hZCBHSUZcIjtcbiAgICB9XG4gIH1cblxuICBkb3dubG9hZEdpZigpIHtcbiAgICBjb25zdCBpbWcgPSB0aGlzLnVpLnF1ZXJ5U2VsZWN0b3IoXCIjbWVyZ2VkLWltZ1wiKTtcblxuICAgIGNvbnN0IGEgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYVwiKTtcbiAgICBhLmhyZWYgPSBpbWcuc3JjO1xuICAgIGEuZG93bmxvYWQgPSBcImdvb2QtbW9ybmluZy5naWZcIjtcbiAgICBhLmNsaWNrKCk7XG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJHb29kTW9ybmluZyIsIkJhc2VQYWdlIiwiY29uc3RydWN0b3IiLCJzdXBlciIsImFyZ3VtZW50cyIsInRoaXMiLCJ1aSIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsImlubmVySFRNTCIsImJhdGhlcnNDb2xsZWN0aW9uIiwic2VsZWN0ZWRCYXRoZXIiLCJzZWxlY3RlZEZpbHRlciIsImxvYWQiLCJhc3luYyIsImxvYWRCYXRoZXJzIiwicXVlcnlTZWxlY3RvciIsImFkZEV2ZW50TGlzdGVuZXIiLCJkaWRTZWxlY3RGaWx0ZXIiLCJiaW5kIiwiZG93bmxvYWRHaWYiLCJob2xkaW5ncyIsImRyb3Bkb3duRGl2IiwiZHJvcGRvd24iLCJyZW1vdmUiLCJuZnRzIiwiZGlkU2VsZWN0QmF0aGVyIiwiYXBwZW5kIiwiZXZlbnQiLCJuZnRJbmRleCIsImN1cnJlbnRUYXJnZXQiLCJkYXRhc2V0IiwiaW5kZXgiLCJuZnQiLCJzcmMiLCJpbWFnZVVybCIsImdlbmVyYXRlR2lmIiwicHJldmVudERlZmF1bHQiLCJ2YWx1ZSIsImRvd25sb2FkQnV0dG9uIiwiZGlzYWJsZWQiLCJ0ZXh0Q29udGVudCIsImltZyIsInByb3BlcnRpZXMiLCJtZXRhZGF0YSIsImdtR2VuZXJhdG9yIiwiZHJhd0xheWVycyIsImdpZkRhdGEiLCJVUkwiLCJjcmVhdGVPYmplY3RVUkwiLCJCbG9iIiwiYnVmZmVyIiwidHlwZSIsImEiLCJocmVmIiwiZG93bmxvYWQiLCJjbGljayJdLCJzb3VyY2VSb290IjoiIn0=