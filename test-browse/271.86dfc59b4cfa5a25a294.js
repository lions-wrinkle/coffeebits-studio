"use strict";(self.webpackChunkstudio=self.webpackChunkstudio||[]).push([[271,998,468,298],{6998:(t,e,a)=>{a.r(e),a.d(e,{BasePage:()=>s});class s{constructor(t,e,a,s){this.walletConnect=t,this.algodClient=a,this.algoIndexer=s,this.holdings=e}}},1271:(t,e,a)=>{a.r(e),a.d(e,{Home:()=>i});var s=a(6998),n=a(5298);class i extends s.BasePage{constructor(){super(...arguments),this.ui=document.createElement("div"),this.ui.innerHTML='\n        \x3c!--<h1>Welcome to the Studio</h1>--\x3e\n        <div class="text-center">\n        <img src="assets/logo-studio.png" width="160" alt="The Studio" class="mb-4">\n        <p id="info-message"></p>\n        </div>\n        <div class="springboard d-flex flex-column flex-md-row w-100">\n\n            <div class="flex-fill springboard-item springboard-main-item mb-3 me-md-2">\n                <a href="?grinder" class="d-block" style="background-image: url(\'assets/springbord-grinder.png\'); background-color: #d39e27;" data-page-link="grinder">\n                    <h3>Grinder</h3>\n                    <p>Use Caffeine Cards to evolve your Bathers</p>\n                </a>\n            </div>\n\n            <div class="flex-fill d-flex flex-column">\n                <div class="flex-fill springboard-item mb-3 ms-md-2">\n                    <a href="?cards" class="d-block"\n                        style="background-image: url(\'assets/springboard-cards.png\'); background-color: #bb5f00;" data-page-link="cards">\n                        <h3>Caffeine<br>Cards</h3>\n                        <p>Browse all cards</p>\n                    </a>\n                </div>\n                <div class="flex-fill springboard-item mb-3 ms-md-2">\n                    <a href="?good-morning" class="d-block"\n                        style="background-image: url(\'assets/springboard-gm.png\'); background-color: #12c1b1;" data-page-link="good-morning">\n                        <h3>Good Morning!</h3>\n                        <p>Generate GM GIFs featuring your Bathers</p>\n                    </a>\n                </div>\n\n            </div>\n        ';try{this.loadPacks()}catch(t){console.error(t)}}async loadPacks(){const t=await(0,n.loadPacks)(this.holdings);t&&t.claimablePacks.length>0&&(this.ui.querySelector("#info-message").innerHTML=`<a href="?packs" data-page-link="packs">You have ${t.claimablePacks.length} Caffeine Cards to claim!</a>`,window.enableNavigationLinks())}}},5298:(t,e,a)=>{a.r(e),a.d(e,{Packs:()=>l,loadPacks:()=>c});var s=a(6998),n=a(7304),i=a(4050),o=a(4393);const r="https://api.atomixwap.xyz";async function c(t){let e=await fetch(`${r}/caffeine-card-pack/get-all`);if(200===e.status){let a=await e.json();if(t){let e=[];const s=t.bathers.nfts.map((t=>t.assetId));for(const t of a.packs)s.includes(t[0])&&e.push(t);return{claimablePacks:e,escrowAddress:a.escrowAddress}}return a.packs}throw new Error(`Can't load packs. Error ${e.status}`)}class l extends s.BasePage{constructor(){super(...arguments),this.ui=document.createElement("div"),this.ui.innerHTML='\n    <h1>Caffeine Cards Packs</h1>\n    <p id="packs-status" class="dark-text text-center">Loading packs...</p>\n    ',this.claimablePacks,this.escrowAddress,this.fetchPacks()}sleep(t){return new Promise((e=>setTimeout(e,t)))}async fetchPacks(){const t=this.ui.querySelector("#packs-status");try{const e=await c(this.holdings);if(this.claimablePacks=e.claimablePacks,this.escrowAddress=e.escrowAddress,this.claimablePacks.length>0){let e="";this.claimablePacks.length>1&&(e="s"),t.textContent=`${this.claimablePacks.length} pack${e} to claim!`}else t.innerHTML='<img src="assets/pack0-0.png" style="width: 240px; opacity: 0.2;" class="mb-3"><br>\n        No pack to open.<br>\n        Make sure Bathers are not listed on marketplaces to see your packs.<br><br>\n        A Caffeine Card is given for every Bather bought in the <a href="https://instantshuffle.com/shuffle/yUSbzq61ZvqTIsSvLycS" target="_blank">Instant Shuffle.</a>\n        ';const a=document.createElement("div");a.className="row row-cols-2 row-cols-md-3 row-cols-lg-4 gy-4 mb-5 justify-content-center",this.ui.append(a);for(const t of this.claimablePacks){const e=document.createElement("div");e.className="col text-center ps-3 pe-3",a.append(e);const s=document.createElement("canvas");s.className="w-100 mb-0";const n=new d(s,t[1],this.algoIndexer);e.append(s),await n.load().then((()=>{const a=document.createElement("div");a.className="dark-text mt-0 pt-0 mb-2 hidden-pack-name",a.style.opacity="0",a.style["max-height"]="0",a.textContent=n.nft.name,e.append(a);const s=document.createElement("button");s.className="open-pack-button",s.textContent="Open",s.dataset.batherId=t[0],s.dataset.caffeineCardId=t[1],s.addEventListener("click",this.openPack.bind(this,n,a),!1),e.append(s)})).catch((t=>{console.log(t)})),this.sleep(300)}}catch(e){console.error(e),t.textContent=e.message}}disableAllButtons(t){this.ui.querySelectorAll(".open-pack-button").forEach((e=>{e===t||e.dataset.opened||(e.className="open-pack-button soft-disabled",e.disabled=!0)}))}enableAllButtons(t){this.ui.querySelectorAll(".open-pack-button").forEach((e=>{e===t||e.dataset.opened||(e.className="open-pack-button",e.disabled=!1)}))}async openPack(t,e,a){const s=a.currentTarget;this.disableAllButtons(s);const n=s.dataset.batherId,o=s.dataset.caffeineCardId;try{s.innerHTML='<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>',s.disabled=!0;let a=await this.algodClient.getTransactionParams().do(),c=[i.makeAssetTransferTxnWithSuggestedParamsFromObject({from:this.walletConnect.walletAddress,to:this.walletConnect.walletAddress,amount:0,assetIndex:parseInt(o),suggestedParams:a}),i.makeAssetTransferTxnWithSuggestedParamsFromObject({from:this.escrowAddress,to:this.walletConnect.walletAddress,amount:1,assetIndex:parseInt(o),suggestedParams:a})];i.assignGroupID(c);const l=await this.walletConnect.signTransactions(c),d={batherId:n,txn:btoa(String.fromCharCode.apply(null,l[0])),suggestedParams:a};s.innerHTML='<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>\n      Opening...',s.disabled=!0;const h=await fetch(r+"/caffeine-card-pack/claim/",{method:"POST",body:JSON.stringify(d),headers:{Accept:"application/json","Content-Type":"application/json"}});if(200!==h.status){let t;try{t=await h.json()}catch(t){}throw t&&t.error?new Error(t.error):new Error(`Error ${h.status}`)}s.innerHTML='<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" class="bi bi-check-circle-fill" viewBox="0 0 16 16">\n        <path d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zm-3.97-3.03a.75.75 0 0 0-1.08.022L7.477 9.417 5.384 7.323a.75.75 0 0 0-1.06 1.06L6.97 11.03a.75.75 0 0 0 1.079-.02l3.992-4.99a.75.75 0 0 0-.01-1.05z"/>\n      </svg>\n        Opened',s.disabled=!0,s.dataset.opened=!0,t.animate(),e.style.opacity="1",e.style["max-height"]="500px",this.enableAllButtons(s)}catch(t){console.error(t),alert(t.message),s.textContent="Open",s.disabled=!1,this.enableAllButtons(s)}}}class d{constructor(t,e,a){this.caffeineCardId=e,this.algoIndexer=a,this.width=660,this.height=960,this.imageWidth=960,this.numAnimationImage=4,this.canvas=t,this.canvas.width=this.width,this.canvas.height=this.height,this.context=this.canvas.getContext("2d"),this.context.imageSmoothingEnabled=!1,this.context.translate(-(this.imageWidth-this.width)/2,0),this.nft,this.cardImage,this.cardMask,this.animationImages}async load(){await this.loadAllImage()}static loadImage(t){return new Promise(((e,a)=>{const s=new Image;s.onload=()=>{e(s)},s.onerror=a,s.src=t}))}async loadAllImage(){this.animationImages=[];const t=this.caffeineCardId%4,e=await d.loadImage(`assets/pack${t}-0.png`);this.animationImages.push(e),this.drawPack(),this.cardMask=await d.loadImage("assets/card-mask.png");const a=await this.algoIndexer.lookupAssetByID(this.caffeineCardId).do();this.nft=new n.Sm(this.caffeineCardId,a.asset),await this.nft.load(this.algoIndexer);try{this.cardImage=await d.loadImage(this.nft.imageUrl)}catch(t){console.log("Error loading image from primary, trying secondary");try{this.cardImage=await d.loadImage(this.nft.imageUrlAlternate)}catch(t){this.cardImage=await d.loadImage("assets/empty-card.png")}}for(let e=1;e<=this.numAnimationImage;e++){const a=await d.loadImage(`assets/pack${t}-${e}.png`);this.animationImages.push(a)}}async drawPack(){this.context.drawImage(this.animationImages[0],0,0,this.imageWidth,this.height)}static easeInOutQuad(t){return t<.5?2*t*t:1-Math.pow(-2*t+2,2)/2}async animate(){let t=.15,e=1;const a=setInterval((()=>{if(this.context.clearRect(0,0,this.imageWidth,this.height),this.context.drawImage(this.cardMask,0,0,this.imageWidth,this.height),this.context.globalCompositeOperation="source-in",this.context.drawImage(this.cardImage,0,0,this.imageWidth,this.height),this.context.globalCompositeOperation="source-over",this.context.drawImage(this.animationImages[e],0,0,this.imageWidth,this.height),e===this.numAnimationImage){clearInterval(a),o.sparkles(this.canvas),t=.05;const e=.8;let s=0;const n=setInterval((()=>{const a=d.easeInOutQuad(s/e)*this.height;this.context.clearRect(0,0,this.imageWidth,this.height),this.context.drawImage(this.cardMask,0,0,this.imageWidth,this.height),this.context.globalCompositeOperation="source-in",this.context.drawImage(this.cardImage,0,0,this.imageWidth,this.height),this.context.globalCompositeOperation="source-over",this.context.drawImage(this.animationImages[this.numAnimationImage],0,a,this.imageWidth,this.height),s+=t,s>=e&&clearInterval(n)}),1e3*t)}e++}),1e3*t)}}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,