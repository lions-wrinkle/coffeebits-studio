"use strict";(self.webpackChunkstudio=self.webpackChunkstudio||[]).push([[190,998],{6998:(t,e,s)=>{s.r(e),s.d(e,{BasePage:()=>a});class a{constructor(t,e,s,a){this.walletConnect=t,this.algodClient=s,this.algoIndexer=a,this.holdings=e}}},4190:(t,e,s)=>{s.r(e),s.d(e,{Cards:()=>l});var a=s(6998),i=s(7304),n=s(5190);class l extends a.BasePage{constructor(){super(...arguments),this.collectionName="bathers",this.title="","caffeineCards"===this.collectionName?this.title="Caffeine Cards":"bathers"===this.collectionName&&(this.title="Bathers"),this.ui=document.createElement("div"),this.ui.innerHTML=`\n    <h1>${this.title}</h1>\n    <p class="dark-text">Browse all ${this.title}</p>\n    `,this.collection,this.bathersWithPacks,this.loadAllCards()}sleep(t){return new Promise((e=>setTimeout(e,t)))}async loadAllCards(){const t=document.createElement("p");t.textContent=`Loading ${this.title}...`,this.ui.append(t);const e=n.Z.filter((t=>t.name===this.collectionName))[0];if(this.collection=new i.tf([e]),await this.collection.load(this.algoIndexer),"bathers"===this.collectionName){const{loadPacks:t}=await Promise.all([s.e(393),s.e(298)]).then(s.bind(s,5298));try{const e=await t(this.holdings);e&&e.claimablePacks.length>0&&(this.bathersWithPacks=e.claimablePacks.map((t=>t[0])))}catch(t){console.error(t)}}t.remove(),this.displayList()}displayList(){if(!this.collection.nfts.length){const t=document.createElement("div");return t.innerHTML='<div class="dark-text mb-5">No assets</div>',void this.ui.append(t)}const t=document.createElement("div");t.className="row row-cols-2 row-cols-md-3 row-cols-lg-4 gy-4 mb-5",this.ui.append(t);let e=new IntersectionObserver(this.loadVisibleNFTs.bind(this),{root:null,rootMargin:"0px",threshold:0}),s=0;for(const a of this.collection.nfts){const i=document.createElement("div");if(i.id=`nft-${a.assetId}`,i.className="col",i.dataset.i=s,i.innerHTML=`\n          <div class="list-item h-100 d-flex flex-column">\n              <div class="ratio ratio-1x1 placeholder-card">\n                <img src="assets/default-card.png" class="nft-img img-fluid" loading="lazy">\n              </div>\n              <div class="list-item-text flex-fill d-flex flex-column">\n                  <h4>${a.name}</h4>\n                  <div class="d-flex justify-content-between">\n                      <span class="asset-id">${a.assetId}</span>\n                      ${a.total}\n                  </div>\n                  <div class="mt-3 nft-properties">\n                  </div>\n                  <div class="flex-fill d-flex justify-content-between align-items-end mt-2">\n                        <div class="nft-special"></div>\n                        <div class="dropdown"></div>\n                  </div>\n              </div>\n          </div>\n      `,i.querySelector(".dropdown").innerHTML=`\n          <a href="#" role="button" data-bs-toggle="dropdown" aria-expanded="false">\n          <img src="assets/more.png" class="more">\n          </a>\n          <ul class="dropdown-menu">\n              <li><a class="dropdown-item" href="https://www.nftexplorer.app/asset/${a.assetId}" target="_blank">NFTExplorer</a></li>\n              <li><a class="dropdown-item" href="https://www.randgallery.com/algo-collection/?address=${a.assetId}" target="_blank">RandGallery</a></li>\n              <li><a class="dropdown-item" href="https://algoxnft.com/asset/${a.assetId}" target="_blank">ALGOxNFT</a></li>\n          </ul>\n    `,"bathers"===this.collectionName&&this.bathersWithPacks&&this.bathersWithPacks.includes(a.assetId)){const t=i.querySelector(".nft-special");t.dataset.bsTitle="The pack tied to this Bather has not been opened yet",t.dataset.bsToggle="tooltip",t.dataset.bsCustomClass="custom-tooltip",t.innerHTML='<img src="assets/pack-icon.png">',new window.bootstrap.Tooltip(t)}t.append(i),s++,e.observe(i)}}loadVisibleNFTs(t,e){t.forEach((t=>{if(!t.isIntersecting)return;const e=t.target,s=this.collection.nfts[e.dataset.i];s.loading||(s.load(this.algoIndexer).then((()=>{const t=e.querySelector(".nft-img");if(t.src=s.imageUrl,s.handleImageError(t),"caffeineCards"===this.collectionName){let t="";if(s.metadata.properties){for(const e in s.metadata.properties)t+=`<span class="custom-badge">${e}</span> `;t+="<br>"}let a="";if(s.metadata.require){let t=[];for(const e in s.metadata.require)t.push(`<span class="custom-badge light">${e}: ${s.metadata.require[e]}</span>`);a=`<span class="custom-badge dark">Require:</span> ${t.join(" ")}`}e.querySelector(".nft-properties").innerHTML=`${t} ${a}<br>`;const i=e.querySelector(".nft-special");i.innerHTML='&#128293; <span id="burn-count">...</span>',i.dataset.bsTitle="Number of card definitively burned",i.dataset.bsToggle="tooltip",i.dataset.bsCustomClass="custom-tooltip",new window.bootstrap.Tooltip(i),this.algodClient.accountAssetInformation(s.metadata.burn_address,s.assetId).do().then((t=>{i.innerHTML=`&#128293; <span id="burn-count">${t["asset-holding"].amount}</span>`}))}})),s.loading=!0,this.sleep(100))}))}}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,