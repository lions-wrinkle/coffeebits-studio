"use strict";(self.webpackChunkstudio=self.webpackChunkstudio||[]).push([[538],{6538:(e,t,s)=>{s.r(t),s.d(t,{Grinder:()=>r});var a=s(6998),n=(s(5190),s(7304),s(7644)),d=s(4050),i=s(2871),o=s(4714);class r extends a.BasePage{constructor(){super(...arguments),this.ui=document.createElement("div"),this.ui.innerHTML='\n    <h1>Grinder</h1>\n    <p class="dark-text">Use Caffeine Cards to update your Bathers</p>\n\n    <div class="d-sm-flex flew-row" style="background-color: var(--background-dark);">\n\n        <div class="d-flex flex-column p-3 text-center">\n\n            <img src="assets/default.png" class="mb-2 ms-auto me-auto" id="club-img" style="width: 200px; height: auto">\n\n            <div class="dropdown" id="bath-club-dropdown">\n                <button class="dropdown-toggle button-alt" type="button" data-bs-toggle="dropdown"\n                    aria-expanded="false">\n                    Choose Bather\n                </button>\n            </div>\n\n            <img src="assets/default-card.png" class="mb-2 mt-4 ms-auto me-auto" id="card-img" style="width: 200px; height: auto">\n\n            <div class="dropdown mb-5" id="cards-dropdown">\n                <button class="dropdown-toggle button-alt" type="button" data-bs-toggle="dropdown"\n                    aria-expanded="false" id="choose-card-button" disabled>\n                    Choose Card\n                </button>\n            </div>\n            <button id="button-review" disabled>Review...</button>\n\n        </div>\n\n        <div class="d-flex flex-column flex-fill p-3 text-center">\n            <small class="dark-text">preview</small>\n            <img src="assets/default.png" class="w-100 m-auto img-fluid" style="max-width: 480px;" id="merged-img">\n\n        </div>\n\n    </div>',this.bathersCollection,this.cardsCollection,this.selectedBather,this.selectedCard,this.mergedImgDataURL,this.chooseCardButton=this.ui.querySelector("#choose-card-button"),this.load()}async load(){await this.loadBathers(),this.ui.querySelector("#button-review").addEventListener("click",this.review.bind(this))}async loadBathers(){this.bathersCollection=this.holdings.bathers;const e=this.ui.querySelector("#bath-club-dropdown");let t=e.querySelector(".dropdown-menu");t&&t.remove(),t=new i.Z(this.bathersCollection.nfts,this.didSelectBather.bind(this)),e.append(t.ui)}async didSelectBather(e){this.clearCard();const t=e.currentTarget.dataset.index;if(!t)return;const s=this.bathersCollection.nfts[t];this.selectedBather=s,this.ui.querySelector("#club-img").src=s.imageUrl,this.validate(),await this.loadCards(),this.chooseCardButton.disabled=!1,e.preventDefault()}clearCard(){this.selectedCard=void 0,this.chooseCardButton.disabled=!0,this.ui.querySelector("#card-img").src="assets/default-card.png"}async loadCards(){this.cardsCollection=this.holdings.caffeineCards;const e=this.ui.querySelector("#cards-dropdown");let t=e.querySelector("#cards-dropdown-nft");t&&t.remove();let s=[];for(const e of this.cardsCollection.nfts)if(e.metadata.require)for(const t in e.metadata.require)this.selectedBather.metadata.properties[t]==e.metadata.require[t]||s.push(e.assetId);console.log(s),t=new i.Z(this.cardsCollection.nfts,this.didSelectCard.bind(this),"cards-dropdown-nft",s),e.append(t.ui),new window.bootstrap.Dropdown(this.chooseCardButton)}async didSelectCard(e){const t=e.currentTarget.dataset.index;if(!t)return;const s=this.cardsCollection.nfts[t];this.selectedCard=s,this.ui.querySelector("#card-img").src=s.imageUrl,this.validate(),e.preventDefault()}validate(){const e=this.ui.querySelector("#button-review");this.selectedBather&&this.selectedCard?(e.disabled=!1,this.preview()):this.selectedBather?(this.ui.querySelector("#merged-img").src=this.selectedBather.imageUrl,e.disabled=!0):e.disabled=!0}review(e){const t=document.createElement("div");t.className="modal",t.tabIndex="-1",t.innerHTML=`\n    <div class="modal-dialog modal-dialog-centered">\n      <div class="modal-content">\n        <div class="modal-header">\n          <h5 class="modal-title">Review Bather evolution</h5>\n          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>\n        </div>\n        <div class="modal-body">\n            <div class="text-center mb-3">\n                <img style="width: 320px; height: auto;" id="preview-merged-img">\n            </div>\n\n          <p>\n          Your <strong>${this.selectedBather.name}</strong> will be updated.<br>\n          Your <strong>${this.selectedCard.name}</strong> will be burned &#128293;\n          </p>\n            \n          <p>&#128337; As the process requires a manual step, update can take up to 24h.<br>\n          &#128236; You will be notified by a zero Algo transaction when the evolution is complete.</p>\n        </div>\n        <div class="modal-footer">\n          <button type="button" class="button-alt" data-bs-dismiss="modal">Close</button>\n          <button type="button" id="send-button">Send request</button>\n        </div>\n      </div>\n    </div>\n    `,t.querySelector("#preview-merged-img").src=this.mergedImgDataURL;const s=t.querySelector("#send-button");s.currentModal=t,s.addEventListener("click",this.send.bind(this),!1),new window.bootstrap.Modal(t,{}).show()}async preview(){const e=this.ui.querySelector("#button-review");e.disabled=!0,e.textContent="Generating...";const t=this.ui.querySelector("#merged-img"),s=Object.assign({},this.selectedBather.metadata.properties);for(const e in this.selectedCard.metadata.properties)s[e]=this.selectedCard.metadata.properties[e];const a=await(0,n.i)(s,o,"layers_images");this.mergedImgDataURL=a.toDataURL("image/png"),t.src=this.mergedImgDataURL,e.disabled=!1,e.textContent="Review..."}async send(e){const t=e.currentTarget;t.disabled=!0,t.textContent="Waiting for signature...";const s=await this.algodClient.getTransactionParams().do(),a={evolve:this.selectedBather.assetId},n=(new TextEncoder).encode(JSON.stringify(a)),i=d.makeAssetTransferTxnWithSuggestedParamsFromObject({from:this.walletConnect.walletAddress,to:this.cardsCollection.collections[0].addresses[0],amount:1,assetIndex:this.selectedCard.assetId,suggestedParams:s,note:n}),o=await this.walletConnect.signTransactions([i]),r=t.currentModal;let l;r.innerHTML='\n    <div class="modal-dialog modal-dialog-centered">\n      <div class="modal-content">\n        <div class="modal-header">\n          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>\n        </div>\n        <div class="modal-body ">\n            <div class="text-center mb-3">\n                <img src="assets/grinder.png" style="width: 128px; height: auto;">\n            </div>\n            <div class="text-center mb-3">\n            Sending Caffeine Card to the Grinder...\n            </div>\n        </div>\n      </div>\n    </div>\n    ';try{l=await this.algodClient.sendRawTransaction(o).do(),await d.waitForConfirmation(this.algodClient,l.txId,4),r.innerHTML='\n    <div class="modal-dialog modal-dialog-centered">\n      <div class="modal-content">\n        <div class="modal-header">\n          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>\n        </div>\n        <div class="modal-body">\n          <div class="text-center mb-3">\n          <img src="assets/heart-cup.png" width="60"><br><br>\n          We got your card and your evolution request.<br>\n          We\'ll be back to you very soon.\n          </div>\n        </div>\n        <div class="modal-footer">\n          <button type="button" data-bs-dismiss="modal">Close</button>\n        </div>\n      </div>\n    </div>\n    ',r.addEventListener("hidden.bs.modal",(e=>{location.reload()}))}catch(e){r.innerHTML=`\n    <div class="modal-dialog modal-dialog-centered">\n      <div class="modal-content">\n        <div class="modal-header">\n          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>\n        </div>\n        <div class="modal-body">\n          <div class="text-center mb-3">\n          <div class="alert alert-danger" role="alert">${e.message} </div>\n          </div>\n        </div>\n        <div class="modal-footer">\n          <button type="button" data-bs-dismiss="modal">Close</button>\n        </div>\n      </div>\n    </div>\n    `,console.error(e)}}}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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LEVBQVdLLFlBQWMsMkJBRXpCLE1BQU1RLFFBQXdCdkUsS0FBS3dFLFlBQVlDLHVCQUF1QkMsS0FJaEVDLEVBQU8sQ0FDWEMsT0FBUTVFLEtBQUtPLGVBQWVzQyxTQUl4QmdDLEdBRGMsSUFBSUMsYUFDUUMsT0FBT0MsS0FBS0MsVUFBVU4sSUFFaERPLEVBQVUsb0RBQTBELENBQ3hFQyxLQUFNbkYsS0FBS29GLGNBQWNDLGNBQ3pCQyxHQUFJdEYsS0FBS00sZ0JBQWdCaUYsWUFBWSxHQUFHQyxVQUFVLEdBQ2xEQyxPQUFRLEVBQ1JDLFdBQVkxRixLQUFLUSxhQUFhcUMsUUFDOUIwQixnQkFBaUJBLEVBQ2pCSSxLQUFNRSxJQUdGYyxRQUFrQjNGLEtBQUtvRixjQUFjUSxpQkFBaUIsQ0FBQ1YsSUFHdkR2QixFQUFlRCxFQUFXQyxhQXFCaEMsSUFBSWtDLEVBbkJKbEMsRUFBYXZELFVBQVksb2xCQW9CekIsSUFDRXlGLFFBQVc3RixLQUFLd0UsWUFBWXNCLG1CQUFtQkgsR0FBV2pCLFdBR2pDLHNCQUN2QjFFLEtBQUt3RSxZQUNMcUIsRUFBR0UsS0FDSCxHQUdGcEMsRUFBYXZELFVBQVkseXFCQW9CekJ1RCxFQUFhNUMsaUJBQWlCLG1CQUFvQlUsSUFFaER1RSxTQUFTQyxRQUFRLEdBc0JyQixDQXBCRSxNQUFPQyxHQUNQdkMsRUFBYXZELFVBQVksNlhBUTBCOEYsRUFBSUMsK01BVXZEckQsUUFBUXNELE1BQU1GLEVBQ2hCLENBQ0YsRSIsInNvdXJjZXMiOlsid2VicGFjazovL3N0dWRpby8uL3NyYy9wYWdlcy9ncmluZGVyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJhc2VQYWdlIH0gZnJvbSBcIi4vYmFzZS5qc1wiO1xuaW1wb3J0IGNvbGxlY3Rpb24gZnJvbSBcIi4uL2NvbGxlY3Rpb25zLmpzXCI7XG5pbXBvcnQgeyBORlRIb2xkZXJDb2xsZWN0aW9uIH0gZnJvbSBcImFsZ28tbmZ0LXV0aWxzXCI7XG5pbXBvcnQgeyBkcmF3IH0gZnJvbSBcImJhdGgtY2x1YlwiO1xuaW1wb3J0IGFsZ29zZGsgZnJvbSBcImFsZ29zZGtcIjtcbmltcG9ydCBEcm9wZG93bk5mdHMgZnJvbSBcIi4uL2NvbW1vbi9kcm9wZG93bi1uZnRzLmpzXCI7XG5cbmltcG9ydCBsYXllcnMgZnJvbSBcIi4uLy4uLy4uL2JhdGgtY2x1Yi9sYXllcnMuanNvblwiO1xuXG5leHBvcnQgY2xhc3MgR3JpbmRlciBleHRlbmRzIEJhc2VQYWdlIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcblxuICAgIHRoaXMudWkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgIHRoaXMudWkuaW5uZXJIVE1MID0gYFxuICAgIDxoMT5HcmluZGVyPC9oMT5cbiAgICA8cCBjbGFzcz1cImRhcmstdGV4dFwiPlVzZSBDYWZmZWluZSBDYXJkcyB0byB1cGRhdGUgeW91ciBCYXRoZXJzPC9wPlxuXG4gICAgPGRpdiBjbGFzcz1cImQtc20tZmxleCBmbGV3LXJvd1wiIHN0eWxlPVwiYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tYmFja2dyb3VuZC1kYXJrKTtcIj5cblxuICAgICAgICA8ZGl2IGNsYXNzPVwiZC1mbGV4IGZsZXgtY29sdW1uIHAtMyB0ZXh0LWNlbnRlclwiPlxuXG4gICAgICAgICAgICA8aW1nIHNyYz1cImFzc2V0cy9kZWZhdWx0LnBuZ1wiIGNsYXNzPVwibWItMiBtcy1hdXRvIG1lLWF1dG9cIiBpZD1cImNsdWItaW1nXCIgc3R5bGU9XCJ3aWR0aDogMjAwcHg7IGhlaWdodDogYXV0b1wiPlxuXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZHJvcGRvd25cIiBpZD1cImJhdGgtY2x1Yi1kcm9wZG93blwiPlxuICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9XCJkcm9wZG93bi10b2dnbGUgYnV0dG9uLWFsdFwiIHR5cGU9XCJidXR0b25cIiBkYXRhLWJzLXRvZ2dsZT1cImRyb3Bkb3duXCJcbiAgICAgICAgICAgICAgICAgICAgYXJpYS1leHBhbmRlZD1cImZhbHNlXCI+XG4gICAgICAgICAgICAgICAgICAgIENob29zZSBCYXRoZXJcbiAgICAgICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgICA8aW1nIHNyYz1cImFzc2V0cy9kZWZhdWx0LWNhcmQucG5nXCIgY2xhc3M9XCJtYi0yIG10LTQgbXMtYXV0byBtZS1hdXRvXCIgaWQ9XCJjYXJkLWltZ1wiIHN0eWxlPVwid2lkdGg6IDIwMHB4OyBoZWlnaHQ6IGF1dG9cIj5cblxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImRyb3Bkb3duIG1iLTVcIiBpZD1cImNhcmRzLWRyb3Bkb3duXCI+XG4gICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cImRyb3Bkb3duLXRvZ2dsZSBidXR0b24tYWx0XCIgdHlwZT1cImJ1dHRvblwiIGRhdGEtYnMtdG9nZ2xlPVwiZHJvcGRvd25cIlxuICAgICAgICAgICAgICAgICAgICBhcmlhLWV4cGFuZGVkPVwiZmFsc2VcIiBpZD1cImNob29zZS1jYXJkLWJ1dHRvblwiIGRpc2FibGVkPlxuICAgICAgICAgICAgICAgICAgICBDaG9vc2UgQ2FyZFxuICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8YnV0dG9uIGlkPVwiYnV0dG9uLXJldmlld1wiIGRpc2FibGVkPlJldmlldy4uLjwvYnV0dG9uPlxuXG4gICAgICAgIDwvZGl2PlxuXG4gICAgICAgIDxkaXYgY2xhc3M9XCJkLWZsZXggZmxleC1jb2x1bW4gZmxleC1maWxsIHAtMyB0ZXh0LWNlbnRlclwiPlxuICAgICAgICAgICAgPHNtYWxsIGNsYXNzPVwiZGFyay10ZXh0XCI+cHJldmlldzwvc21hbGw+XG4gICAgICAgICAgICA8aW1nIHNyYz1cImFzc2V0cy9kZWZhdWx0LnBuZ1wiIGNsYXNzPVwidy0xMDAgbS1hdXRvIGltZy1mbHVpZFwiIHN0eWxlPVwibWF4LXdpZHRoOiA0ODBweDtcIiBpZD1cIm1lcmdlZC1pbWdcIj5cblxuICAgICAgICA8L2Rpdj5cblxuICAgIDwvZGl2PmA7XG5cbiAgICB0aGlzLmJhdGhlcnNDb2xsZWN0aW9uO1xuICAgIHRoaXMuY2FyZHNDb2xsZWN0aW9uO1xuXG4gICAgdGhpcy5zZWxlY3RlZEJhdGhlcjtcbiAgICB0aGlzLnNlbGVjdGVkQ2FyZDtcblxuICAgIHRoaXMubWVyZ2VkSW1nRGF0YVVSTDtcblxuICAgIHRoaXMuY2hvb3NlQ2FyZEJ1dHRvbiA9IHRoaXMudWkucXVlcnlTZWxlY3RvcihcIiNjaG9vc2UtY2FyZC1idXR0b25cIik7XG5cbiAgICB0aGlzLmxvYWQoKTtcbiAgfVxuXG4gIGFzeW5jIGxvYWQoKSB7XG4gICAgYXdhaXQgdGhpcy5sb2FkQmF0aGVycygpO1xuXG4gICAgY29uc3QgcmV2aWV3QnV0dG9uID0gdGhpcy51aS5xdWVyeVNlbGVjdG9yKFwiI2J1dHRvbi1yZXZpZXdcIik7XG4gICAgcmV2aWV3QnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCB0aGlzLnJldmlldy5iaW5kKHRoaXMpKTtcblxuICAgIC8vY29uc3Qgc2VuZEJ1dHRvbiA9IHRoaXMudWkucXVlcnlTZWxlY3RvcihcIiNzZW5kLWJ0blwiKTtcbiAgICAvL3NlbmRCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIHRoaXMuc2VuZC5iaW5kKHRoaXMpKTtcbiAgfVxuXG4gIGFzeW5jIGxvYWRCYXRoZXJzKCkge1xuICAgIHRoaXMuYmF0aGVyc0NvbGxlY3Rpb24gPSB0aGlzLmhvbGRpbmdzW1wiYmF0aGVyc1wiXTtcblxuICAgIGNvbnN0IGRyb3Bkb3duRGl2ID0gdGhpcy51aS5xdWVyeVNlbGVjdG9yKFwiI2JhdGgtY2x1Yi1kcm9wZG93blwiKTtcblxuICAgIGxldCBkcm9wZG93biA9IGRyb3Bkb3duRGl2LnF1ZXJ5U2VsZWN0b3IoXCIuZHJvcGRvd24tbWVudVwiKTtcbiAgICBpZiAoZHJvcGRvd24pIHtcbiAgICAgIGRyb3Bkb3duLnJlbW92ZSgpO1xuICAgIH1cblxuICAgIGRyb3Bkb3duID0gbmV3IERyb3Bkb3duTmZ0cyhcbiAgICAgIHRoaXMuYmF0aGVyc0NvbGxlY3Rpb24ubmZ0cyxcbiAgICAgIHRoaXMuZGlkU2VsZWN0QmF0aGVyLmJpbmQodGhpcylcbiAgICApO1xuICAgIGRyb3Bkb3duRGl2LmFwcGVuZChkcm9wZG93bi51aSk7XG5cbiAgICAvKlxuICAgIGNvbnN0IGJhdGhlcnNEcm9wZG93bkxpc3QgPSB0aGlzLnVpLnF1ZXJ5U2VsZWN0b3IoXCIjYmF0aC1jbHViLWRyb3Bkb3duLWxpc3RcIik7XG4gICAgYmF0aGVyc0Ryb3Bkb3duTGlzdC50ZXh0Q29udGVudCA9IFwiXCI7XG5cbiAgICAvL2FkZCBkZWZhdWx0IHZhbHVlXG4gICAgY29uc3Qgb3B0aW9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxpXCIpO1xuICAgIGJhdGhlcnNEcm9wZG93bkxpc3QuYXBwZW5kQ2hpbGQob3B0aW9uKTtcblxuICAgIGlmICh0aGlzLmJhdGhlcnNDb2xsZWN0aW9uLm5mdHMubGVuZ3RoID09PSAwKSB7XG4gICAgICBvcHRpb24uaW5uZXJIVE1MID0gJzxhIGNsYXNzPVwiZHJvcGRvd24taXRlbSBkaXNhYmxlZFwiPk5vIGJhdGhlcnM8L2E+JztcbiAgICB9XG5cbiAgICBsZXQgaSA9IDA7XG4gICAgZm9yIChjb25zdCBuZnQgb2YgdGhpcy5iYXRoZXJzQ29sbGVjdGlvbi5uZnRzKSB7XG4gICAgICBjb25zdCBvcHRpb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGlcIik7XG5cbiAgICAgIGNvbnN0IGEgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYVwiKTtcbiAgICAgIGEuY2xhc3NOYW1lID0gJ2Ryb3Bkb3duLWl0ZW0nO1xuICAgICAgYS5ocmVmID0gJyMnO1xuICAgICAgYS5kYXRhc2V0LmluZGV4ID0gaTtcblxuICAgICAgYS5pbm5lckhUTUwgPSBgPGltZyBzcmM9XCIke25mdC5pbWFnZVVybH1cIj4gJHtuZnQubmFtZX1gO1xuXG4gICAgICBhLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5kaWRTZWxlY3RCYXRoZXIuYmluZCh0aGlzKSwgZmFsc2UpO1xuXG4gICAgICBvcHRpb24uYXBwZW5kKGEpO1xuICAgICAgYmF0aGVyc0Ryb3Bkb3duTGlzdC5hcHBlbmQob3B0aW9uKTtcblxuICAgICAgaSsrO1xuICAgIH1cbiAgICAqL1xuICB9XG5cbiAgYXN5bmMgZGlkU2VsZWN0QmF0aGVyKGV2ZW50KSB7XG4gICAgdGhpcy5jbGVhckNhcmQoKTtcblxuICAgIGNvbnN0IG5mdEluZGV4ID0gZXZlbnQuY3VycmVudFRhcmdldC5kYXRhc2V0LmluZGV4O1xuXG4gICAgaWYgKCFuZnRJbmRleCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IG5mdCA9IHRoaXMuYmF0aGVyc0NvbGxlY3Rpb24ubmZ0c1tuZnRJbmRleF07XG4gICAgdGhpcy5zZWxlY3RlZEJhdGhlciA9IG5mdDtcblxuICAgIC8vZGlzcGxheSBpbWFnZVxuICAgIGNvbnN0IGJhdGhlckltZyA9IHRoaXMudWkucXVlcnlTZWxlY3RvcihcIiNjbHViLWltZ1wiKTtcbiAgICBiYXRoZXJJbWcuc3JjID0gbmZ0LmltYWdlVXJsO1xuXG4gICAgdGhpcy52YWxpZGF0ZSgpO1xuXG4gICAgYXdhaXQgdGhpcy5sb2FkQ2FyZHMoKTtcbiAgICB0aGlzLmNob29zZUNhcmRCdXR0b24uZGlzYWJsZWQgPSBmYWxzZTtcblxuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gIH1cblxuICBjbGVhckNhcmQoKSB7XG4gICAgdGhpcy5zZWxlY3RlZENhcmQgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5jaG9vc2VDYXJkQnV0dG9uLmRpc2FibGVkID0gdHJ1ZTtcblxuICAgIGNvbnN0IGNhcmRJbWcgPSB0aGlzLnVpLnF1ZXJ5U2VsZWN0b3IoXCIjY2FyZC1pbWdcIik7XG4gICAgY2FyZEltZy5zcmMgPSBcImFzc2V0cy9kZWZhdWx0LWNhcmQucG5nXCI7XG4gIH1cblxuICBhc3luYyBsb2FkQ2FyZHMoKSB7XG4gICAgdGhpcy5jYXJkc0NvbGxlY3Rpb24gPSB0aGlzLmhvbGRpbmdzW1wiY2FmZmVpbmVDYXJkc1wiXTtcblxuICAgIGNvbnN0IGRyb3Bkb3duRGl2ID0gdGhpcy51aS5xdWVyeVNlbGVjdG9yKFwiI2NhcmRzLWRyb3Bkb3duXCIpO1xuXG4gICAgbGV0IGRyb3Bkb3duID0gZHJvcGRvd25EaXYucXVlcnlTZWxlY3RvcihcIiNjYXJkcy1kcm9wZG93bi1uZnRcIik7XG4gICAgaWYgKGRyb3Bkb3duKSB7XG4gICAgICBkcm9wZG93bi5yZW1vdmUoKTtcbiAgICB9XG5cbiAgICBsZXQgZGlzYWJsZWRBc3NldElkcyA9IFtdO1xuICAgIGxldCBpID0gMDtcbiAgICBmb3IgKGNvbnN0IG5mdCBvZiB0aGlzLmNhcmRzQ29sbGVjdGlvbi5uZnRzKSB7XG5cbiAgICAgIC8vY2hlY2sgcmVxdWlyZW1lbnRcbiAgICAgIGlmIChuZnQubWV0YWRhdGEucmVxdWlyZSkge1xuXG4gICAgICAgIGZvciAoY29uc3QgcmVxdWlyZUtleSBpbiBuZnQubWV0YWRhdGEucmVxdWlyZSkge1xuICAgICAgICAgIGlmIChcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRCYXRoZXIubWV0YWRhdGEucHJvcGVydGllc1tyZXF1aXJlS2V5XSAhPVxuICAgICAgICAgICAgbmZ0Lm1ldGFkYXRhLnJlcXVpcmVbcmVxdWlyZUtleV1cbiAgICAgICAgICApIHtcblxuICAgICAgICAgICAgZGlzYWJsZWRBc3NldElkcy5wdXNoKG5mdC5hc3NldElkKVxuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgY29uc29sZS5sb2coZGlzYWJsZWRBc3NldElkcyk7XG5cbiAgICBkcm9wZG93biA9IG5ldyBEcm9wZG93bk5mdHMoXG4gICAgICB0aGlzLmNhcmRzQ29sbGVjdGlvbi5uZnRzLFxuICAgICAgdGhpcy5kaWRTZWxlY3RDYXJkLmJpbmQodGhpcyksXG4gICAgICBcImNhcmRzLWRyb3Bkb3duLW5mdFwiLFxuICAgICAgZGlzYWJsZWRBc3NldElkc1xuICAgICk7XG4gICAgZHJvcGRvd25EaXYuYXBwZW5kKGRyb3Bkb3duLnVpKTtcblxuICAgIG5ldyB3aW5kb3cuYm9vdHN0cmFwLkRyb3Bkb3duKHRoaXMuY2hvb3NlQ2FyZEJ1dHRvbik7XG5cbiAgICAvKlxuXG4gICAgY29uc3QgY2FyZHNEcm9wZG93bkxpc3QgPSB0aGlzLnVpLnF1ZXJ5U2VsZWN0b3IoXCIjY2FyZHMtZHJvcGRvd24tbGlzdFwiKTtcbiAgICBjYXJkc0Ryb3Bkb3duTGlzdC50ZXh0Q29udGVudCA9IFwiXCI7XG5cbiAgICAvL2FkZCBkZWZhdWx0IHZhbHVlXG4gICAgY29uc3Qgb3B0aW9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxpXCIpO1xuICAgIGNhcmRzRHJvcGRvd25MaXN0LmFwcGVuZENoaWxkKG9wdGlvbik7XG5cbiAgICBpZiAodGhpcy5jYXJkc0NvbGxlY3Rpb24ubmZ0cy5sZW5ndGggPT09IDApIHtcbiAgICAgIG9wdGlvbi5pbm5lckhUTUwgPSAnPGEgY2xhc3M9XCJkcm9wZG93bi1pdGVtIGRpc2FibGVkXCI+Tm8gY2FyZHM8L2E+JztcbiAgICB9XG5cbiAgICBsZXQgaSA9IDA7XG4gICAgZm9yIChjb25zdCBuZnQgb2YgdGhpcy5jYXJkc0NvbGxlY3Rpb24ubmZ0cykge1xuXG4gICAgICBsZXQgZGlzYWJsZWQgPSBmYWxzZTtcblxuICAgICAgLy9jaGVjayByZXF1aXJlbWVudFxuICAgICAgaWYgKG5mdC5tZXRhZGF0YS5yZXF1aXJlKXtcblxuICAgICAgICBmb3IgKGNvbnN0IHJlcXVpcmVLZXkgaW4gbmZ0Lm1ldGFkYXRhLnJlcXVpcmUpe1xuICAgICAgICAgIGlmICh0aGlzLnNlbGVjdGVkQmF0aGVyLm1ldGFkYXRhLnByb3BlcnRpZXNbcmVxdWlyZUtleV0gIT0gbmZ0Lm1ldGFkYXRhLnJlcXVpcmVbcmVxdWlyZUtleV0pe1xuICAgICAgICAgICAgZGlzYWJsZWQgPSB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBjb25zdCBvcHRpb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGlcIik7XG5cbiAgICAgIGNvbnN0IGEgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYVwiKTtcblxuICAgICAgbGV0IGltZ1N0eWxlU3RyID0gJyc7XG5cbiAgICAgIGlmICghZGlzYWJsZWQpe1xuICAgICAgICBhLmNsYXNzTmFtZSA9ICdkcm9wZG93bi1pdGVtJztcbiAgICAgICAgYS5ocmVmID0gJyMnO1xuICAgICAgICBhLmRhdGFzZXQuaW5kZXggPSBpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYS5jbGFzc05hbWUgPSAnZHJvcGRvd24taXRlbSBkaXNhYmxlZCc7XG5cbiAgICAgICAgaW1nU3R5bGVTdHIgPSAnIHN0eWxlPVwib3BhY2l0eTogMC41O1wiJztcbiAgICAgIH1cblxuICAgICAgYS5pbm5lckhUTUwgPSBgPGltZyBzcmM9XCIke25mdC5pbWFnZVVybH1cIiR7aW1nU3R5bGVTdHJ9PiAke25mdC5uYW1lfWA7XG5cbiAgICAgIGEuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLmRpZFNlbGVjdENhcmQuYmluZCh0aGlzKSwgZmFsc2UpO1xuXG4gICAgICBvcHRpb24uYXBwZW5kKGEpO1xuICAgICAgY2FyZHNEcm9wZG93bkxpc3QuYXBwZW5kKG9wdGlvbik7XG5cbiAgICAgIGkrKztcbiAgICB9XG4gICAgKi9cbiAgfVxuXG4gIGFzeW5jIGRpZFNlbGVjdENhcmQoZXZlbnQpIHtcbiAgICBjb25zdCBuZnRJbmRleCA9IGV2ZW50LmN1cnJlbnRUYXJnZXQuZGF0YXNldC5pbmRleDtcblxuICAgIGlmICghbmZ0SW5kZXgpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBuZnQgPSB0aGlzLmNhcmRzQ29sbGVjdGlvbi5uZnRzW25mdEluZGV4XTtcbiAgICB0aGlzLnNlbGVjdGVkQ2FyZCA9IG5mdDtcblxuICAgIC8vZGlzcGxheSBpbWFnZVxuICAgIGNvbnN0IGNhcmRJbWcgPSB0aGlzLnVpLnF1ZXJ5U2VsZWN0b3IoXCIjY2FyZC1pbWdcIik7XG4gICAgY2FyZEltZy5zcmMgPSBuZnQuaW1hZ2VVcmw7XG5cbiAgICB0aGlzLnZhbGlkYXRlKCk7XG5cbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICB9XG5cbiAgdmFsaWRhdGUoKSB7XG4gICAgY29uc3QgcmV2aWV3QnV0dG9uID0gdGhpcy51aS5xdWVyeVNlbGVjdG9yKFwiI2J1dHRvbi1yZXZpZXdcIik7XG5cbiAgICBpZiAodGhpcy5zZWxlY3RlZEJhdGhlciAmJiB0aGlzLnNlbGVjdGVkQ2FyZCkge1xuICAgICAgcmV2aWV3QnV0dG9uLmRpc2FibGVkID0gZmFsc2U7XG5cbiAgICAgIHRoaXMucHJldmlldygpO1xuICAgIH0gZWxzZSBpZiAodGhpcy5zZWxlY3RlZEJhdGhlcikge1xuICAgICAgY29uc3QgbWVyZ2VkSW1nID0gdGhpcy51aS5xdWVyeVNlbGVjdG9yKFwiI21lcmdlZC1pbWdcIik7XG4gICAgICBtZXJnZWRJbWcuc3JjID0gdGhpcy5zZWxlY3RlZEJhdGhlci5pbWFnZVVybDtcblxuICAgICAgcmV2aWV3QnV0dG9uLmRpc2FibGVkID0gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV2aWV3QnV0dG9uLmRpc2FibGVkID0gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICByZXZpZXcoZXZlbnQpIHtcbiAgICBjb25zdCBtb2RhbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgbW9kYWwuY2xhc3NOYW1lID0gXCJtb2RhbFwiO1xuICAgIG1vZGFsLnRhYkluZGV4ID0gXCItMVwiO1xuXG4gICAgbW9kYWwuaW5uZXJIVE1MID0gYFxuICAgIDxkaXYgY2xhc3M9XCJtb2RhbC1kaWFsb2cgbW9kYWwtZGlhbG9nLWNlbnRlcmVkXCI+XG4gICAgICA8ZGl2IGNsYXNzPVwibW9kYWwtY29udGVudFwiPlxuICAgICAgICA8ZGl2IGNsYXNzPVwibW9kYWwtaGVhZGVyXCI+XG4gICAgICAgICAgPGg1IGNsYXNzPVwibW9kYWwtdGl0bGVcIj5SZXZpZXcgQmF0aGVyIGV2b2x1dGlvbjwvaDU+XG4gICAgICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJidG4tY2xvc2VcIiBkYXRhLWJzLWRpc21pc3M9XCJtb2RhbFwiIGFyaWEtbGFiZWw9XCJDbG9zZVwiPjwvYnV0dG9uPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzcz1cIm1vZGFsLWJvZHlcIj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJ0ZXh0LWNlbnRlciBtYi0zXCI+XG4gICAgICAgICAgICAgICAgPGltZyBzdHlsZT1cIndpZHRoOiAzMjBweDsgaGVpZ2h0OiBhdXRvO1wiIGlkPVwicHJldmlldy1tZXJnZWQtaW1nXCI+XG4gICAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgIDxwPlxuICAgICAgICAgIFlvdXIgPHN0cm9uZz4ke3RoaXMuc2VsZWN0ZWRCYXRoZXIubmFtZX08L3N0cm9uZz4gd2lsbCBiZSB1cGRhdGVkLjxicj5cbiAgICAgICAgICBZb3VyIDxzdHJvbmc+JHt0aGlzLnNlbGVjdGVkQ2FyZC5uYW1lfTwvc3Ryb25nPiB3aWxsIGJlIGJ1cm5lZCAmIzEyODI5MztcbiAgICAgICAgICA8L3A+XG4gICAgICAgICAgICBcbiAgICAgICAgICA8cD4mIzEyODMzNzsgQXMgdGhlIHByb2Nlc3MgcmVxdWlyZXMgYSBtYW51YWwgc3RlcCwgdXBkYXRlIGNhbiB0YWtlIHVwIHRvIDI0aC48YnI+XG4gICAgICAgICAgJiMxMjgyMzY7IFlvdSB3aWxsIGJlIG5vdGlmaWVkIGJ5IGEgemVybyBBbGdvIHRyYW5zYWN0aW9uIHdoZW4gdGhlIGV2b2x1dGlvbiBpcyBjb21wbGV0ZS48L3A+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzPVwibW9kYWwtZm9vdGVyXCI+XG4gICAgICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJidXR0b24tYWx0XCIgZGF0YS1icy1kaXNtaXNzPVwibW9kYWxcIj5DbG9zZTwvYnV0dG9uPlxuICAgICAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGlkPVwic2VuZC1idXR0b25cIj5TZW5kIHJlcXVlc3Q8L2J1dHRvbj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgICBgO1xuXG4gICAgY29uc3QgcHJldmlld01lcmdlZEltZyA9IG1vZGFsLnF1ZXJ5U2VsZWN0b3IoXCIjcHJldmlldy1tZXJnZWQtaW1nXCIpO1xuICAgIHByZXZpZXdNZXJnZWRJbWcuc3JjID0gdGhpcy5tZXJnZWRJbWdEYXRhVVJMO1xuXG4gICAgY29uc3Qgc2VuZEJ1dHRvbiA9IG1vZGFsLnF1ZXJ5U2VsZWN0b3IoXCIjc2VuZC1idXR0b25cIik7XG4gICAgc2VuZEJ1dHRvbi5jdXJyZW50TW9kYWwgPSBtb2RhbDtcbiAgICBzZW5kQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCB0aGlzLnNlbmQuYmluZCh0aGlzKSwgZmFsc2UpO1xuXG4gICAgY29uc3QgbXlNb2RhbCA9IG5ldyB3aW5kb3cuYm9vdHN0cmFwLk1vZGFsKG1vZGFsLCB7fSk7XG5cbiAgICBteU1vZGFsLnNob3coKTtcblxuICAgIHJldHVybjtcbiAgfVxuXG4gIGFzeW5jIHByZXZpZXcoKSB7XG4gICAgY29uc3QgcmV2aWV3QnV0dG9uID0gdGhpcy51aS5xdWVyeVNlbGVjdG9yKFwiI2J1dHRvbi1yZXZpZXdcIik7XG4gICAgcmV2aWV3QnV0dG9uLmRpc2FibGVkID0gdHJ1ZTtcbiAgICByZXZpZXdCdXR0b24udGV4dENvbnRlbnQgPSBcIkdlbmVyYXRpbmcuLi5cIjtcblxuICAgIGNvbnN0IG1lcmdlZEltZyA9IHRoaXMudWkucXVlcnlTZWxlY3RvcihcIiNtZXJnZWQtaW1nXCIpO1xuXG4gICAgY29uc3QgbWVyZ2VkUHJvcGVydGllcyA9IE9iamVjdC5hc3NpZ24oXG4gICAgICB7fSxcbiAgICAgIHRoaXMuc2VsZWN0ZWRCYXRoZXIubWV0YWRhdGEucHJvcGVydGllc1xuICAgICk7IC8vbWFrZSBhIHNoYWxsb3cgY29weVxuXG4gICAgZm9yIChjb25zdCBrZXkgaW4gdGhpcy5zZWxlY3RlZENhcmQubWV0YWRhdGEucHJvcGVydGllcykge1xuICAgICAgbWVyZ2VkUHJvcGVydGllc1trZXldID0gdGhpcy5zZWxlY3RlZENhcmQubWV0YWRhdGEucHJvcGVydGllc1trZXldO1xuICAgIH1cblxuICAgIC8vY29uc29sZS5sb2cocHJvcGVydGllcylcbiAgICBjb25zdCBjYW52YXMgPSBhd2FpdCBkcmF3KG1lcmdlZFByb3BlcnRpZXMsIGxheWVycywgXCJsYXllcnNfaW1hZ2VzXCIpO1xuXG4gICAgdGhpcy5tZXJnZWRJbWdEYXRhVVJMID0gY2FudmFzLnRvRGF0YVVSTChcImltYWdlL3BuZ1wiKTtcblxuICAgIG1lcmdlZEltZy5zcmMgPSB0aGlzLm1lcmdlZEltZ0RhdGFVUkw7XG5cbiAgICByZXZpZXdCdXR0b24uZGlzYWJsZWQgPSBmYWxzZTtcbiAgICByZXZpZXdCdXR0b24udGV4dENvbnRlbnQgPSBcIlJldmlldy4uLlwiO1xuICB9XG5cbiAgYXN5bmMgc2VuZChldmVudCkge1xuICAgIGNvbnN0IHNlbmRCdXR0b24gPSBldmVudC5jdXJyZW50VGFyZ2V0O1xuICAgIHNlbmRCdXR0b24uZGlzYWJsZWQgPSB0cnVlO1xuICAgIHNlbmRCdXR0b24udGV4dENvbnRlbnQgPSBcIldhaXRpbmcgZm9yIHNpZ25hdHVyZS4uLlwiO1xuXG4gICAgY29uc3Qgc3VnZ2VzdGVkUGFyYW1zID0gYXdhaXQgdGhpcy5hbGdvZENsaWVudC5nZXRUcmFuc2FjdGlvblBhcmFtcygpLmRvKCk7XG5cbiAgICAvL2dlbmVyYXRlIHR4XG5cbiAgICBjb25zdCBub3RlID0ge1xuICAgICAgZXZvbHZlOiB0aGlzLnNlbGVjdGVkQmF0aGVyLmFzc2V0SWQsXG4gICAgfTtcblxuICAgIGNvbnN0IHRleHRFbmNvZGVyID0gbmV3IFRleHRFbmNvZGVyKCk7XG4gICAgY29uc3QgZW5jb2RlZE5vdGUgPSB0ZXh0RW5jb2Rlci5lbmNvZGUoSlNPTi5zdHJpbmdpZnkobm90ZSkpO1xuXG4gICAgY29uc3Qgc2VuZFR4biA9IGFsZ29zZGsubWFrZUFzc2V0VHJhbnNmZXJUeG5XaXRoU3VnZ2VzdGVkUGFyYW1zRnJvbU9iamVjdCh7XG4gICAgICBmcm9tOiB0aGlzLndhbGxldENvbm5lY3Qud2FsbGV0QWRkcmVzcyxcbiAgICAgIHRvOiB0aGlzLmNhcmRzQ29sbGVjdGlvbi5jb2xsZWN0aW9uc1swXS5hZGRyZXNzZXNbMF0sXG4gICAgICBhbW91bnQ6IDEsXG4gICAgICBhc3NldEluZGV4OiB0aGlzLnNlbGVjdGVkQ2FyZC5hc3NldElkLFxuICAgICAgc3VnZ2VzdGVkUGFyYW1zOiBzdWdnZXN0ZWRQYXJhbXMsXG4gICAgICBub3RlOiBlbmNvZGVkTm90ZSxcbiAgICB9KTtcblxuICAgIGNvbnN0IHNpZ25lZFR4biA9IGF3YWl0IHRoaXMud2FsbGV0Q29ubmVjdC5zaWduVHJhbnNhY3Rpb25zKFtzZW5kVHhuXSk7XG5cbiAgICAvL2Rpc3BsYXkgd2FpdCBhbmltYXRpb25cbiAgICBjb25zdCBjdXJyZW50TW9kYWwgPSBzZW5kQnV0dG9uLmN1cnJlbnRNb2RhbDtcblxuICAgIGN1cnJlbnRNb2RhbC5pbm5lckhUTUwgPSBgXG4gICAgPGRpdiBjbGFzcz1cIm1vZGFsLWRpYWxvZyBtb2RhbC1kaWFsb2ctY2VudGVyZWRcIj5cbiAgICAgIDxkaXYgY2xhc3M9XCJtb2RhbC1jb250ZW50XCI+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJtb2RhbC1oZWFkZXJcIj5cbiAgICAgICAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cImJ0bi1jbG9zZVwiIGRhdGEtYnMtZGlzbWlzcz1cIm1vZGFsXCIgYXJpYS1sYWJlbD1cIkNsb3NlXCI+PC9idXR0b24+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzPVwibW9kYWwtYm9keSBcIj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJ0ZXh0LWNlbnRlciBtYi0zXCI+XG4gICAgICAgICAgICAgICAgPGltZyBzcmM9XCJhc3NldHMvZ3JpbmRlci5wbmdcIiBzdHlsZT1cIndpZHRoOiAxMjhweDsgaGVpZ2h0OiBhdXRvO1wiPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwidGV4dC1jZW50ZXIgbWItM1wiPlxuICAgICAgICAgICAgU2VuZGluZyBDYWZmZWluZSBDYXJkIHRvIHRoZSBHcmluZGVyLi4uXG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgICBgO1xuXG4gICAgLy9zZW5kIHRyYW5zYWN0aW9uXG4gICAgbGV0IHR4O1xuICAgIHRyeSB7XG4gICAgICB0eCA9IGF3YWl0IHRoaXMuYWxnb2RDbGllbnQuc2VuZFJhd1RyYW5zYWN0aW9uKHNpZ25lZFR4bikuZG8oKTtcblxuICAgICAgLy8gV2FpdCBmb3IgY29uZmlybWF0aW9uXG4gICAgICBsZXQgY29uZmlybWVkVHhuID0gYXdhaXQgYWxnb3Nkay53YWl0Rm9yQ29uZmlybWF0aW9uKFxuICAgICAgICB0aGlzLmFsZ29kQ2xpZW50LFxuICAgICAgICB0eC50eElkLFxuICAgICAgICA0XG4gICAgICApO1xuXG4gICAgICBjdXJyZW50TW9kYWwuaW5uZXJIVE1MID0gYFxuICAgIDxkaXYgY2xhc3M9XCJtb2RhbC1kaWFsb2cgbW9kYWwtZGlhbG9nLWNlbnRlcmVkXCI+XG4gICAgICA8ZGl2IGNsYXNzPVwibW9kYWwtY29udGVudFwiPlxuICAgICAgICA8ZGl2IGNsYXNzPVwibW9kYWwtaGVhZGVyXCI+XG4gICAgICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJidG4tY2xvc2VcIiBkYXRhLWJzLWRpc21pc3M9XCJtb2RhbFwiIGFyaWEtbGFiZWw9XCJDbG9zZVwiPjwvYnV0dG9uPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzcz1cIm1vZGFsLWJvZHlcIj5cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwidGV4dC1jZW50ZXIgbWItM1wiPlxuICAgICAgICAgIDxpbWcgc3JjPVwiYXNzZXRzL2hlYXJ0LWN1cC5wbmdcIiB3aWR0aD1cIjYwXCI+PGJyPjxicj5cbiAgICAgICAgICBXZSBnb3QgeW91ciBjYXJkIGFuZCB5b3VyIGV2b2x1dGlvbiByZXF1ZXN0Ljxicj5cbiAgICAgICAgICBXZSdsbCBiZSBiYWNrIHRvIHlvdSB2ZXJ5IHNvb24uXG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzPVwibW9kYWwtZm9vdGVyXCI+XG4gICAgICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgZGF0YS1icy1kaXNtaXNzPVwibW9kYWxcIj5DbG9zZTwvYnV0dG9uPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICAgIGA7XG5cbiAgICAgIGN1cnJlbnRNb2RhbC5hZGRFdmVudExpc3RlbmVyKFwiaGlkZGVuLmJzLm1vZGFsXCIsIChldmVudCkgPT4ge1xuICAgICAgICAvL3JlbG9hZCB3aG9sZSBwYWdlIHRvIHVwZGF0ZSBob2xkaW5nc1xuICAgICAgICBsb2NhdGlvbi5yZWxvYWQoKTtcbiAgICAgIH0pO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgY3VycmVudE1vZGFsLmlubmVySFRNTCA9IGBcbiAgICA8ZGl2IGNsYXNzPVwibW9kYWwtZGlhbG9nIG1vZGFsLWRpYWxvZy1jZW50ZXJlZFwiPlxuICAgICAgPGRpdiBjbGFzcz1cIm1vZGFsLWNvbnRlbnRcIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cIm1vZGFsLWhlYWRlclwiPlxuICAgICAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwiYnRuLWNsb3NlXCIgZGF0YS1icy1kaXNtaXNzPVwibW9kYWxcIiBhcmlhLWxhYmVsPVwiQ2xvc2VcIj48L2J1dHRvbj5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJtb2RhbC1ib2R5XCI+XG4gICAgICAgICAgPGRpdiBjbGFzcz1cInRleHQtY2VudGVyIG1iLTNcIj5cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtZGFuZ2VyXCIgcm9sZT1cImFsZXJ0XCI+JHtlcnIubWVzc2FnZX0gPC9kaXY+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzPVwibW9kYWwtZm9vdGVyXCI+XG4gICAgICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgZGF0YS1icy1kaXNtaXNzPVwibW9kYWxcIj5DbG9zZTwvYnV0dG9uPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICAgIGA7XG5cbiAgICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAgICB9XG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJHcmluZGVyIiwiQmFzZVBhZ2UiLCJjb25zdHJ1Y3RvciIsInN1cGVyIiwiYXJndW1lbnRzIiwidGhpcyIsInVpIiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50IiwiaW5uZXJIVE1MIiwiYmF0aGVyc0NvbGxlY3Rpb24iLCJjYXJkc0NvbGxlY3Rpb24iLCJzZWxlY3RlZEJhdGhlciIsInNlbGVjdGVkQ2FyZCIsIm1lcmdlZEltZ0RhdGFVUkwiLCJjaG9vc2VDYXJkQnV0dG9uIiwicXVlcnlTZWxlY3RvciIsImxvYWQiLCJhc3luYyIsImxvYWRCYXRoZXJzIiwiYWRkRXZlbnRMaXN0ZW5lciIsInJldmlldyIsImJpbmQiLCJob2xkaW5ncyIsImRyb3Bkb3duRGl2IiwiZHJvcGRvd24iLCJyZW1vdmUiLCJuZnRzIiwiZGlkU2VsZWN0QmF0aGVyIiwiYXBwZW5kIiwiZXZlbnQiLCJjbGVhckNhcmQiLCJuZnRJbmRleCIsImN1cnJlbnRUYXJnZXQiLCJkYXRhc2V0IiwiaW5kZXgiLCJuZnQiLCJzcmMiLCJpbWFnZVVybCIsInZhbGlkYXRlIiwibG9hZENhcmRzIiwiZGlzYWJsZWQiLCJwcmV2ZW50RGVmYXVsdCIsInVuZGVmaW5lZCIsImRpc2FibGVkQXNzZXRJZHMiLCJtZXRhZGF0YSIsInJlcXVpcmUiLCJyZXF1aXJlS2V5IiwicHJvcGVydGllcyIsInB1c2giLCJhc3NldElkIiwiY29uc29sZSIsImxvZyIsImRpZFNlbGVjdENhcmQiLCJ3aW5kb3ciLCJib290c3RyYXAiLCJEcm9wZG93biIsInJldmlld0J1dHRvbiIsInByZXZpZXciLCJtb2RhbCIsImNsYXNzTmFtZSIsInRhYkluZGV4IiwibmFtZSIsInNlbmRCdXR0b24iLCJjdXJyZW50TW9kYWwiLCJzZW5kIiwiTW9kYWwiLCJzaG93IiwidGV4dENvbnRlbnQiLCJtZXJnZWRJbWciLCJtZXJnZWRQcm9wZXJ0aWVzIiwiT2JqZWN0IiwiYXNzaWduIiwia2V5IiwiY2FudmFzIiwidG9EYXRhVVJMIiwic3VnZ2VzdGVkUGFyYW1zIiwiYWxnb2RDbGllbnQiLCJnZXRUcmFuc2FjdGlvblBhcmFtcyIsImRvIiwibm90ZSIsImV2b2x2ZSIsImVuY29kZWROb3RlIiwiVGV4dEVuY29kZXIiLCJlbmNvZGUiLCJKU09OIiwic3RyaW5naWZ5Iiwic2VuZFR4biIsImZyb20iLCJ3YWxsZXRDb25uZWN0Iiwid2FsbGV0QWRkcmVzcyIsInRvIiwiY29sbGVjdGlvbnMiLCJhZGRyZXNzZXMiLCJhbW91bnQiLCJhc3NldEluZGV4Iiwic2lnbmVkVHhuIiwic2lnblRyYW5zYWN0aW9ucyIsInR4Iiwic2VuZFJhd1RyYW5zYWN0aW9uIiwidHhJZCIsImxvY2F0aW9uIiwicmVsb2FkIiwiZXJyIiwibWVzc2FnZSIsImVycm9yIl0sInNvdXJjZVJvb3QiOiIifQ==