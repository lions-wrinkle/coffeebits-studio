"use strict";(self.webpackChunkstudio=self.webpackChunkstudio||[]).push([[720],{9720:(t,e,s)=>{s.r(e),s.d(e,{GoodMorning:()=>p});var a=s(6998),i=s(194),o=s(1466);const{GIFEncoder:n,quantize:r,applyPalette:h}=o;class d{constructor(t,e,s=1){this.width=t,this.height=e,this.scale=s,this.gifEncoder=n()}addFrame(t,e=300){let{data:s,width:a,height:o}=t.getImageData(0,0,this.width,this.height);const n=r(s,256);if(1!=this.scale){const e=(0,i.vL)(Math.round(this.width*this.scale),Math.round(this.height*this.scale)),n=e.getContext("2d");n.imageSmoothingEnabled=!1,n.scale(this.scale,this.scale),n.drawImage(t.canvas,0,0);const r=n.getImageData(0,0,e.width,e.height);s=r.data,a=r.width,o=r.height}const d=h(s,n);this.gifEncoder.writeFrame(d,a,o,{palette:n,delay:e})}finish(){this.gifEncoder.finish()}getOutput(){return this.gifEncoder.bytes()}}var c=s(7644);class g{constructor(){this.width=48,this.height=48,this.scale=8,this.layersData,this.types=["chatty","shower","sunrise","neon_glitch"]}async drawLayers(t,e,s){this.layersData=await(0,c.i)(t,e,s,!0)}async draw_chatty(){const t=new d(this.width,this.height,this.scale),e=(0,i.vL)(this.width,this.height).getContext("2d"),s=(0,i.vL)(this.width,this.height),a=s.getContext("2d"),o=["./graphic-tools-assets/basic-1.png","./graphic-tools-assets/basic-2.png","./graphic-tools-assets/basic-3.png","./graphic-tools-assets/basic-4.png","./graphic-tools-assets/basic-5.png","./graphic-tools-assets/basic-6.png"];let n=0;for(const r of o){for(const t of this.layersData){const i=t.imageData;a.clearRect(0,0,this.width,this.height),a.putImageData(i,0,0),e.save(),n%2==1&&["body","reflection","mouth","beard","clothes","minicup","eyes","head","power","glow"].includes(t.name)&&(e.translate(this.width,0),e.scale(-1,1)),e.drawImage(s,0,0),e.restore()}const o=await(0,i.po)(r);e.drawImage(o,0,0),t.addFrame(e,700),n++}return t.finish(),t.getOutput()}async draw_shower(){const t=new d(this.width,this.height,this.scale),e=(0,i.vL)(this.width,this.height).getContext("2d"),s=(0,i.vL)(this.width,this.height),a=s.getContext("2d"),o=["./graphic-tools-assets/coffee-shower-1.png","./graphic-tools-assets/coffee-shower-2.png","./graphic-tools-assets/coffee-shower-3.png","./graphic-tools-assets/coffee-shower-4.png"];for(const n of o){let o=!1;for(const t of this.layersData){const r=t.imageData;if(a.clearRect(0,0,this.width,this.height),a.putImageData(r,0,0),e.drawImage(s,0,0),"head"===t.name){const t=await(0,i.po)(n);e.drawImage(t,0,0),o=!0}}if(!o){const t=await(0,i.po)(n);e.drawImage(t,0,0)}t.addFrame(e,100)}return t.finish(),t.getOutput()}async draw_sunrise(){const t=new d(this.width,this.height,this.scale),e=(0,i.vL)(this.width,this.height).getContext("2d"),s=(0,i.vL)(this.width,this.height),a=s.getContext("2d"),o=[{background:"./graphic-tools-assets/sunrise-1.png",foreground:null,duration:100},{background:"./graphic-tools-assets/sunrise-2.png",foreground:null,duration:100},{background:"./graphic-tools-assets/sunrise-3.png",foreground:"./graphic-tools-assets/sunrise-text-1.png",duration:100},{background:"./graphic-tools-assets/sunrise-4.png",foreground:"./graphic-tools-assets/sunrise-text-2.png",duration:100},{background:"./graphic-tools-assets/sunrise-5.png",foreground:"./graphic-tools-assets/sunrise-text-3.png",duration:100},{background:"./graphic-tools-assets/sunrise-6.png",foreground:"./graphic-tools-assets/sunrise-text-4.png",duration:1200},{background:"./graphic-tools-assets/sunrise-7.png",foreground:"./graphic-tools-assets/sunrise-text-4.png",duration:100},{background:"./graphic-tools-assets/sunrise-8.png",foreground:"./graphic-tools-assets/sunrise-text-5.png",duration:100},{background:"./graphic-tools-assets/sunrise-9.png",foreground:null,duration:100}];for(const n of o){for(const t of this.layersData){const o=t.imageData;if(a.clearRect(0,0,this.width,this.height),a.putImageData(o,0,0),e.drawImage(s,0,0),"room"===t.name){const t=await(0,i.po)(n.background);e.drawImage(t,0,0)}}if(n.foreground){const t=await(0,i.po)(n.foreground);e.drawImage(t,0,0)}t.addFrame(e,n.duration)}return t.finish(),t.getOutput()}glitch(t,e,s=!1){const a=t.data.length/4;if(s)return t;let i=e.createImageData(this.width,this.height);i.data.set(t.data);for(let e=0;e<3;e++){let e=Math.floor(Math.random()*a),s=Math.round(Math.random())?"add":"remove";if("add"===s)for(let s=e;s<a;s++)i.data[4*s+0]=t.data[4*(s-1)+0],i.data[4*s+1]=t.data[4*(s-1)+1],i.data[4*s+2]=t.data[4*(s-1)+2],i.data[4*s+3]=t.data[4*(s-1)+3];else if("remove"===s)for(let s=e;s<a;s++)i.data[4*s+0]=t.data[4*(s+1)+0],i.data[4*s+1]=t.data[4*(s+1)+1],i.data[4*s+2]=t.data[4*(s+1)+2],i.data[4*s+3]=t.data[4*(s+1)+3]}return i}async glitchedImage(t,e){const s=(0,i.vL)(this.width,this.height),a=s.getContext("2d"),o=await(0,i.po)(t);a.clearRect(0,0,this.width,this.height),a.drawImage(o,0,0);const n=this.glitch(a.getImageData(0,0,this.width,this.height),a,e);return a.putImageData(n,0,0),s}async draw_neon_glitch(){const t=new d(this.width,this.height,this.scale),e=(0,i.vL)(this.width,this.height).getContext("2d"),s=(0,i.vL)(this.width,this.height),a=s.getContext("2d"),o="./graphic-tools-assets/neon-glitch-g.png",n="./graphic-tools-assets/neon-glitch-m.png";for(let i=0;i<25;i++){let r=!1;(i>=9&&i<=12||i>=20&&i<=21)&&(r=!0);const h="foreground",d="background";for(const t of this.layersData){const i=this.glitch(t.imageData,a,!r);if(a.clearRect(0,0,this.width,this.height),a.putImageData(i,0,0),e.drawImage(s,0,0),"room"===t.name){if("background"===h){const t=await this.glitchedImage(o,!r);e.drawImage(t,0,0)}if("background"===d){const t=await this.glitchedImage(n,!r);e.drawImage(t,0,0)}}}if("foreground"===h){const t=await this.glitchedImage(o,!r);e.drawImage(t,0,0)}if("foreground"===d){const t=await this.glitchedImage(n,!r);e.drawImage(t,0,0)}t.addFrame(e,100)}return t.finish(),t.getOutput()}}var l=s(2871),u=s(4714);class p extends a.BasePage{constructor(){super(...arguments),this.ui=document.createElement("div"),this.ui.innerHTML='\n        <h1>Good Morning Generator</h1>\n        <p class="dark-text">Generate GM GIFs featuring your Bathers</p>\n\n        <div class="d-sm-flex flew-row" style="background-color: var(--background-dark);">\n\n            <div class="d-flex flex-column p-3 text-center justify-content-between">\n\n                <div>\n                    <img src="assets/default.png" class="mb-2 ms-auto me-auto" id="club-img" style="width: 200px; height: auto">\n\n                    <div class="dropdown mb-3" id="bath-club-dropdown">\n                        <button class="dropdown-toggle button-alt" type="button" data-bs-toggle="dropdown"\n                            aria-expanded="false">\n                            Choose Bather\n                        </button>\n\n                    </div>\n\n                    <select class="form-select mb-3" aria-label="Default select example" id="select-filter">\n                        <option value="" selected>Select filter</option>\n                        <option value="chatty">Chatty</option>\n                        <option value="shower">Coffee Shower</option>\n                        <option value="neon_glitch">Neon glitch</option>\n                    </select>\n                </div>\n                \n                <button id="button-download" disabled>Download gif</button>\n\n            </div>\n\n            <div class="d-flex flex-column flex-fill p-3 text-center">\n\n                <img src="assets/default.png" class="w-100 m-auto img-fluid" style="max-width: 384px;" id="merged-img">\n\n            </div>\n\n        </div>',this.bathersCollection,this.selectedBather,this.selectedFilter,this.load()}async load(){await this.loadBathers(),this.ui.querySelector("#select-filter").addEventListener("change",this.didSelectFilter.bind(this),!1),this.ui.querySelector("#button-download").addEventListener("click",this.downloadGif.bind(this),!1)}async loadBathers(){this.bathersCollection=this.holdings.bathers;const t=this.ui.querySelector("#bath-club-dropdown");let e=t.querySelector(".dropdown-menu");e&&e.remove(),e=new l.Z(this.bathersCollection.nfts,this.didSelectBather.bind(this)),t.append(e.ui)}didSelectBather(t){const e=t.currentTarget.dataset.index;if(!e)return;const s=this.bathersCollection.nfts[e];this.selectedBather=s,this.ui.querySelector("#club-img").src=s.imageUrl,this.generateGif(),t.preventDefault()}didSelectFilter(t){this.selectedFilter=t.currentTarget.value,this.selectedFilter&&(this.generateGif(),t.preventDefault())}async generateGif(){if(this.selectedFilter&&this.selectedBather){const t=this.ui.querySelector("#button-download");t.disabled=!0,t.textContent="Generating GIF...";const e=this.ui.querySelector("#merged-img");e.src="assets/default.png";const s=this.selectedBather.metadata.properties,a=new g;await a.drawLayers(s,u,"./layers_images");const i=await a[`draw_${this.selectedFilter}`]();e.src=URL.createObjectURL(new Blob([i.buffer],{type:"image/gif"})),t.disabled=!1,t.textContent="Download GIF"}}downloadGif(){const t=this.ui.querySelector("#merged-img");console.log(t.src);const e=document.createElement("a");e.href=t.src,e.download="good-morning.gif",e.click()}}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,